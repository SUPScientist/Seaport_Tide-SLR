
/Users/pjb/Dropbox/Smart_Coasts_Sensors/Open-Water-Level/Open-Water-Level/Firmware/SLR_Boron_Maxbotix_MB7092_cm/target/4.2.0/boron/SLR_Boron_Maxbotix_MB7092_cm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000043c4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b83e0  000b83e0  000083e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b8404  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003de14  000b8408  0001de14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000970  2003de80  2003de80  0002de80  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b8474  000b8474  00028474  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b849c  000b849c  0002849c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0016161e  00000000  00000000  000284a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00016de6  00000000  00000000  00189abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003cb55  00000000  00000000  001a08a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002d10  00000000  00000000  001dd3f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000acd0  00000000  00000000  001e0109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004193d  00000000  00000000  001eadd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004dc22  00000000  00000000  0022c716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001387f3  00000000  00000000  0027a338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000080a4  00000000  00000000  003b2b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 ff23 	bl	b7e78 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 ff2b 	bl	b7e94 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003de14 	.word	0x2003de14
   b4048:	000b8408 	.word	0x000b8408
   b404c:	2003de80 	.word	0x2003de80
   b4050:	2003de80 	.word	0x2003de80
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 f87d 	bl	b715c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b83b8 	.word	0x000b83b8
   b407c:	000b83dc 	.word	0x000b83dc

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b8e8 	b.w	b4254 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f91d 	bl	b42c4 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 b81d 	b.w	b70cc <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f002 b8cd 	b.w	b6230 <malloc>

000b4096 <_Znaj>:
   b4096:	f002 b8cb 	b.w	b6230 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f002 b8d1 	b.w	b6240 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40ae:	4770      	bx	lr

000b40b0 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40b0:	7c03      	ldrb	r3, [r0, #16]
   b40b2:	f013 0308 	ands.w	r3, r3, #8
   b40b6:	bf1e      	ittt	ne
   b40b8:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40ba:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40bc:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40be:	2b00      	cmp	r3, #0
  }
   b40c0:	bfac      	ite	ge
   b40c2:	4618      	movge	r0, r3
   b40c4:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40c8:	4770      	bx	lr

000b40ca <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40ca:	4770      	bx	lr

000b40cc <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b40cc:	3010      	adds	r0, #16
   b40ce:	f000 bd59 	b.w	b4b84 <_ZN7FatFile4syncEv>

000b40d2 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b40d2:	3010      	adds	r0, #16
   b40d4:	f000 bc77 	b.w	b49c6 <_ZN7FatFile4peekEv>

000b40d8 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b40d8:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b40da:	2201      	movs	r2, #1
   b40dc:	f10d 0107 	add.w	r1, sp, #7
   b40e0:	3010      	adds	r0, #16
   b40e2:	f000 fbc2 	bl	b486a <_ZN7FatFile4readEPvj>
   b40e6:	2801      	cmp	r0, #1
   b40e8:	bf0c      	ite	eq
   b40ea:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b40ee:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   b40f2:	b003      	add	sp, #12
   b40f4:	f85d fb04 	ldr.w	pc, [sp], #4

000b40f8 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b40f8:	3010      	adds	r0, #16
   b40fa:	f000 bdcd 	b.w	b4c98 <_ZN7FatFile5writeEPKvj>

000b40fe <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b40fe:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4100:	2201      	movs	r2, #1
   b4102:	f88d 1007 	strb.w	r1, [sp, #7]
   b4106:	3010      	adds	r0, #16
   b4108:	f10d 0107 	add.w	r1, sp, #7
   b410c:	f000 fdc4 	bl	b4c98 <_ZN7FatFile5writeEPKvj>
  }
   b4110:	b003      	add	sp, #12
   b4112:	f85d fb04 	ldr.w	pc, [sp], #4

000b4116 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4116:	b510      	push	{r4, lr}
  }
   b4118:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b411a:	4604      	mov	r4, r0
  }
   b411c:	f7ff ffbd 	bl	b409a <_ZdlPvj>
   b4120:	4620      	mov	r0, r4
   b4122:	bd10      	pop	{r4, pc}

000b4124 <_ZN4FileD0Ev>:
class File : public FatFile, public Stream {
   b4124:	b510      	push	{r4, lr}
   b4126:	2134      	movs	r1, #52	; 0x34
   b4128:	4604      	mov	r4, r0
   b412a:	f7ff ffb6 	bl	b409a <_ZdlPvj>
   b412e:	4620      	mov	r0, r4
   b4130:	bd10      	pop	{r4, pc}

000b4132 <_ZN5Print5printIlLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b4132:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4134:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b4136:	4606      	mov	r6, r0
   b4138:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b413a:	da0b      	bge.n	b4154 <_ZN5Print5printIlLi0EEEjT_i.part.0.isra.0+0x22>
   b413c:	2a0a      	cmp	r2, #10
   b413e:	d109      	bne.n	b4154 <_ZN5Print5printIlLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b4140:	212d      	movs	r1, #45	; 0x2d
   b4142:	f002 fbdb 	bl	b68fc <_ZN5Print5printEc>
            val = -n;
   b4146:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4148:	b2ea      	uxtb	r2, r5
   b414a:	4630      	mov	r0, r6
    }
}
   b414c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b4150:	f002 bbed 	b.w	b692e <_ZN5Print11printNumberEmh>
            val = n;
   b4154:	4621      	mov	r1, r4
   b4156:	e7f7      	b.n	b4148 <_ZN5Print5printIlLi0EEEjT_i.part.0.isra.0+0x16>

000b4158 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0>:
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   b4158:	b121      	cbz	r1, b4164 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0+0xc>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   b415a:	888b      	ldrh	r3, [r1, #4]
   b415c:	4283      	cmp	r3, r0
   b415e:	d001      	beq.n	b4164 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0+0xc>
                return start;
            }
            start = start->next;
   b4160:	6889      	ldr	r1, [r1, #8]
        while (start) {
   b4162:	e7f9      	b.n	b4158 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0>
        }
        return nullptr;
    }
   b4164:	4608      	mov	r0, r1
   b4166:	4770      	bx	lr

000b4168 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4168:	b40e      	push	{r1, r2, r3}
   b416a:	b503      	push	{r0, r1, lr}
   b416c:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b416e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4170:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4174:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4176:	f002 fcd0 	bl	b6b1a <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b417a:	b002      	add	sp, #8
   b417c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4180:	b003      	add	sp, #12
   b4182:	4770      	bx	lr

000b4184 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4184:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4186:	4604      	mov	r4, r0
   b4188:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b418a:	7922      	ldrb	r2, [r4, #4]
   b418c:	68a3      	ldr	r3, [r4, #8]
   b418e:	b132      	cbz	r2, b419e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4190:	b9a3      	cbnz	r3, b41bc <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4192:	490b      	ldr	r1, [pc, #44]	; (b41c0 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4194:	b002      	add	sp, #8
   b4196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b419a:	f002 bbab 	b.w	b68f4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b419e:	4a09      	ldr	r2, [pc, #36]	; (b41c4 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b41a0:	7b26      	ldrb	r6, [r4, #12]
   b41a2:	4d09      	ldr	r5, [pc, #36]	; (b41c8 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b41a4:	4909      	ldr	r1, [pc, #36]	; (b41cc <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b41a6:	7b64      	ldrb	r4, [r4, #13]
   b41a8:	2e01      	cmp	r6, #1
   b41aa:	bf18      	it	ne
   b41ac:	4629      	movne	r1, r5
   b41ae:	e9cd 1400 	strd	r1, r4, [sp]
   b41b2:	4907      	ldr	r1, [pc, #28]	; (b41d0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b41b4:	f7ff ffd8 	bl	b4168 <_ZN5Print6printfEPKcz>
  }
   b41b8:	b002      	add	sp, #8
   b41ba:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b41bc:	4a05      	ldr	r2, [pc, #20]	; (b41d4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b41be:	e7ef      	b.n	b41a0 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b41c0:	000b8001 	.word	0x000b8001
   b41c4:	000b8067 	.word	0x000b8067
   b41c8:	000b7ffd 	.word	0x000b7ffd
   b41cc:	000b7ff9 	.word	0x000b7ff9
   b41d0:	000b8017 	.word	0x000b8017
   b41d4:	000b7ff0 	.word	0x000b7ff0

000b41d8 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b41d8:	b530      	push	{r4, r5, lr}
   b41da:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b41dc:	4b1b      	ldr	r3, [pc, #108]	; (b424c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b41de:	9300      	str	r3, [sp, #0]
   b41e0:	7913      	ldrb	r3, [r2, #4]
   b41e2:	f88d 3004 	strb.w	r3, [sp, #4]
   b41e6:	6893      	ldr	r3, [r2, #8]
   b41e8:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b41ea:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b41ee:	8993      	ldrh	r3, [r2, #12]
   b41f0:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b41f4:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b41f6:	460a      	mov	r2, r1
   b41f8:	466b      	mov	r3, sp
   b41fa:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b41fe:	4628      	mov	r0, r5
   b4200:	f001 fb94 	bl	b592c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b4204:	b910      	cbnz	r0, b420c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b4206:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b4208:	b005      	add	sp, #20
   b420a:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b420c:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b420e:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b4212:	4628      	mov	r0, r5
   b4214:	f000 fcec 	bl	b4bf0 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b4218:	2101      	movs	r1, #1
   b421a:	4620      	mov	r0, r4
   b421c:	f001 fa30 	bl	b5680 <_ZN9FatVolume4initEh>
   b4220:	4601      	mov	r1, r0
   b4222:	b168      	cbz	r0, b4240 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b4224:	4621      	mov	r1, r4
   b4226:	4628      	mov	r0, r5
   b4228:	f000 fb19 	bl	b485e <_ZN7FatFile8openRootEP9FatVolume>
   b422c:	2800      	cmp	r0, #0
   b422e:	d0ea      	beq.n	b4206 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b4230:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b4234:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4238:	d0e5      	beq.n	b4206 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b423a:	4b05      	ldr	r3, [pc, #20]	; (b4250 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b423c:	601d      	str	r5, [r3, #0]
    return true;
   b423e:	e7e3      	b.n	b4208 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b4240:	4620      	mov	r0, r4
   b4242:	f001 fa1d 	bl	b5680 <_ZN9FatVolume4initEh>
   b4246:	2800      	cmp	r0, #0
   b4248:	d1ec      	bne.n	b4224 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b424a:	e7dc      	b.n	b4206 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b424c:	000b815c 	.word	0x000b815c
   b4250:	2003e678 	.word	0x2003e678

000b4254 <setup>:
// Various timing constants
const unsigned long MAX_TIME_TO_PUBLISH_MS = 20000; // Only stay awake for this time trying to connect to the cloud and publish
const unsigned long TIME_AFTER_PUBLISH_MS = 4000; // After publish, wait 4 seconds for data to go out
const unsigned long SECONDS_BETWEEN_MEASUREMENTS = 360; // What should sampling period be?

void setup(void) {
   b4254:	b508      	push	{r3, lr}
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   b4256:	480a      	ldr	r0, [pc, #40]	; (b4280 <setup+0x2c>)
   b4258:	2300      	movs	r3, #0
   b425a:	4619      	mov	r1, r3
   b425c:	461a      	mov	r2, r3
   b425e:	6840      	ldr	r0, [r0, #4]
   b4260:	f001 ffae 	bl	b61c0 <network_off>
  // Particle.connect();
  Cellular.off(); // turn off cellular for prelim testing (uncomment)

  // delay(5000); // to see response from begin command

  Serial.begin(9600);
   b4264:	f002 feea 	bl	b703c <_Z16_fetch_usbserialv>
   b4268:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b426c:	f002 feda 	bl	b7024 <_ZN9USBSerial5beginEl>
  Serial.println("Maxbotix Test");
   b4270:	f002 fee4 	bl	b703c <_Z16_fetch_usbserialv>

}
   b4274:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println("Maxbotix Test");
   b4278:	4902      	ldr	r1, [pc, #8]	; (b4284 <setup+0x30>)
   b427a:	f002 bb4e 	b.w	b691a <_ZN5Print7printlnEPKc>
   b427e:	bf00      	nop
   b4280:	2003e688 	.word	0x2003e688
   b4284:	000b8034 	.word	0x000b8034

000b4288 <_Z21secondsUntilNextEventv>:
  }
  break;
  }
}

int secondsUntilNextEvent() {
   b4288:	b538      	push	{r3, r4, r5, lr}

  int current_seconds = Time.now();
   b428a:	f002 fe0d 	bl	b6ea8 <_ZN9TimeClass3nowEv>
  int seconds_to_sleep = SECONDS_BETWEEN_MEASUREMENTS - (current_seconds % SECONDS_BETWEEN_MEASUREMENTS);
   b428e:	f44f 74b4 	mov.w	r4, #360	; 0x168
   b4292:	fbb0 f3f4 	udiv	r3, r0, r4
   b4296:	fb03 0014 	mls	r0, r3, r4, r0
   b429a:	1a24      	subs	r4, r4, r0

  Serial.print("Sleeping for ");
   b429c:	f002 fece 	bl	b703c <_Z16_fetch_usbserialv>
   b42a0:	4907      	ldr	r1, [pc, #28]	; (b42c0 <_Z21secondsUntilNextEventv+0x38>)
   b42a2:	f002 fb27 	bl	b68f4 <_ZN5Print5printEPKc>
  Serial.println(seconds_to_sleep);
   b42a6:	f002 fec9 	bl	b703c <_Z16_fetch_usbserialv>
   b42aa:	220a      	movs	r2, #10
   b42ac:	4605      	mov	r5, r0
size_t Print::print(T n, int base)
   b42ae:	4621      	mov	r1, r4
   b42b0:	f7ff ff3f 	bl	b4132 <_ZN5Print5printIlLi0EEEjT_i.part.0.isra.0>
        n += println();
   b42b4:	4628      	mov	r0, r5
   b42b6:	f002 fb24 	bl	b6902 <_ZN5Print7printlnEv>

  return seconds_to_sleep;
   b42ba:	4620      	mov	r0, r4
   b42bc:	bd38      	pop	{r3, r4, r5, pc}
   b42be:	bf00      	nop
   b42c0:	000b8042 	.word	0x000b8042

000b42c4 <loop>:
void loop(void) {
   b42c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (state) {
   b42c8:	4eb9      	ldr	r6, [pc, #740]	; (b45b0 <loop+0x2ec>)
   b42ca:	7835      	ldrb	r5, [r6, #0]
void loop(void) {
   b42cc:	b0b3      	sub	sp, #204	; 0xcc
  switch (state) {
   b42ce:	b12d      	cbz	r5, b42dc <loop+0x18>
   b42d0:	2d01      	cmp	r5, #1
   b42d2:	f000 8112 	beq.w	b44fa <loop+0x236>
}
   b42d6:	b033      	add	sp, #204	; 0xcc
   b42d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b42dc:	4cb5      	ldr	r4, [pc, #724]	; (b45b4 <loop+0x2f0>)
  switch (state) {
   b42de:	4627      	mov	r7, r4
      filterArray[sample] = (analogRead(A1));
   b42e0:	2012      	movs	r0, #18
   b42e2:	f002 ffd5 	bl	b7290 <analogRead>
   b42e6:	ee07 0a90 	vmov	s15, r0
   b42ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      delay(50); // to avoid untrasonic interfering
   b42ee:	2032      	movs	r0, #50	; 0x32
      filterArray[sample] = (analogRead(A1));
   b42f0:	ece7 7a01 	vstmia	r7!, {s15}
    for (int sample = 0; sample < 200; sample++) {
   b42f4:	3501      	adds	r5, #1
      delay(50); // to avoid untrasonic interfering
   b42f6:	f001 ffcb 	bl	b6290 <delay>
    for (int sample = 0; sample < 200; sample++) {
   b42fa:	2dc8      	cmp	r5, #200	; 0xc8
   b42fc:	d1f0      	bne.n	b42e0 <loop+0x1c>
    for (int i = 0; i < 199; i++) {
   b42fe:	2300      	movs	r3, #0
      for (int j = i + 1; j < 200; j++) {
   b4300:	3301      	adds	r3, #1
   b4302:	4620      	mov	r0, r4
   b4304:	3404      	adds	r4, #4
   b4306:	4621      	mov	r1, r4
   b4308:	461a      	mov	r2, r3
        if (filterArray[i] > filterArray[j]) {
   b430a:	edd0 7a00 	vldr	s15, [r0]
   b430e:	ecb1 7a01 	vldmia	r1!, {s14}
   b4312:	eef4 7ac7 	vcmpe.f32	s15, s14
   b4316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      for (int j = i + 1; j < 200; j++) {
   b431a:	f102 0201 	add.w	r2, r2, #1
          filterArray[i] = filterArray[j];
   b431e:	bfc4      	itt	gt
   b4320:	ed80 7a00 	vstrgt	s14, [r0]
          filterArray[j] = swap;
   b4324:	ed41 7a01 	vstrgt	s15, [r1, #-4]
      for (int j = i + 1; j < 200; j++) {
   b4328:	2ac8      	cmp	r2, #200	; 0xc8
   b432a:	d1ee      	bne.n	b430a <loop+0x46>
    for (int i = 0; i < 199; i++) {
   b432c:	2bc7      	cmp	r3, #199	; 0xc7
   b432e:	d1e7      	bne.n	b4300 <loop+0x3c>
   b4330:	f8df 82dc 	ldr.w	r8, [pc, #732]	; b4610 <loop+0x34c>
    for (int sample = 10; sample < 190; sample++) {
   b4334:	270a      	movs	r7, #10
    double sum = 0;
   b4336:	2400      	movs	r4, #0
   b4338:	2500      	movs	r5, #0
      sum += filterArray[sample];
   b433a:	f858 0b04 	ldr.w	r0, [r8], #4
   b433e:	f003 f9e5 	bl	b770c <__aeabi_f2d>
   b4342:	4602      	mov	r2, r0
   b4344:	460b      	mov	r3, r1
   b4346:	4620      	mov	r0, r4
   b4348:	4629      	mov	r1, r5
   b434a:	f003 f881 	bl	b7450 <__adddf3>
    for (int sample = 10; sample < 190; sample++) {
   b434e:	3701      	adds	r7, #1
   b4350:	2fbe      	cmp	r7, #190	; 0xbe
      sum += filterArray[sample];
   b4352:	4604      	mov	r4, r0
   b4354:	460d      	mov	r5, r1
    for (int sample = 10; sample < 190; sample++) {
   b4356:	d1f0      	bne.n	b433a <loop+0x76>
    distance_unconverted = sum / 180;
   b4358:	2200      	movs	r2, #0
   b435a:	4b97      	ldr	r3, [pc, #604]	; (b45b8 <loop+0x2f4>)
    range_cm = (float) distance_unconverted * 0.25; // conversion factor for MB7092 XL-MaxSonar-WRMA1; TODO: check new sensor's datasheet
   b435c:	4d97      	ldr	r5, [pc, #604]	; (b45bc <loop+0x2f8>)
    real_time = Time.now(); // "Real" time and current millis for logging
   b435e:	4f98      	ldr	r7, [pc, #608]	; (b45c0 <loop+0x2fc>)
    millis_now = millis();
   b4360:	f8df 82b0 	ldr.w	r8, [pc, #688]	; b4614 <loop+0x350>
    distance_unconverted = sum / 180;
   b4364:	f003 fb54 	bl	b7a10 <__aeabi_ddiv>
   b4368:	f003 fd20 	bl	b7dac <__aeabi_d2f>
   b436c:	ee07 0a90 	vmov	s15, r0
    range_cm = (float) distance_unconverted * 0.25; // conversion factor for MB7092 XL-MaxSonar-WRMA1; TODO: check new sensor's datasheet
   b4370:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
    distance_unconverted = sum / 180;
   b4374:	4b93      	ldr	r3, [pc, #588]	; (b45c4 <loop+0x300>)
    range_cm = (float) distance_unconverted * 0.25; // conversion factor for MB7092 XL-MaxSonar-WRMA1; TODO: check new sensor's datasheet
   b4376:	ee67 7a87 	vmul.f32	s15, s15, s14
    distance_unconverted = sum / 180;
   b437a:	6018      	str	r0, [r3, #0]
    range_cm = (float) distance_unconverted * 0.25; // conversion factor for MB7092 XL-MaxSonar-WRMA1; TODO: check new sensor's datasheet
   b437c:	edc5 7a00 	vstr	s15, [r5]
    real_time = Time.now(); // "Real" time and current millis for logging
   b4380:	f002 fd92 	bl	b6ea8 <_ZN9TimeClass3nowEv>
   b4384:	6038      	str	r0, [r7, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4386:	f001 fcfb 	bl	b5d80 <HAL_Timer_Get_Milli_Seconds>
    millis_now = millis();
   b438a:	f8c8 0000 	str.w	r0, [r8]
    Serial.print("Time: ");
   b438e:	f002 fe55 	bl	b703c <_Z16_fetch_usbserialv>
   b4392:	498d      	ldr	r1, [pc, #564]	; (b45c8 <loop+0x304>)
   b4394:	f002 faae 	bl	b68f4 <_ZN5Print5printEPKc>
    Serial.print(real_time);
   b4398:	f002 fe50 	bl	b703c <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   b439c:	220a      	movs	r2, #10
   b439e:	6839      	ldr	r1, [r7, #0]
   b43a0:	f7ff fec7 	bl	b4132 <_ZN5Print5printIlLi0EEEjT_i.part.0.isra.0>
    Serial.print(", Distance(cm): ");
   b43a4:	f002 fe4a 	bl	b703c <_Z16_fetch_usbserialv>
   b43a8:	4988      	ldr	r1, [pc, #544]	; (b45cc <loop+0x308>)
   b43aa:	f002 faa3 	bl	b68f4 <_ZN5Print5printEPKc>
    Serial.print(range_cm);
   b43ae:	f002 fe45 	bl	b703c <_Z16_fetch_usbserialv>
   b43b2:	2102      	movs	r1, #2
   b43b4:	ed95 0a00 	vldr	s0, [r5]
   b43b8:	f002 fba0 	bl	b6afc <_ZN5Print5printEfi>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b43bc:	2300      	movs	r3, #0
   b43be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b43c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
  File() {}
   b43c6:	4a82      	ldr	r2, [pc, #520]	; (b45d0 <loop+0x30c>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b43c8:	930b      	str	r3, [sp, #44]	; 0x2c
   b43ca:	9207      	str	r2, [sp, #28]
      dataMode_{dataMode}
   b43cc:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
   b43d0:	4a80      	ldr	r2, [pc, #512]	; (b45d4 <loop+0x310>)
   b43d2:	4b81      	ldr	r3, [pc, #516]	; (b45d8 <loop+0x314>)
   b43d4:	9214      	str	r2, [sp, #80]	; 0x50
   b43d6:	9316      	str	r3, [sp, #88]	; 0x58
    if (!sd.begin(SD_CHIP_SELECT, SPI_FULL_SPEED)) {
   b43d8:	4880      	ldr	r0, [pc, #512]	; (b45dc <loop+0x318>)
   b43da:	2301      	movs	r3, #1
   b43dc:	aa14      	add	r2, sp, #80	; 0x50
   b43de:	2105      	movs	r1, #5
   b43e0:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
   b43e4:	f7ff fef8 	bl	b41d8 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b43e8:	b928      	cbnz	r0, b43f6 <loop+0x132>
      Serial.println("failed to open card");
   b43ea:	f002 fe27 	bl	b703c <_Z16_fetch_usbserialv>
   b43ee:	497c      	ldr	r1, [pc, #496]	; (b45e0 <loop+0x31c>)
      Serial.println("opening test.txt for write failed");
   b43f0:	f002 fa93 	bl	b691a <_ZN5Print7printlnEPKc>
      return;
   b43f4:	e76f      	b.n	b42d6 <loop+0x12>
    return open(m_cwd, path, oflag);
   b43f6:	497b      	ldr	r1, [pc, #492]	; (b45e4 <loop+0x320>)
   b43f8:	4a7b      	ldr	r2, [pc, #492]	; (b45e8 <loop+0x324>)
   b43fa:	6809      	ldr	r1, [r1, #0]
   b43fc:	f244 2302 	movw	r3, #16898	; 0x4202
   b4400:	a80b      	add	r0, sp, #44	; 0x2c
   b4402:	f000 fbfc 	bl	b4bfe <_ZN7FatFile4openEPS_PKci>
    if (!myFile.open("distance.txt", O_RDWR | O_CREAT | O_AT_END)) {
   b4406:	4604      	mov	r4, r0
   b4408:	b918      	cbnz	r0, b4412 <loop+0x14e>
      Serial.println("opening test.txt for write failed");
   b440a:	f002 fe17 	bl	b703c <_Z16_fetch_usbserialv>
   b440e:	4977      	ldr	r1, [pc, #476]	; (b45ec <loop+0x328>)
   b4410:	e7ee      	b.n	b43f0 <loop+0x12c>
   b4412:	220a      	movs	r2, #10
   b4414:	6839      	ldr	r1, [r7, #0]
          Serial.println("max time for publishing reached without success; go to sleep");
   b4416:	f8df b200 	ldr.w	fp, [pc, #512]	; b4618 <loop+0x354>
        Serial.println("Not max time, try again to publish");
   b441a:	f8df 9200 	ldr.w	r9, [pc, #512]	; b461c <loop+0x358>
   b441e:	a807      	add	r0, sp, #28
   b4420:	f7ff fe87 	bl	b4132 <_ZN5Print5printIlLi0EEEjT_i.part.0.isra.0>
    myFile.print(",");
   b4424:	4972      	ldr	r1, [pc, #456]	; (b45f0 <loop+0x32c>)
   b4426:	a807      	add	r0, sp, #28
   b4428:	f002 fa64 	bl	b68f4 <_ZN5Print5printEPKc>
   b442c:	220a      	movs	r2, #10
   b442e:	f8d8 1000 	ldr.w	r1, [r8]
    stateTime = millis();
   b4432:	f8df 81d8 	ldr.w	r8, [pc, #472]	; b460c <loop+0x348>
   b4436:	a807      	add	r0, sp, #28
   b4438:	f7ff fe7b 	bl	b4132 <_ZN5Print5printIlLi0EEEjT_i.part.0.isra.0>
    myFile.print(",");
   b443c:	496c      	ldr	r1, [pc, #432]	; (b45f0 <loop+0x32c>)
   b443e:	a807      	add	r0, sp, #28
   b4440:	f002 fa58 	bl	b68f4 <_ZN5Print5printEPKc>
    myFile.print(range_cm);
   b4444:	ed95 0a00 	vldr	s0, [r5]
   b4448:	2102      	movs	r1, #2
   b444a:	a807      	add	r0, sp, #28
   b444c:	f002 fb56 	bl	b6afc <_ZN5Print5printEfi>
    myFile.close();
   b4450:	a80b      	add	r0, sp, #44	; 0x2c
   b4452:	f000 fbcd 	bl	b4bf0 <_ZN7FatFile5closeEv>
    delay(100);
   b4456:	2064      	movs	r0, #100	; 0x64
   b4458:	f001 ff1a 	bl	b6290 <delay>
   b445c:	f001 fc90 	bl	b5d80 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b4460:	f8c8 0000 	str.w	r0, [r8]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4464:	f001 fe6c 	bl	b6140 <spark_cloud_flag_connected>
      if (Particle.connected()) {
   b4468:	4682      	mov	sl, r0
   b446a:	b348      	cbz	r0, b44c0 <loop+0x1fc>
        float cellVoltage = batteryMonitor.getVCell();
   b446c:	4861      	ldr	r0, [pc, #388]	; (b45f4 <loop+0x330>)
   b446e:	f002 f81f 	bl	b64b0 <_ZN9FuelGauge8getVCellEv>
        float stateOfCharge = batteryMonitor.getSoC();
   b4472:	4860      	ldr	r0, [pc, #384]	; (b45f4 <loop+0x330>)
        float cellVoltage = batteryMonitor.getVCell();
   b4474:	ee10 4a10 	vmov	r4, s0
        float stateOfCharge = batteryMonitor.getSoC();
   b4478:	f002 f836 	bl	b64e8 <_ZN9FuelGauge6getSoCEv>
   b447c:	ee10 0a10 	vmov	r0, s0
        snprintf(data, sizeof(data), "%li,%.5f,%.02f,%.02f", //,%.5f,%.5f,%.5f,%.5f,%.5f,%.02f,%.02f",
   b4480:	f003 f944 	bl	b770c <__aeabi_f2d>
   b4484:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b4488:	4620      	mov	r0, r4
   b448a:	f003 f93f 	bl	b770c <__aeabi_f2d>
   b448e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4492:	6828      	ldr	r0, [r5, #0]
   b4494:	f003 f93a 	bl	b770c <__aeabi_f2d>
   b4498:	e9cd 0100 	strd	r0, r1, [sp]
   b449c:	683b      	ldr	r3, [r7, #0]
   b449e:	4a56      	ldr	r2, [pc, #344]	; (b45f8 <loop+0x334>)
   b44a0:	2178      	movs	r1, #120	; 0x78
   b44a2:	a814      	add	r0, sp, #80	; 0x50
   b44a4:	f001 fed4 	bl	b6250 <snprintf>
        Serial.println("publishing data");
   b44a8:	f002 fdc8 	bl	b703c <_Z16_fetch_usbserialv>
   b44ac:	4953      	ldr	r1, [pc, #332]	; (b45fc <loop+0x338>)
   b44ae:	f002 fa34 	bl	b691a <_ZN5Print7printlnEPKc>
        delay(TIME_AFTER_PUBLISH_MS);
   b44b2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   b44b6:	f001 feeb 	bl	b6290 <delay>
        state = SLEEP_STATE;
   b44ba:	2301      	movs	r3, #1
   b44bc:	7033      	strb	r3, [r6, #0]
    while (!isMaxTime) {
   b44be:	e70a      	b.n	b42d6 <loop+0x12>
   b44c0:	f001 fc5e 	bl	b5d80 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - stateTime >= MAX_TIME_TO_PUBLISH_MS) {
   b44c4:	f8d8 2000 	ldr.w	r2, [r8]
   b44c8:	f644 631f 	movw	r3, #19999	; 0x4e1f
   b44cc:	1a80      	subs	r0, r0, r2
   b44ce:	4298      	cmp	r0, r3
   b44d0:	d907      	bls.n	b44e2 <loop+0x21e>
          state = SLEEP_STATE;
   b44d2:	2301      	movs	r3, #1
   b44d4:	7033      	strb	r3, [r6, #0]
          Serial.println("max time for publishing reached without success; go to sleep");
   b44d6:	f002 fdb1 	bl	b703c <_Z16_fetch_usbserialv>
   b44da:	4659      	mov	r1, fp
   b44dc:	f002 fa1d 	bl	b691a <_ZN5Print7printlnEPKc>
          isMaxTime = true;
   b44e0:	46a2      	mov	sl, r4
        Serial.println("Not max time, try again to publish");
   b44e2:	f002 fdab 	bl	b703c <_Z16_fetch_usbserialv>
   b44e6:	4649      	mov	r1, r9
   b44e8:	f002 fa17 	bl	b691a <_ZN5Print7printlnEPKc>
        delay(100);
   b44ec:	2064      	movs	r0, #100	; 0x64
   b44ee:	f001 fecf 	bl	b6290 <delay>
    while (!isMaxTime) {
   b44f2:	f1ba 0f00 	cmp.w	sl, #0
   b44f6:	d0b5      	beq.n	b4464 <loop+0x1a0>
   b44f8:	e6ed      	b.n	b42d6 <loop+0x12>
    Serial.println("going to sleep");
   b44fa:	f002 fd9f 	bl	b703c <_Z16_fetch_usbserialv>
   b44fe:	4940      	ldr	r1, [pc, #256]	; (b4600 <loop+0x33c>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b4500:	4c40      	ldr	r4, [pc, #256]	; (b4604 <loop+0x340>)
   b4502:	f002 fa0a 	bl	b691a <_ZN5Print7printlnEPKc>
    delay(500);
   b4506:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b450a:	f001 fec1 	bl	b6290 <delay>
    int wakeInSeconds = secondsUntilNextEvent(); // Calculate how long to sleep 
   b450e:	f7ff febb 	bl	b4288 <_Z21secondsUntilNextEventv>
   b4512:	7d23      	ldrb	r3, [r4, #20]
   b4514:	4680      	mov	r8, r0
   b4516:	b1eb      	cbz	r3, b4554 <loop+0x290>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b4518:	2302      	movs	r3, #2
   b451a:	7223      	strb	r3, [r4, #8]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b451c:	6823      	ldr	r3, [r4, #0]
   b451e:	68d9      	ldr	r1, [r3, #12]
   b4520:	4628      	mov	r0, r5
   b4522:	f7ff fe19 	bl	b4158 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0>
   b4526:	4605      	mov	r5, r0

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
        if (valid_) {
            // Check if this pin has been featured.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO);
            while (wakeup) {
   b4528:	2800      	cmp	r0, #0
   b452a:	d079      	beq.n	b4620 <loop+0x35c>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
   b452c:	8983      	ldrh	r3, [r0, #12]
   b452e:	2b02      	cmp	r3, #2
   b4530:	d13b      	bne.n	b45aa <loop+0x2e6>
                    gpioWakeup->mode = mode;
   b4532:	7383      	strb	r3, [r0, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b4534:	7d23      	ldrb	r3, [r4, #20]
   b4536:	b16b      	cbz	r3, b4554 <loop+0x290>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4538:	6823      	ldr	r3, [r4, #0]
      .duration(wakeInSeconds* 1000L) // Set seconds until wake
   b453a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b453e:	68d9      	ldr	r1, [r3, #12]
   b4540:	fb00 f808 	mul.w	r8, r0, r8
   b4544:	2004      	movs	r0, #4
   b4546:	f7ff fe07 	bl	b4158 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0>
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
            if (wakeup) {
   b454a:	4607      	mov	r7, r0
   b454c:	2800      	cmp	r0, #0
   b454e:	d07d      	beq.n	b464c <loop+0x388>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b4550:	f8c0 800c 	str.w	r8, [r0, #12]
        }
        return *this;
    }

    SystemSleepConfiguration& network(network_interface_t netif, EnumFlags<SystemSleepNetworkFlag> flags = SystemSleepNetworkFlag::NONE) {
        if (valid_) {
   b4554:	7d23      	ldrb	r3, [r4, #20]
   b4556:	b193      	cbz	r3, b457e <loop+0x2ba>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4558:	6823      	ldr	r3, [r4, #0]
   b455a:	68d9      	ldr	r1, [r3, #12]
   b455c:	200e      	movs	r0, #14
   b455e:	f7ff fdfb 	bl	b4158 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0>
   b4562:	4605      	mov	r5, r0
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK);
            while (wakeup) {
   b4564:	2800      	cmp	r0, #0
   b4566:	f000 8086 	beq.w	b4676 <loop+0x3b2>
                auto networkWakeup = reinterpret_cast<hal_wakeup_source_network_t*>(wakeup);
                if (networkWakeup->index == netif) {
   b456a:	7b03      	ldrb	r3, [r0, #12]
   b456c:	2b04      	cmp	r3, #4
   b456e:	f040 8080 	bne.w	b4672 <loop+0x3ae>
                    if (networkWakeup->flags != flags.value()) {
   b4572:	89c3      	ldrh	r3, [r0, #14]
   b4574:	2b01      	cmp	r3, #1
   b4576:	d002      	beq.n	b457e <loop+0x2ba>
                        networkWakeup->flags |= flags.value();
   b4578:	f043 0301 	orr.w	r3, r3, #1
   b457c:	81c3      	strh	r3, [r0, #14]
    SystemSleepResult result = System.sleep(config); // Device sleeps here
   b457e:	4921      	ldr	r1, [pc, #132]	; (b4604 <loop+0x340>)
   b4580:	a814      	add	r0, sp, #80	; 0x50
   b4582:	f002 fbf5 	bl	b6d70 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    Serial.print("Feeling restless");
   b4586:	f002 fd59 	bl	b703c <_Z16_fetch_usbserialv>
   b458a:	491f      	ldr	r1, [pc, #124]	; (b4608 <loop+0x344>)
   b458c:	f002 f9b2 	bl	b68f4 <_ZN5Print5printEPKc>
   b4590:	f001 fbf6 	bl	b5d80 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b4594:	4b1d      	ldr	r3, [pc, #116]	; (b460c <loop+0x348>)
   b4596:	6018      	str	r0, [r3, #0]
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   b4598:	9814      	ldr	r0, [sp, #80]	; 0x50
    state = PUBLISH_STATE;
   b459a:	2300      	movs	r3, #0
   b459c:	7033      	strb	r3, [r6, #0]
   b459e:	2800      	cmp	r0, #0
   b45a0:	f43f ae99 	beq.w	b42d6 <loop+0x12>
            free(wakeupSource_);
   b45a4:	f001 fe4c 	bl	b6240 <free>
  break;
   b45a8:	e695      	b.n	b42d6 <loop+0x12>
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b45aa:	6881      	ldr	r1, [r0, #8]
   b45ac:	2001      	movs	r0, #1
   b45ae:	e7b8      	b.n	b4522 <loop+0x25e>
   b45b0:	2003e66c 	.word	0x2003e66c
   b45b4:	2003debc 	.word	0x2003debc
   b45b8:	40668000 	.word	0x40668000
   b45bc:	2003e1e0 	.word	0x2003e1e0
   b45c0:	2003e1e4 	.word	0x2003e1e4
   b45c4:	2003deb8 	.word	0x2003deb8
   b45c8:	000b8050 	.word	0x000b8050
   b45cc:	000b8057 	.word	0x000b8057
   b45d0:	000b8170 	.word	0x000b8170
   b45d4:	000b815c 	.word	0x000b815c
   b45d8:	02faf080 	.word	0x02faf080
   b45dc:	2003e1e8 	.word	0x2003e1e8
   b45e0:	000b8068 	.word	0x000b8068
   b45e4:	2003e678 	.word	0x2003e678
   b45e8:	000b807c 	.word	0x000b807c
   b45ec:	000b8089 	.word	0x000b8089
   b45f0:	000b80ab 	.word	0x000b80ab
   b45f4:	2003de98 	.word	0x2003de98
   b45f8:	000b80ad 	.word	0x000b80ad
   b45fc:	000b80c2 	.word	0x000b80c2
   b4600:	000b8132 	.word	0x000b8132
   b4604:	2003dea0 	.word	0x2003dea0
   b4608:	000b8141 	.word	0x000b8141
   b460c:	2003e670 	.word	0x2003e670
   b4610:	2003dee4 	.word	0x2003dee4
   b4614:	2003e1dc 	.word	0x2003e1dc
   b4618:	000b80d2 	.word	0x000b80d2
   b461c:	000b810f 	.word	0x000b810f
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4620:	4922      	ldr	r1, [pc, #136]	; (b46ac <loop+0x3e8>)
   b4622:	2010      	movs	r0, #16
   b4624:	f002 ff0a 	bl	b743c <_ZnwjRKSt9nothrow_t>
   b4628:	4607      	mov	r7, r0
   b462a:	2800      	cmp	r0, #0
   b462c:	d03b      	beq.n	b46a6 <loop+0x3e2>
   b462e:	2210      	movs	r2, #16
   b4630:	4629      	mov	r1, r5
   b4632:	f003 fc2f 	bl	b7e94 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b4636:	4b1e      	ldr	r3, [pc, #120]	; (b46b0 <loop+0x3ec>)
   b4638:	603b      	str	r3, [r7, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b463a:	2301      	movs	r3, #1
   b463c:	80bb      	strh	r3, [r7, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b463e:	6923      	ldr	r3, [r4, #16]
   b4640:	60bb      	str	r3, [r7, #8]
            wakeupSource->pin = pin;
   b4642:	2302      	movs	r3, #2
   b4644:	81bb      	strh	r3, [r7, #12]
            wakeupSource->mode = mode;
   b4646:	73bb      	strb	r3, [r7, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4648:	6127      	str	r7, [r4, #16]
   b464a:	e773      	b.n	b4534 <loop+0x270>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b464c:	4917      	ldr	r1, [pc, #92]	; (b46ac <loop+0x3e8>)
   b464e:	2010      	movs	r0, #16
   b4650:	f002 fef4 	bl	b743c <_ZnwjRKSt9nothrow_t>
   b4654:	4605      	mov	r5, r0
   b4656:	b330      	cbz	r0, b46a6 <loop+0x3e2>
   b4658:	2210      	movs	r2, #16
   b465a:	4639      	mov	r1, r7
   b465c:	f003 fc1a 	bl	b7e94 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b4660:	4b13      	ldr	r3, [pc, #76]	; (b46b0 <loop+0x3ec>)
   b4662:	602b      	str	r3, [r5, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b4664:	2304      	movs	r3, #4
   b4666:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4668:	6923      	ldr	r3, [r4, #16]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b466a:	6125      	str	r5, [r4, #16]
            wakeupSource->ms = ms;
   b466c:	e9c5 3802 	strd	r3, r8, [r5, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4670:	e770      	b.n	b4554 <loop+0x290>
                    }
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK, wakeup->next);
   b4672:	6881      	ldr	r1, [r0, #8]
   b4674:	e772      	b.n	b455c <loop+0x298>
            }
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_network_t();
   b4676:	490d      	ldr	r1, [pc, #52]	; (b46ac <loop+0x3e8>)
   b4678:	2014      	movs	r0, #20
   b467a:	f002 fedf 	bl	b743c <_ZnwjRKSt9nothrow_t>
   b467e:	4607      	mov	r7, r0
   b4680:	b178      	cbz	r0, b46a2 <loop+0x3de>
   b4682:	2214      	movs	r2, #20
   b4684:	4629      	mov	r1, r5
   b4686:	f003 fc05 	bl	b7e94 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b468a:	4b09      	ldr	r3, [pc, #36]	; (b46b0 <loop+0x3ec>)
   b468c:	603b      	str	r3, [r7, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_NETWORK;
   b468e:	230e      	movs	r3, #14
   b4690:	80bb      	strh	r3, [r7, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4692:	6923      	ldr	r3, [r4, #16]
   b4694:	60bb      	str	r3, [r7, #8]
            wakeupSource->index = static_cast<network_interface_index>(netif);
   b4696:	2304      	movs	r3, #4
   b4698:	733b      	strb	r3, [r7, #12]
            wakeupSource->flags = flags.value();
   b469a:	2301      	movs	r3, #1
   b469c:	81fb      	strh	r3, [r7, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b469e:	6127      	str	r7, [r4, #16]
   b46a0:	e76d      	b.n	b457e <loop+0x2ba>
                valid_ = false;
   b46a2:	7525      	strb	r5, [r4, #20]
                return *this;
   b46a4:	e76b      	b.n	b457e <loop+0x2ba>
                valid_ = false;
   b46a6:	7525      	strb	r5, [r4, #20]
                return *this;
   b46a8:	e754      	b.n	b4554 <loop+0x290>
   b46aa:	bf00      	nop
   b46ac:	000b8344 	.word	0x000b8344
   b46b0:	00030010 	.word	0x00030010

000b46b4 <_GLOBAL__sub_I_sd>:
   b46b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SdFat() {
   b46b6:	4c23      	ldr	r4, [pc, #140]	; (b4744 <_GLOBAL__sub_I_sd+0x90>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b46b8:	4d23      	ldr	r5, [pc, #140]	; (b4748 <_GLOBAL__sub_I_sd+0x94>)
   b46ba:	2264      	movs	r2, #100	; 0x64
   b46bc:	f8c4 2460 	str.w	r2, [r4, #1120]	; 0x460
  {
   b46c0:	4a22      	ldr	r2, [pc, #136]	; (b474c <_GLOBAL__sub_I_sd+0x98>)
   b46c2:	f8c4 2470 	str.w	r2, [r4, #1136]	; 0x470
   b46c6:	2300      	movs	r3, #0
   b46c8:	2201      	movs	r2, #1
   b46ca:	6063      	str	r3, [r4, #4]
   b46cc:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
   b46d0:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
   b46d4:	f884 2474 	strb.w	r2, [r4, #1140]	; 0x474
   b46d8:	f8c4 3478 	str.w	r3, [r4, #1144]	; 0x478
   b46dc:	f8a4 347c 	strh.w	r3, [r4, #1148]	; 0x47c
   b46e0:	7829      	ldrb	r1, [r5, #0]
   b46e2:	f3bf 8f5b 	dmb	ish
   b46e6:	4011      	ands	r1, r2
   b46e8:	d10b      	bne.n	b4702 <_GLOBAL__sub_I_sd+0x4e>
   b46ea:	4628      	mov	r0, r5
   b46ec:	9101      	str	r1, [sp, #4]
   b46ee:	f7ff fcd6 	bl	b409e <__cxa_guard_acquire>
   b46f2:	9901      	ldr	r1, [sp, #4]
   b46f4:	b128      	cbz	r0, b4702 <_GLOBAL__sub_I_sd+0x4e>
   b46f6:	4816      	ldr	r0, [pc, #88]	; (b4750 <_GLOBAL__sub_I_sd+0x9c>)
   b46f8:	f002 fa4c 	bl	b6b94 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b46fc:	4628      	mov	r0, r5
   b46fe:	f7ff fcd3 	bl	b40a8 <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b4702:	4b13      	ldr	r3, [pc, #76]	; (b4750 <_GLOBAL__sub_I_sd+0x9c>)
   b4704:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
              error_(SYSTEM_ERROR_NONE) {
   b4708:	4b12      	ldr	r3, [pc, #72]	; (b4754 <_GLOBAL__sub_I_sd+0xa0>)
    SleepResult() {}
   b470a:	4a13      	ldr	r2, [pc, #76]	; (b4758 <_GLOBAL__sub_I_sd+0xa4>)
   b470c:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b470e:	2400      	movs	r4, #0
   b4710:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4714:	2002      	movs	r0, #2
   b4716:	f001 fcc3 	bl	b60a0 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b471a:	4621      	mov	r1, r4
   b471c:	2001      	movs	r0, #1
   b471e:	f001 fccf 	bl	b60c0 <system_thread_set_state>
FuelGauge batteryMonitor;
   b4722:	4621      	mov	r1, r4
   b4724:	480d      	ldr	r0, [pc, #52]	; (b475c <_GLOBAL__sub_I_sd+0xa8>)
   b4726:	f001 fe77 	bl	b6418 <_ZN9FuelGaugeC1Eb>
        : config_(config) {
   b472a:	4b0d      	ldr	r3, [pc, #52]	; (b4760 <_GLOBAL__sub_I_sd+0xac>)
   b472c:	1d1a      	adds	r2, r3, #4
   b472e:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b4730:	4a0c      	ldr	r2, [pc, #48]	; (b4764 <_GLOBAL__sub_I_sd+0xb0>)
   b4732:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4734:	2201      	movs	r2, #1
   b4736:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b473a:	611c      	str	r4, [r3, #16]
   b473c:	751a      	strb	r2, [r3, #20]
   b473e:	b003      	add	sp, #12
   b4740:	bd30      	pop	{r4, r5, pc}
   b4742:	bf00      	nop
   b4744:	2003e1e8 	.word	0x2003e1e8
   b4748:	2003de80 	.word	0x2003de80
   b474c:	000b815c 	.word	0x000b815c
   b4750:	2003de84 	.word	0x2003de84
   b4754:	2003de8c 	.word	0x2003de8c
   b4758:	ffff0000 	.word	0xffff0000
   b475c:	2003de98 	.word	0x2003de98
   b4760:	2003dea0 	.word	0x2003dea0
   b4764:	00030010 	.word	0x00030010

000b4768 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b4768:	b538      	push	{r3, r4, r5, lr}
   b476a:	4604      	mov	r4, r0
   b476c:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b476e:	2224      	movs	r2, #36	; 0x24
   b4770:	2100      	movs	r1, #0
   b4772:	f003 fb8f 	bl	b7e94 <memset>

  m_vol = vol;
   b4776:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b4778:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b477a:	2b10      	cmp	r3, #16
   b477c:	d003      	beq.n	b4786 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b477e:	2b20      	cmp	r3, #32
   b4780:	d006      	beq.n	b4790 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b4782:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b4784:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b4786:	2320      	movs	r3, #32
  m_flags = F_READ;
   b4788:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b478a:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b478c:	70a0      	strb	r0, [r4, #2]
  return true;
   b478e:	e7f9      	b.n	b4784 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b4790:	2340      	movs	r3, #64	; 0x40
   b4792:	e7f9      	b.n	b4788 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b4794 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b4794:	b510      	push	{r4, lr}
   b4796:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b4798:	3024      	adds	r0, #36	; 0x24
   b479a:	f000 fe63 	bl	b5464 <_ZN8FatCache4syncEv>
   b479e:	b128      	cbz	r0, b47ac <_ZN9FatVolume9cacheSyncEv+0x18>
   b47a0:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b47a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b47a8:	f000 be5c 	b.w	b5464 <_ZN8FatCache4syncEv>
  }
   b47ac:	bd10      	pop	{r4, pc}

000b47ae <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b47ae:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b47b0:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b47b2:	f043 0304 	orr.w	r3, r3, #4
   b47b6:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b47b8:	f100 0210 	add.w	r2, r0, #16
   b47bc:	6880      	ldr	r0, [r0, #8]
   b47be:	f000 bf07 	b.w	b55d0 <_ZN9FatVolume15allocateClusterEmPm>
	...

000b47c4 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b47c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b47c8:	7801      	ldrb	r1, [r0, #0]
   b47ca:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b47ce:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b47d0:	d003      	beq.n	b47da <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b47d2:	2600      	movs	r6, #0
}
   b47d4:	4630      	mov	r0, r6
   b47d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b47da:	6942      	ldr	r2, [r0, #20]
   b47dc:	4b17      	ldr	r3, [pc, #92]	; (b483c <_ZN7FatFile13addDirClusterEv+0x78>)
   b47de:	429a      	cmp	r2, r3
   b47e0:	d2f7      	bcs.n	b47d2 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b47e2:	f7ff ffe4 	bl	b47ae <_ZN7FatFile10addClusterEv>
   b47e6:	4606      	mov	r6, r0
   b47e8:	2800      	cmp	r0, #0
   b47ea:	d0f2      	beq.n	b47d2 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b47ec:	6921      	ldr	r1, [r4, #16]
   b47ee:	68a0      	ldr	r0, [r4, #8]
   b47f0:	f000 fe83 	bl	b54fa <_ZNK9FatVolume17clusterFirstBlockEm>
   b47f4:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b47f6:	68a0      	ldr	r0, [r4, #8]
   b47f8:	2205      	movs	r2, #5
   b47fa:	4639      	mov	r1, r7
   b47fc:	3024      	adds	r0, #36	; 0x24
   b47fe:	f000 fe59 	bl	b54b4 <_ZN8FatCache4readEmh>
  if (!pc) {
   b4802:	4680      	mov	r8, r0
   b4804:	2800      	cmp	r0, #0
   b4806:	d0e4      	beq.n	b47d2 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b4808:	4629      	mov	r1, r5
   b480a:	f44f 7200 	mov.w	r2, #512	; 0x200
   b480e:	f003 fb41 	bl	b7e94 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b4812:	2501      	movs	r5, #1
   b4814:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b4816:	791a      	ldrb	r2, [r3, #4]
   b4818:	42aa      	cmp	r2, r5
   b481a:	d909      	bls.n	b4830 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b481c:	6818      	ldr	r0, [r3, #0]
   b481e:	4642      	mov	r2, r8
   b4820:	19e9      	adds	r1, r5, r7
   b4822:	f001 f9b4 	bl	b5b8e <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b4826:	2800      	cmp	r0, #0
   b4828:	d0d3      	beq.n	b47d2 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b482a:	3501      	adds	r5, #1
   b482c:	b2ed      	uxtb	r5, r5
   b482e:	e7f1      	b.n	b4814 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b4830:	6963      	ldr	r3, [r4, #20]
   b4832:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b4836:	6163      	str	r3, [r4, #20]
  return true;
   b4838:	e7cc      	b.n	b47d4 <_ZN7FatFile13addDirClusterEv+0x10>
   b483a:	bf00      	nop
   b483c:	001ffe00 	.word	0x001ffe00

000b4840 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b4840:	b510      	push	{r4, lr}
   b4842:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b4844:	6880      	ldr	r0, [r0, #8]
   b4846:	460a      	mov	r2, r1
   b4848:	3024      	adds	r0, #36	; 0x24
   b484a:	69a1      	ldr	r1, [r4, #24]
   b484c:	f000 fe32 	bl	b54b4 <_ZN8FatCache4readEmh>
  if (!pc) {
   b4850:	b120      	cbz	r0, b485c <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b4852:	88a3      	ldrh	r3, [r4, #4]
   b4854:	f003 030f 	and.w	r3, r3, #15
   b4858:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b485c:	bd10      	pop	{r4, pc}

000b485e <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b485e:	7803      	ldrb	r3, [r0, #0]
   b4860:	b90b      	cbnz	r3, b4866 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b4862:	f7ff bf81 	b.w	b4768 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b4866:	2000      	movs	r0, #0
   b4868:	4770      	bx	lr

000b486a <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b486a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b486e:	7803      	ldrb	r3, [r0, #0]
   b4870:	4604      	mov	r4, r0
   b4872:	4688      	mov	r8, r1
   b4874:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b4876:	2b00      	cmp	r3, #0
   b4878:	d05d      	beq.n	b4936 <_ZN7FatFile4readEPvj+0xcc>
   b487a:	7882      	ldrb	r2, [r0, #2]
   b487c:	07d1      	lsls	r1, r2, #31
   b487e:	d55a      	bpl.n	b4936 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b4880:	071a      	lsls	r2, r3, #28
   b4882:	d52d      	bpl.n	b48e0 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b4884:	69c3      	ldr	r3, [r0, #28]
   b4886:	6942      	ldr	r2, [r0, #20]
   b4888:	1a9b      	subs	r3, r3, r2
   b488a:	429d      	cmp	r5, r3
   b488c:	bf28      	it	cs
   b488e:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b4890:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b4892:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b4896:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b489a:	2e00      	cmp	r6, #0
   b489c:	f000 808f 	beq.w	b49be <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b48a0:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b48a2:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b48a4:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b48a6:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b48a8:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b48ac:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b48b0:	d51f      	bpl.n	b48f2 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b48b2:	6a00      	ldr	r0, [r0, #32]
   b48b4:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b48b6:	68a0      	ldr	r0, [r4, #8]
   b48b8:	f1ba 0f00 	cmp.w	sl, #0
   b48bc:	d142      	bne.n	b4944 <_ZN7FatFile4readEPvj+0xda>
   b48be:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b48c2:	d33f      	bcc.n	b4944 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b48c4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b48c6:	4299      	cmp	r1, r3
   b48c8:	d03c      	beq.n	b4944 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b48ca:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b48ce:	d252      	bcs.n	b4976 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b48d0:	6800      	ldr	r0, [r0, #0]
   b48d2:	4642      	mov	r2, r8
   b48d4:	f001 f8d2 	bl	b5a7c <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b48d8:	b368      	cbz	r0, b4936 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b48da:	f44f 7700 	mov.w	r7, #512	; 0x200
   b48de:	e044      	b.n	b496a <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b48e0:	069b      	lsls	r3, r3, #26
   b48e2:	d5d5      	bpl.n	b4890 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b48e4:	6883      	ldr	r3, [r0, #8]
   b48e6:	891a      	ldrh	r2, [r3, #8]
   b48e8:	6943      	ldr	r3, [r0, #20]
   b48ea:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b48ee:	b29b      	uxth	r3, r3
   b48f0:	e7cb      	b.n	b488a <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b48f2:	f890 9005 	ldrb.w	r9, [r0, #5]
   b48f6:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b48fa:	f1ba 0f00 	cmp.w	sl, #0
   b48fe:	d108      	bne.n	b4912 <_ZN7FatFile4readEPvj+0xa8>
   b4900:	f1b9 0f00 	cmp.w	r9, #0
   b4904:	d105      	bne.n	b4912 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b4906:	b95b      	cbnz	r3, b4920 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b4908:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b490a:	bf4c      	ite	mi
   b490c:	6a03      	ldrmi	r3, [r0, #32]
   b490e:	6a23      	ldrpl	r3, [r4, #32]
   b4910:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b4912:	6921      	ldr	r1, [r4, #16]
   b4914:	68a0      	ldr	r0, [r4, #8]
   b4916:	f000 fdf0 	bl	b54fa <_ZNK9FatVolume17clusterFirstBlockEm>
   b491a:	eb09 0100 	add.w	r1, r9, r0
   b491e:	e7ca      	b.n	b48b6 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b4920:	6921      	ldr	r1, [r4, #16]
   b4922:	465a      	mov	r2, fp
   b4924:	f000 fdef 	bl	b5506 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b4928:	2800      	cmp	r0, #0
   b492a:	db04      	blt.n	b4936 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b492c:	d1f1      	bne.n	b4912 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b492e:	7823      	ldrb	r3, [r4, #0]
   b4930:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4934:	d143      	bne.n	b49be <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b4936:	7863      	ldrb	r3, [r4, #1]
   b4938:	f043 0302 	orr.w	r3, r3, #2
   b493c:	7063      	strb	r3, [r4, #1]
  return -1;
   b493e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4942:	e03d      	b.n	b49c0 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b4944:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b4948:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b494a:	f04f 0200 	mov.w	r2, #0
   b494e:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b4952:	bf28      	it	cs
   b4954:	4637      	movcs	r7, r6
   b4956:	f000 fdad 	bl	b54b4 <_ZN8FatCache4readEmh>
      if (!pc) {
   b495a:	2800      	cmp	r0, #0
   b495c:	d0eb      	beq.n	b4936 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b495e:	eb00 010a 	add.w	r1, r0, sl
   b4962:	463a      	mov	r2, r7
   b4964:	4640      	mov	r0, r8
   b4966:	f003 fa87 	bl	b7e78 <memcpy>
    m_curPosition += n;
   b496a:	6963      	ldr	r3, [r4, #20]
   b496c:	443b      	add	r3, r7
    dst += n;
   b496e:	44b8      	add	r8, r7
    m_curPosition += n;
   b4970:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b4972:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b4974:	e791      	b.n	b489a <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b4976:	7822      	ldrb	r2, [r4, #0]
   b4978:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b497a:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b497e:	d406      	bmi.n	b498e <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b4980:	7902      	ldrb	r2, [r0, #4]
   b4982:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b4986:	b2d2      	uxtb	r2, r2
   b4988:	4592      	cmp	sl, r2
   b498a:	bf28      	it	cs
   b498c:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b498e:	4299      	cmp	r1, r3
      n = 512*nb;
   b4990:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b4994:	d208      	bcs.n	b49a8 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b4996:	68a0      	ldr	r0, [r4, #8]
   b4998:	4653      	mov	r3, sl
   b499a:	6800      	ldr	r0, [r0, #0]
   b499c:	4642      	mov	r2, r8
   b499e:	f001 f8b5 	bl	b5b0c <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b49a2:	2800      	cmp	r0, #0
   b49a4:	d1e1      	bne.n	b496a <_ZN7FatFile4readEPvj+0x100>
   b49a6:	e7c6      	b.n	b4936 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b49a8:	4453      	add	r3, sl
   b49aa:	428b      	cmp	r3, r1
   b49ac:	d9f3      	bls.n	b4996 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b49ae:	3024      	adds	r0, #36	; 0x24
   b49b0:	9101      	str	r1, [sp, #4]
   b49b2:	f000 fd57 	bl	b5464 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b49b6:	9901      	ldr	r1, [sp, #4]
   b49b8:	2800      	cmp	r0, #0
   b49ba:	d1ec      	bne.n	b4996 <_ZN7FatFile4readEPvj+0x12c>
   b49bc:	e7bb      	b.n	b4936 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b49be:	1ba8      	subs	r0, r5, r6
}
   b49c0:	b003      	add	sp, #12
   b49c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b49c6 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b49c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b49c8:	2201      	movs	r2, #1
   b49ca:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b49ce:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b49d2:	4604      	mov	r4, r0
   b49d4:	f7ff ff49 	bl	b486a <_ZN7FatFile4readEPvj>
   b49d8:	2801      	cmp	r0, #1
   b49da:	bf0a      	itet	eq
   b49dc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b49e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b49e4:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b49e8:	b002      	add	sp, #8
   b49ea:	bd70      	pop	{r4, r5, r6, pc}

000b49ec <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b49ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b49ee:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b49f0:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b49f4:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b49f6:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b49fa:	d000      	beq.n	b49fe <_ZN7FatFile12readDirCacheEb+0x12>
   b49fc:	b999      	cbnz	r1, b4a26 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b49fe:	2201      	movs	r2, #1
   b4a00:	f10d 0107 	add.w	r1, sp, #7
   b4a04:	4620      	mov	r0, r4
   b4a06:	f7ff ff30 	bl	b486a <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b4a0a:	b240      	sxtb	r0, r0
   b4a0c:	2801      	cmp	r0, #1
   b4a0e:	d002      	beq.n	b4a16 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b4a10:	2000      	movs	r0, #0
}
   b4a12:	b003      	add	sp, #12
   b4a14:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b4a16:	6963      	ldr	r3, [r4, #20]
   b4a18:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b4a1a:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b4a1c:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b4a1e:	3030      	adds	r0, #48	; 0x30
   b4a20:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b4a24:	e7f5      	b.n	b4a12 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b4a26:	3320      	adds	r3, #32
   b4a28:	e7f7      	b.n	b4a1a <_ZN7FatFile12readDirCacheEb+0x2e>

000b4a2a <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b4a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b4a2e:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b4a30:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b4a32:	4604      	mov	r4, r0
   b4a34:	460d      	mov	r5, r1
  if (!isOpen()) {
   b4a36:	b162      	cbz	r2, b4a52 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b4a38:	6940      	ldr	r0, [r0, #20]
   b4a3a:	4288      	cmp	r0, r1
   b4a3c:	d002      	beq.n	b4a44 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b4a3e:	b919      	cbnz	r1, b4a48 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b4a40:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b4a42:	6165      	str	r5, [r4, #20]
    return true;
   b4a44:	2001      	movs	r0, #1
   b4a46:	e006      	b.n	b4a56 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b4a48:	0716      	lsls	r6, r2, #28
   b4a4a:	d506      	bpl.n	b4a5a <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b4a4c:	69e3      	ldr	r3, [r4, #28]
   b4a4e:	428b      	cmp	r3, r1
   b4a50:	d20b      	bcs.n	b4a6a <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b4a52:	6127      	str	r7, [r4, #16]
  return false;
   b4a54:	2000      	movs	r0, #0
}
   b4a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b4a5a:	0691      	lsls	r1, r2, #26
   b4a5c:	d505      	bpl.n	b4a6a <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b4a5e:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b4a60:	891b      	ldrh	r3, [r3, #8]
   b4a62:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b4a66:	d9ec      	bls.n	b4a42 <_ZN7FatFile7seekSetEm+0x18>
   b4a68:	e7f3      	b.n	b4a52 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b4a6a:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b4a6e:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b4a72:	1e43      	subs	r3, r0, #1
   b4a74:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b4a78:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b4a7a:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b4a7c:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b4a7e:	42b3      	cmp	r3, r6
   b4a80:	d800      	bhi.n	b4a84 <_ZN7FatFile7seekSetEm+0x5a>
   b4a82:	b998      	cbnz	r0, b4aac <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b4a84:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b4a86:	bf4c      	ite	mi
   b4a88:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b4a8c:	6a23      	ldrpl	r3, [r4, #32]
   b4a8e:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b4a90:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b4a94:	2e00      	cmp	r6, #0
   b4a96:	d0d4      	beq.n	b4a42 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b4a98:	6921      	ldr	r1, [r4, #16]
   b4a9a:	68a0      	ldr	r0, [r4, #8]
   b4a9c:	4642      	mov	r2, r8
   b4a9e:	f000 fd32 	bl	b5506 <_ZN9FatVolume6fatGetEmPm>
   b4aa2:	2800      	cmp	r0, #0
   b4aa4:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b4aa8:	dcf4      	bgt.n	b4a94 <_ZN7FatFile7seekSetEm+0x6a>
   b4aaa:	e7d2      	b.n	b4a52 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b4aac:	1af6      	subs	r6, r6, r3
   b4aae:	e7ef      	b.n	b4a90 <_ZN7FatFile7seekSetEm+0x66>

000b4ab0 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b4ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4ab2:	460f      	mov	r7, r1
   b4ab4:	4604      	mov	r4, r0
   b4ab6:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b4ab8:	2100      	movs	r1, #0
   b4aba:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b4abc:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b4abe:	f003 f9e9 	bl	b7e94 <memset>
  m_vol = dirFile->m_vol;
   b4ac2:	68b8      	ldr	r0, [r7, #8]
   b4ac4:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b4ac6:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b4ac8:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b4acc:	6a3b      	ldr	r3, [r7, #32]
   b4ace:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b4ad0:	016a      	lsls	r2, r5, #5
   b4ad2:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b4ad6:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b4ada:	071f      	lsls	r7, r3, #28
   b4adc:	d444      	bmi.n	b4b68 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b4ade:	f003 0317 	and.w	r3, r3, #23
   b4ae2:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b4ae4:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b4ae8:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b4aec:	bf04      	itt	eq
   b4aee:	f043 0308 	orreq.w	r3, r3, #8
   b4af2:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b4af4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b4af8:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b4afa:	f006 0303 	and.w	r3, r6, #3
   b4afe:	2b01      	cmp	r3, #1
   b4b00:	d02c      	beq.n	b4b5c <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b4b02:	2b02      	cmp	r3, #2
   b4b04:	d028      	beq.n	b4b58 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b4b06:	bb7b      	cbnz	r3, b4b68 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b4b08:	0571      	lsls	r1, r6, #21
   b4b0a:	d42d      	bmi.n	b4b68 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b4b0c:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b4b0e:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b4b10:	78a1      	ldrb	r1, [r4, #2]
   b4b12:	078b      	lsls	r3, r1, #30
   b4b14:	d504      	bpl.n	b4b20 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b4b16:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b4b18:	06df      	lsls	r7, r3, #27
   b4b1a:	d425      	bmi.n	b4b68 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b4b1c:	07dd      	lsls	r5, r3, #31
   b4b1e:	d423      	bmi.n	b4b68 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b4b20:	11b3      	asrs	r3, r6, #6
   b4b22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b4b26:	f006 0508 	and.w	r5, r6, #8
   b4b2a:	432b      	orrs	r3, r5
   b4b2c:	430b      	orrs	r3, r1
   b4b2e:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b4b30:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b4b32:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b4b34:	1883      	adds	r3, r0, r2
   b4b36:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b4b3a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b4b3e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b4b42:	0572      	lsls	r2, r6, #21
   b4b44:	d513      	bpl.n	b4b6e <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b4b46:	b959      	cbnz	r1, b4b60 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b4b48:	78a3      	ldrb	r3, [r4, #2]
   b4b4a:	f043 0304 	orr.w	r3, r3, #4
   b4b4e:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b4b50:	0473      	lsls	r3, r6, #17
   b4b52:	d410      	bmi.n	b4b76 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b4b54:	2001      	movs	r0, #1
}
   b4b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b4b58:	2303      	movs	r3, #3
   b4b5a:	e7d8      	b.n	b4b0e <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b4b5c:	2302      	movs	r3, #2
   b4b5e:	e7d6      	b.n	b4b0e <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b4b60:	f000 fd71 	bl	b5646 <_ZN9FatVolume9freeChainEm>
   b4b64:	2800      	cmp	r0, #0
   b4b66:	d1ef      	bne.n	b4b48 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b4b68:	2000      	movs	r0, #0
   b4b6a:	7020      	strb	r0, [r4, #0]
  return false;
   b4b6c:	e7f3      	b.n	b4b56 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b4b6e:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b4b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4b72:	61e3      	str	r3, [r4, #28]
   b4b74:	e7ec      	b.n	b4b50 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b4b76:	69e1      	ldr	r1, [r4, #28]
   b4b78:	4620      	mov	r0, r4
   b4b7a:	f7ff ff56 	bl	b4a2a <_ZN7FatFile7seekSetEm>
   b4b7e:	2800      	cmp	r0, #0
   b4b80:	d1e8      	bne.n	b4b54 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b4b82:	e7f1      	b.n	b4b68 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b4b84 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b4b84:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b4b86:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b4b88:	4604      	mov	r4, r0
  if (!isOpen()) {
   b4b8a:	b90b      	cbnz	r3, b4b90 <_ZN7FatFile4syncEv+0xc>
    return true;
   b4b8c:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b4b8e:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b4b90:	7883      	ldrb	r3, [r0, #2]
   b4b92:	075a      	lsls	r2, r3, #29
   b4b94:	d523      	bpl.n	b4bde <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b4b96:	2101      	movs	r1, #1
   b4b98:	f7ff fe52 	bl	b4840 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b4b9c:	4605      	mov	r5, r0
   b4b9e:	b928      	cbnz	r0, b4bac <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b4ba0:	7863      	ldrb	r3, [r4, #1]
   b4ba2:	f043 0301 	orr.w	r3, r3, #1
   b4ba6:	7063      	strb	r3, [r4, #1]
  return false;
   b4ba8:	2000      	movs	r0, #0
   b4baa:	e7f0      	b.n	b4b8e <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b4bac:	7803      	ldrb	r3, [r0, #0]
   b4bae:	2be5      	cmp	r3, #229	; 0xe5
   b4bb0:	d0f6      	beq.n	b4ba0 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b4bb2:	7823      	ldrb	r3, [r4, #0]
   b4bb4:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b4bb6:	bf44      	itt	mi
   b4bb8:	69e3      	ldrmi	r3, [r4, #28]
   b4bba:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b4bbc:	6a23      	ldr	r3, [r4, #32]
   b4bbe:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b4bc0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b4bc2:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b4bc4:	4b09      	ldr	r3, [pc, #36]	; (b4bec <_ZN7FatFile4syncEv+0x68>)
   b4bc6:	681b      	ldr	r3, [r3, #0]
   b4bc8:	b12b      	cbz	r3, b4bd6 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b4bca:	f100 0116 	add.w	r1, r0, #22
   b4bce:	3018      	adds	r0, #24
   b4bd0:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b4bd2:	8b2b      	ldrh	r3, [r5, #24]
   b4bd4:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b4bd6:	78a3      	ldrb	r3, [r4, #2]
   b4bd8:	f023 0304 	bic.w	r3, r3, #4
   b4bdc:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b4bde:	68a0      	ldr	r0, [r4, #8]
   b4be0:	f7ff fdd8 	bl	b4794 <_ZN9FatVolume9cacheSyncEv>
   b4be4:	2800      	cmp	r0, #0
   b4be6:	d0db      	beq.n	b4ba0 <_ZN7FatFile4syncEv+0x1c>
   b4be8:	e7d0      	b.n	b4b8c <_ZN7FatFile4syncEv+0x8>
   b4bea:	bf00      	nop
   b4bec:	2003e674 	.word	0x2003e674

000b4bf0 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b4bf0:	b510      	push	{r4, lr}
   b4bf2:	4604      	mov	r4, r0
  bool rtn = sync();
   b4bf4:	f7ff ffc6 	bl	b4b84 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b4bf8:	2300      	movs	r3, #0
   b4bfa:	7023      	strb	r3, [r4, #0]
}
   b4bfc:	bd10      	pop	{r4, pc}

000b4bfe <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b4bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4c00:	b093      	sub	sp, #76	; 0x4c
   b4c02:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4c04:	2300      	movs	r3, #0
   b4c06:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b4c08:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b4c0a:	9201      	str	r2, [sp, #4]
   b4c0c:	4606      	mov	r6, r0
   b4c0e:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b4c10:	b113      	cbz	r3, b4c18 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b4c12:	2000      	movs	r0, #0
}
   b4c14:	b013      	add	sp, #76	; 0x4c
   b4c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b4c18:	780b      	ldrb	r3, [r1, #0]
   b4c1a:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4c1e:	d0f8      	beq.n	b4c12 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b4c20:	7813      	ldrb	r3, [r2, #0]
   b4c22:	2b2f      	cmp	r3, #47	; 0x2f
   b4c24:	d112      	bne.n	b4c4c <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b4c26:	9a01      	ldr	r2, [sp, #4]
   b4c28:	7813      	ldrb	r3, [r2, #0]
   b4c2a:	2b2f      	cmp	r3, #47	; 0x2f
   b4c2c:	d102      	bne.n	b4c34 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b4c2e:	3201      	adds	r2, #1
   b4c30:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b4c32:	e7f8      	b.n	b4c26 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b4c34:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b4c36:	b91b      	cbnz	r3, b4c40 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b4c38:	4630      	mov	r0, r6
   b4c3a:	f7ff fe10 	bl	b485e <_ZN7FatFile8openRootEP9FatVolume>
   b4c3e:	e7e9      	b.n	b4c14 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b4c40:	a809      	add	r0, sp, #36	; 0x24
   b4c42:	f7ff fd91 	bl	b4768 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b4c46:	2800      	cmp	r0, #0
   b4c48:	d0e3      	beq.n	b4c12 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b4c4a:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b4c4c:	9801      	ldr	r0, [sp, #4]
   b4c4e:	aa01      	add	r2, sp, #4
   b4c50:	a903      	add	r1, sp, #12
   b4c52:	f000 f90b 	bl	b4e6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b4c56:	2800      	cmp	r0, #0
   b4c58:	d0db      	beq.n	b4c12 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b4c5a:	9b01      	ldr	r3, [sp, #4]
   b4c5c:	781b      	ldrb	r3, [r3, #0]
   b4c5e:	b19b      	cbz	r3, b4c88 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b4c60:	2300      	movs	r3, #0
   b4c62:	aa03      	add	r2, sp, #12
   b4c64:	4621      	mov	r1, r4
   b4c66:	4630      	mov	r0, r6
   b4c68:	f000 fa32 	bl	b50d0 <_ZN7FatFile4openEPS_P7fname_ti>
   b4c6c:	2800      	cmp	r0, #0
   b4c6e:	d0d0      	beq.n	b4c12 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b4c70:	4635      	mov	r5, r6
   b4c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4c74:	ac09      	add	r4, sp, #36	; 0x24
   b4c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4c7c:	682b      	ldr	r3, [r5, #0]
   b4c7e:	6023      	str	r3, [r4, #0]
    close();
   b4c80:	4630      	mov	r0, r6
   b4c82:	f7ff ffb5 	bl	b4bf0 <_ZN7FatFile5closeEv>
  while (1) {
   b4c86:	e7e0      	b.n	b4c4a <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b4c88:	463b      	mov	r3, r7
   b4c8a:	aa03      	add	r2, sp, #12
   b4c8c:	4621      	mov	r1, r4
   b4c8e:	4630      	mov	r0, r6
   b4c90:	f000 fa1e 	bl	b50d0 <_ZN7FatFile4openEPS_P7fname_ti>
   b4c94:	e7be      	b.n	b4c14 <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b4c98 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b4c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b4c9c:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b4c9e:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b4ca0:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b4ca2:	4604      	mov	r4, r0
   b4ca4:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b4ca6:	d55b      	bpl.n	b4d60 <_ZN7FatFile5writeEPKvj+0xc8>
   b4ca8:	7883      	ldrb	r3, [r0, #2]
   b4caa:	079a      	lsls	r2, r3, #30
   b4cac:	d558      	bpl.n	b4d60 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b4cae:	071b      	lsls	r3, r3, #28
   b4cb0:	d451      	bmi.n	b4d56 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b4cb2:	6963      	ldr	r3, [r4, #20]
   b4cb4:	43db      	mvns	r3, r3
   b4cb6:	42bb      	cmp	r3, r7
   b4cb8:	d352      	bcc.n	b4d60 <_ZN7FatFile5writeEPKvj+0xc8>
   b4cba:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b4cbc:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b4cc0:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b4cc2:	f1b8 0f00 	cmp.w	r8, #0
   b4cc6:	f000 8091 	beq.w	b4dec <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b4cca:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b4ccc:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b4cce:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b4cd2:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b4cd6:	d10e      	bne.n	b4cf6 <_ZN7FatFile5writeEPKvj+0x5e>
   b4cd8:	b96d      	cbnz	r5, b4cf6 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b4cda:	6921      	ldr	r1, [r4, #16]
   b4cdc:	2900      	cmp	r1, #0
   b4cde:	d046      	beq.n	b4d6e <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b4ce0:	4652      	mov	r2, sl
   b4ce2:	f000 fc10 	bl	b5506 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b4ce6:	2800      	cmp	r0, #0
   b4ce8:	db3a      	blt.n	b4d60 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b4cea:	d104      	bne.n	b4cf6 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b4cec:	4620      	mov	r0, r4
   b4cee:	f7ff fd5e 	bl	b47ae <_ZN7FatFile10addClusterEv>
   b4cf2:	2800      	cmp	r0, #0
   b4cf4:	d034      	beq.n	b4d60 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b4cf6:	6921      	ldr	r1, [r4, #16]
   b4cf8:	68a0      	ldr	r0, [r4, #8]
   b4cfa:	f000 fbfe 	bl	b54fa <_ZNK9FatVolume17clusterFirstBlockEm>
   b4cfe:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b4d00:	68a0      	ldr	r0, [r4, #8]
   b4d02:	b915      	cbnz	r5, b4d0a <_ZN7FatFile5writeEPKvj+0x72>
   b4d04:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b4d08:	d23f      	bcs.n	b4d8a <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b4d0a:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b4d0e:	4546      	cmp	r6, r8
   b4d10:	bf28      	it	cs
   b4d12:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b4d14:	2d00      	cmp	r5, #0
   b4d16:	d136      	bne.n	b4d86 <_ZN7FatFile5writeEPKvj+0xee>
   b4d18:	6962      	ldr	r2, [r4, #20]
   b4d1a:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b4d1c:	429a      	cmp	r2, r3
   b4d1e:	bf34      	ite	cc
   b4d20:	2201      	movcc	r2, #1
   b4d22:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b4d24:	3024      	adds	r0, #36	; 0x24
   b4d26:	f000 fbc5 	bl	b54b4 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b4d2a:	b1c8      	cbz	r0, b4d60 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b4d2c:	4428      	add	r0, r5
   b4d2e:	4632      	mov	r2, r6
   b4d30:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b4d32:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b4d34:	f003 f8a0 	bl	b7e78 <memcpy>
      if (512 == (n + blockOffset)) {
   b4d38:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b4d3c:	d104      	bne.n	b4d48 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b4d3e:	68a0      	ldr	r0, [r4, #8]
   b4d40:	3024      	adds	r0, #36	; 0x24
   b4d42:	f000 fb8f 	bl	b5464 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b4d46:	b158      	cbz	r0, b4d60 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b4d48:	6963      	ldr	r3, [r4, #20]
   b4d4a:	4433      	add	r3, r6
   b4d4c:	6163      	str	r3, [r4, #20]
    src += n;
   b4d4e:	44b1      	add	r9, r6
    nToWrite -= n;
   b4d50:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b4d54:	e7b4      	b.n	b4cc0 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b4d56:	69c1      	ldr	r1, [r0, #28]
   b4d58:	f7ff fe67 	bl	b4a2a <_ZN7FatFile7seekSetEm>
   b4d5c:	2800      	cmp	r0, #0
   b4d5e:	d1a8      	bne.n	b4cb2 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b4d60:	7863      	ldrb	r3, [r4, #1]
   b4d62:	f043 0301 	orr.w	r3, r3, #1
   b4d66:	7063      	strb	r3, [r4, #1]
  return -1;
   b4d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4d6c:	e050      	b.n	b4e10 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b4d6e:	6a23      	ldr	r3, [r4, #32]
   b4d70:	b93b      	cbnz	r3, b4d82 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b4d72:	4620      	mov	r0, r4
   b4d74:	f7ff fd1b 	bl	b47ae <_ZN7FatFile10addClusterEv>
   b4d78:	2800      	cmp	r0, #0
   b4d7a:	d0f1      	beq.n	b4d60 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b4d7c:	6923      	ldr	r3, [r4, #16]
   b4d7e:	6223      	str	r3, [r4, #32]
   b4d80:	e7b9      	b.n	b4cf6 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b4d82:	6123      	str	r3, [r4, #16]
   b4d84:	e7b7      	b.n	b4cf6 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b4d86:	2201      	movs	r2, #1
   b4d88:	e7cc      	b.n	b4d24 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b4d8a:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b4d8e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b4d90:	d31b      	bcc.n	b4dca <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b4d92:	f890 c004 	ldrb.w	ip, [r0, #4]
   b4d96:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b4d9a:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b4d9c:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b4da0:	4573      	cmp	r3, lr
   b4da2:	bf28      	it	cs
   b4da4:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b4da6:	4291      	cmp	r1, r2
      n = 512*nb;
   b4da8:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b4dac:	d307      	bcc.n	b4dbe <_ZN7FatFile5writeEPKvj+0x126>
   b4dae:	441a      	add	r2, r3
   b4db0:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b4db2:	bf82      	ittt	hi
   b4db4:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b4db8:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b4dbc:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b4dbe:	68a5      	ldr	r5, [r4, #8]
   b4dc0:	464a      	mov	r2, r9
   b4dc2:	6828      	ldr	r0, [r5, #0]
   b4dc4:	f000 ff59 	bl	b5c7a <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b4dc8:	e7bd      	b.n	b4d46 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b4dca:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b4dcc:	bf02      	ittt	eq
   b4dce:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b4dd2:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b4dd6:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b4dd8:	68a3      	ldr	r3, [r4, #8]
   b4dda:	464a      	mov	r2, r9
   b4ddc:	6818      	ldr	r0, [r3, #0]
   b4dde:	f000 fed6 	bl	b5b8e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b4de2:	2800      	cmp	r0, #0
   b4de4:	d0bc      	beq.n	b4d60 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b4de6:	f44f 7600 	mov.w	r6, #512	; 0x200
   b4dea:	e7ad      	b.n	b4d48 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b4dec:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b4dee:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b4df0:	42b2      	cmp	r2, r6
   b4df2:	d204      	bcs.n	b4dfe <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b4df4:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b4df6:	f043 0304 	orr.w	r3, r3, #4
   b4dfa:	70a3      	strb	r3, [r4, #2]
   b4dfc:	e003      	b.n	b4e06 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b4dfe:	4a08      	ldr	r2, [pc, #32]	; (b4e20 <_ZN7FatFile5writeEPKvj+0x188>)
   b4e00:	6812      	ldr	r2, [r2, #0]
   b4e02:	2a00      	cmp	r2, #0
   b4e04:	d1f7      	bne.n	b4df6 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b4e06:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b4e0a:	2b00      	cmp	r3, #0
   b4e0c:	db02      	blt.n	b4e14 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b4e0e:	4638      	mov	r0, r7
}
   b4e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b4e14:	4620      	mov	r0, r4
   b4e16:	f7ff feb5 	bl	b4b84 <_ZN7FatFile4syncEv>
   b4e1a:	2800      	cmp	r0, #0
   b4e1c:	d1f7      	bne.n	b4e0e <_ZN7FatFile5writeEPKvj+0x176>
   b4e1e:	e79f      	b.n	b4d60 <_ZN7FatFile5writeEPKvj+0xc8>
   b4e20:	2003e674 	.word	0x2003e674

000b4e24 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b4e24:	2904      	cmp	r1, #4
   b4e26:	d804      	bhi.n	b4e32 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b4e28:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b4e2c:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b4e30:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b4e32:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b4e34:	bf9b      	ittet	ls
   b4e36:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b4e3a:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b4e3e:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b4e40:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b4e42:	bf84      	itt	hi
   b4e44:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b4e48:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b4e4a:	4770      	bx	lr

000b4e4c <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b4e4c:	1e41      	subs	r1, r0, #1
   b4e4e:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b4e52:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b4e54:	0842      	lsrs	r2, r0, #1
   b4e56:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b4e5a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b4e5e:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b4e62:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b4e64:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b4e66:	d1f5      	bne.n	b4e54 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b4e68:	4770      	bx	lr
	...

000b4e6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b4e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4e70:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b4e72:	f810 3b01 	ldrb.w	r3, [r0], #1
   b4e76:	2b20      	cmp	r3, #32
   b4e78:	d0fa      	beq.n	b4e70 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b4e7a:	4d6a      	ldr	r5, [pc, #424]	; (b5024 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b4e7c:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b4e7e:	2400      	movs	r4, #0
    c = path[len];
   b4e80:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b4e82:	b1c3      	cbz	r3, b4eb6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b4e84:	2b2f      	cmp	r3, #47	; 0x2f
   b4e86:	d016      	beq.n	b4eb6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b4e88:	2b5c      	cmp	r3, #92	; 0x5c
   b4e8a:	d102      	bne.n	b4e92 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b4e8c:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b4e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b4e92:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b4e96:	b2c0      	uxtb	r0, r0
   b4e98:	281d      	cmp	r0, #29
   b4e9a:	d803      	bhi.n	b4ea4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b4e9c:	fa25 f000 	lsr.w	r0, r5, r0
   b4ea0:	07c0      	lsls	r0, r0, #31
   b4ea2:	d4f3      	bmi.n	b4e8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b4ea4:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b4ea8:	283c      	cmp	r0, #60	; 0x3c
   b4eaa:	d0ef      	beq.n	b4e8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b4eac:	3b20      	subs	r3, #32
   b4eae:	2b5e      	cmp	r3, #94	; 0x5e
   b4eb0:	d8ec      	bhi.n	b4e8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b4eb2:	3401      	adds	r4, #1
    c = path[len];
   b4eb4:	e7e4      	b.n	b4e80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b4eb6:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b4eb8:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b4eba:	4607      	mov	r7, r0
   b4ebc:	f810 5b01 	ldrb.w	r5, [r0], #1
   b4ec0:	2d20      	cmp	r5, #32
   b4ec2:	d0fa      	beq.n	b4eba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b4ec4:	2d2f      	cmp	r5, #47	; 0x2f
   b4ec6:	d0f8      	beq.n	b4eba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b4ec8:	6017      	str	r7, [r2, #0]
  while (len) {
   b4eca:	b14c      	cbz	r4, b4ee0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b4ecc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b4ed0:	2a2e      	cmp	r2, #46	; 0x2e
   b4ed2:	d001      	beq.n	b4ed8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b4ed4:	2a20      	cmp	r2, #32
   b4ed6:	d101      	bne.n	b4edc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b4ed8:	3c01      	subs	r4, #1
  while (len) {
   b4eda:	e7f6      	b.n	b4eca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b4edc:	2cff      	cmp	r4, #255	; 0xff
   b4ede:	dcd5      	bgt.n	b4e8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b4ee0:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b4ee4:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b4ee8:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b4eea:	f8c1 300d 	str.w	r3, [r1, #13]
   b4eee:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b4ef0:	f04f 0800 	mov.w	r8, #0
   b4ef4:	f816 3008 	ldrb.w	r3, [r6, r8]
   b4ef8:	2b2e      	cmp	r3, #46	; 0x2e
   b4efa:	d001      	beq.n	b4f00 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b4efc:	2b20      	cmp	r3, #32
   b4efe:	d102      	bne.n	b4f06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b4f00:	f108 0801 	add.w	r8, r8, #1
   b4f04:	e7f6      	b.n	b4ef4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b4f06:	fab8 f088 	clz	r0, r8
   b4f0a:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b4f0c:	1e65      	subs	r5, r4, #1
   b4f0e:	1c6b      	adds	r3, r5, #1
   b4f10:	d002      	beq.n	b4f18 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b4f12:	5d73      	ldrb	r3, [r6, r5]
   b4f14:	2b2e      	cmp	r3, #46	; 0x2e
   b4f16:	d114      	bne.n	b4f42 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b4f18:	f04f 0900 	mov.w	r9, #0
   b4f1c:	2707      	movs	r7, #7
   b4f1e:	464a      	mov	r2, r9
   b4f20:	46ca      	mov	sl, r9
   b4f22:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b4f26:	45a0      	cmp	r8, r4
   b4f28:	da68      	bge.n	b4ffc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b4f2a:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b4f2e:	2b20      	cmp	r3, #32
   b4f30:	d003      	beq.n	b4f3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b4f32:	2b2e      	cmp	r3, #46	; 0x2e
   b4f34:	d107      	bne.n	b4f46 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b4f36:	45a8      	cmp	r8, r5
   b4f38:	d012      	beq.n	b4f60 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b4f3a:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b4f3c:	f108 0801 	add.w	r8, r8, #1
   b4f40:	e7f1      	b.n	b4f26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b4f42:	3d01      	subs	r5, #1
   b4f44:	e7e3      	b.n	b4f0e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b4f46:	2b22      	cmp	r3, #34	; 0x22
   b4f48:	d008      	beq.n	b4f5c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b4f4a:	2b7c      	cmp	r3, #124	; 0x7c
   b4f4c:	d006      	beq.n	b4f5c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b4f4e:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b4f52:	f1bc 0f05 	cmp.w	ip, #5
   b4f56:	d80a      	bhi.n	b4f6e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b4f58:	2b2d      	cmp	r3, #45	; 0x2d
   b4f5a:	d012      	beq.n	b4f82 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b4f5c:	45a8      	cmp	r8, r5
   b4f5e:	d15b      	bne.n	b5018 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b4f60:	2f0a      	cmp	r7, #10
   b4f62:	d04a      	beq.n	b4ffa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b4f64:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b4f66:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b4f68:	f04f 0e10 	mov.w	lr, #16
   b4f6c:	e7e6      	b.n	b4f3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b4f6e:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b4f72:	f1bc 0f05 	cmp.w	ip, #5
   b4f76:	d9f1      	bls.n	b4f5c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b4f78:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b4f7c:	f1bc 0f02 	cmp.w	ip, #2
   b4f80:	d9ec      	bls.n	b4f5c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b4f82:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b4f86:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b4f8a:	d8e7      	bhi.n	b4f5c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b4f8c:	45a8      	cmp	r8, r5
   b4f8e:	d0e7      	beq.n	b4f60 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b4f90:	42ba      	cmp	r2, r7
   b4f92:	d830      	bhi.n	b4ff6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b4f94:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b4f98:	f1bc 0f19 	cmp.w	ip, #25
   b4f9c:	d81a      	bhi.n	b4fd4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b4f9e:	3b20      	subs	r3, #32
        lc |= bit;
   b4fa0:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b4fa4:	b2db      	uxtb	r3, r3
        lc |= bit;
   b4fa6:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b4faa:	f102 0c01 	add.w	ip, r2, #1
   b4fae:	fa5f fc8c 	uxtb.w	ip, ip
   b4fb2:	440a      	add	r2, r1
      if (i < 7) {
   b4fb4:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b4fb8:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b4fba:	d801      	bhi.n	b4fc0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b4fbc:	f881 c00c 	strb.w	ip, [r1, #12]
   b4fc0:	4662      	mov	r2, ip
   b4fc2:	e7bb      	b.n	b4f3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b4fc4:	45a8      	cmp	r8, r5
   b4fc6:	dc18      	bgt.n	b4ffa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b4fc8:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b4fca:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b4fcc:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b4fce:	f04f 0e10 	mov.w	lr, #16
   b4fd2:	e7b2      	b.n	b4f3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b4fd4:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b4fd8:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b4fdc:	bf98      	it	ls
   b4fde:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b4fe2:	e7e2      	b.n	b4faa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b4fe4:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b4fe6:	2001      	movs	r0, #1
   b4fe8:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b4fea:	4419      	add	r1, r3
   b4fec:	237e      	movs	r3, #126	; 0x7e
   b4fee:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b4ff0:	2331      	movs	r3, #49	; 0x31
   b4ff2:	738b      	strb	r3, [r1, #14]
   b4ff4:	e74b      	b.n	b4e8e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b4ff6:	2f0a      	cmp	r7, #10
   b4ff8:	d1e4      	bne.n	b4fc4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b4ffa:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b4ffc:	7b4b      	ldrb	r3, [r1, #13]
   b4ffe:	2b20      	cmp	r3, #32
   b5000:	f43f af44 	beq.w	b4e8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b5004:	2800      	cmp	r0, #0
   b5006:	d0ed      	beq.n	b4fe4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b5008:	ea1a 0f09 	tst.w	sl, r9
   b500c:	bf18      	it	ne
   b500e:	f04f 0902 	movne.w	r9, #2
   b5012:	f881 9000 	strb.w	r9, [r1]
   b5016:	e73a      	b.n	b4e8e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b5018:	42ba      	cmp	r2, r7
   b501a:	d8ec      	bhi.n	b4ff6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b501c:	2000      	movs	r0, #0
      c = '_';
   b501e:	235f      	movs	r3, #95	; 0x5f
   b5020:	e7c3      	b.n	b4faa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b5022:	bf00      	nop
   b5024:	31000101 	.word	0x31000101

000b5028 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b5028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b502c:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b5030:	4606      	mov	r6, r0
   b5032:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b5034:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b5036:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b5038:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b503c:	6861      	ldr	r1, [r4, #4]
   b503e:	68a2      	ldr	r2, [r4, #8]
   b5040:	186b      	adds	r3, r5, r1
   b5042:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b5044:	4411      	add	r1, r2
   b5046:	4291      	cmp	r1, r2
   b5048:	d006      	beq.n	b5058 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b504a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b504e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b5052:	4043      	eors	r3, r0
   b5054:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b5056:	e7f6      	b.n	b5046 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b5058:	f1b9 0f03 	cmp.w	r9, #3
   b505c:	bf28      	it	cs
   b505e:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5062:	f109 0204 	add.w	r2, r9, #4
   b5066:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b5068:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b506c:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b506e:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5070:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5072:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5074:	bf94      	ite	ls
   b5076:	3130      	addls	r1, #48	; 0x30
   b5078:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b507a:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b507c:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b507e:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5082:	d1f1      	bne.n	b5068 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b5084:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b5088:	2100      	movs	r1, #0
   b508a:	735f      	strb	r7, [r3, #13]
   b508c:	4630      	mov	r0, r6
   b508e:	f7ff fccc 	bl	b4a2a <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b5092:	2101      	movs	r1, #1
   b5094:	4630      	mov	r0, r6
   b5096:	f7ff fca9 	bl	b49ec <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b509a:	4601      	mov	r1, r0
   b509c:	b928      	cbnz	r0, b50aa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b509e:	7870      	ldrb	r0, [r6, #1]
   b50a0:	fab0 f080 	clz	r0, r0
   b50a4:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b50a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b50aa:	7803      	ldrb	r3, [r0, #0]
   b50ac:	b16b      	cbz	r3, b50ca <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b50ae:	7ac3      	ldrb	r3, [r0, #11]
   b50b0:	071b      	lsls	r3, r3, #28
   b50b2:	d4ee      	bmi.n	b5092 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b50b4:	220b      	movs	r2, #11
   b50b6:	4640      	mov	r0, r8
   b50b8:	f002 fece 	bl	b7e58 <memcmp>
   b50bc:	2800      	cmp	r0, #0
   b50be:	d1e8      	bne.n	b5092 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b50c0:	3501      	adds	r5, #1
   b50c2:	b2ad      	uxth	r5, r5
   b50c4:	2d64      	cmp	r5, #100	; 0x64
   b50c6:	d1b9      	bne.n	b503c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b50c8:	e7ed      	b.n	b50a6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b50ca:	2001      	movs	r0, #1
   b50cc:	e7eb      	b.n	b50a6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b50d0 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b50d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b50d4:	ed2d 8b02 	vpush	{d8}
   b50d8:	b08b      	sub	sp, #44	; 0x2c
   b50da:	460d      	mov	r5, r1
   b50dc:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b50de:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b50e0:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b50e2:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b50e6:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b50e8:	d105      	bne.n	b50f6 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b50ea:	2000      	movs	r0, #0
}
   b50ec:	b00b      	add	sp, #44	; 0x2c
   b50ee:	ecbd 8b02 	vpop	{d8}
   b50f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b50f6:	9b07      	ldr	r3, [sp, #28]
   b50f8:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b50fa:	2b00      	cmp	r3, #0
   b50fc:	d1f5      	bne.n	b50ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b50fe:	6853      	ldr	r3, [r2, #4]
   b5100:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b5102:	7813      	ldrb	r3, [r2, #0]
   b5104:	079c      	lsls	r4, r3, #30
   b5106:	bf1f      	itttt	ne
   b5108:	9b05      	ldrne	r3, [sp, #20]
   b510a:	330c      	addne	r3, #12
   b510c:	220d      	movne	r2, #13
   b510e:	fbb3 f3f2 	udivne	r3, r3, r2
   b5112:	bf1a      	itte	ne
   b5114:	3301      	addne	r3, #1
   b5116:	b2db      	uxtbne	r3, r3
   b5118:	2301      	moveq	r3, #1
    seekSet(0);
   b511a:	2100      	movs	r1, #0
   b511c:	4628      	mov	r0, r5
   b511e:	9303      	str	r3, [sp, #12]
   b5120:	f7ff fc83 	bl	b4a2a <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b5124:	f107 030d 	add.w	r3, r7, #13
  }
   b5128:	f04f 0b00 	mov.w	fp, #0
   b512c:	ee08 3a10 	vmov	s16, r3
   b5130:	46da      	mov	sl, fp
   b5132:	465c      	mov	r4, fp
   b5134:	465e      	mov	r6, fp
   b5136:	f8cd b010 	str.w	fp, [sp, #16]
   b513a:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b513c:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b513e:	2101      	movs	r1, #1
   b5140:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b5142:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b5146:	f7ff fc51 	bl	b49ec <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b514a:	4603      	mov	r3, r0
   b514c:	2800      	cmp	r0, #0
   b514e:	d171      	bne.n	b5234 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b5150:	786b      	ldrb	r3, [r5, #1]
   b5152:	2b00      	cmp	r3, #0
   b5154:	d1c9      	bne.n	b50ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b5156:	9b06      	ldr	r3, [sp, #24]
   b5158:	059a      	lsls	r2, r3, #22
   b515a:	d5c6      	bpl.n	b50ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b515c:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b5160:	3b01      	subs	r3, #1
   b5162:	2b01      	cmp	r3, #1
   b5164:	d8c1      	bhi.n	b50ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b5166:	9b04      	ldr	r3, [sp, #16]
   b5168:	2c00      	cmp	r4, #0
   b516a:	bf08      	it	eq
   b516c:	4643      	moveq	r3, r8
   b516e:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b5170:	9b03      	ldr	r3, [sp, #12]
   b5172:	429c      	cmp	r4, r3
   b5174:	f0c0 80f1 	bcc.w	b535a <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b5178:	f1b9 0f00 	cmp.w	r9, #0
   b517c:	f040 810a 	bne.w	b5394 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b5180:	9b04      	ldr	r3, [sp, #16]
   b5182:	4628      	mov	r0, r5
   b5184:	0159      	lsls	r1, r3, #5
   b5186:	f7ff fc50 	bl	b4a2a <_ZN7FatFile7seekSetEm>
   b518a:	2800      	cmp	r0, #0
   b518c:	d0ad      	beq.n	b50ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b518e:	9b03      	ldr	r3, [sp, #12]
   b5190:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b5194:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b5198:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b519a:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b519e:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b51a2:	2e00      	cmp	r6, #0
   b51a4:	f000 810d 	beq.w	b53c2 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b51a8:	2100      	movs	r1, #0
   b51aa:	4628      	mov	r0, r5
   b51ac:	f7ff fc1e 	bl	b49ec <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b51b0:	4604      	mov	r4, r0
   b51b2:	2800      	cmp	r0, #0
   b51b4:	d099      	beq.n	b50ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b51b6:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b51b8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b51bc:	454e      	cmp	r6, r9
   b51be:	f043 0301 	orr.w	r3, r3, #1
   b51c2:	bf0c      	ite	eq
   b51c4:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b51c8:	46b3      	movne	fp, r6
   b51ca:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b51ce:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b51d2:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b51d6:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b51da:	f107 000d 	add.w	r0, r7, #13
   b51de:	f7ff fe35 	bl	b4e4c <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b51e2:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b51e6:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b51e8:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b51ec:	f00b 031f 	and.w	r3, fp, #31
   b51f0:	220d      	movs	r2, #13
   b51f2:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b51f4:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b51f8:	4353      	muls	r3, r2
   b51fa:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b51fc:	9905      	ldr	r1, [sp, #20]
   b51fe:	4299      	cmp	r1, r3
   b5200:	f240 80d0 	bls.w	b53a4 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b5204:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b5208:	2a04      	cmp	r2, #4
   b520a:	fa5f fe82 	uxtb.w	lr, r2
   b520e:	f102 0001 	add.w	r0, r2, #1
   b5212:	f200 80cd 	bhi.w	b53b0 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b5216:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b521a:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b521e:	280d      	cmp	r0, #13
   b5220:	f103 0301 	add.w	r3, r3, #1
   b5224:	4602      	mov	r2, r0
   b5226:	d1e9      	bne.n	b51fc <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b5228:	3e01      	subs	r6, #1
   b522a:	b2f6      	uxtb	r6, r6
   b522c:	e7b9      	b.n	b51a2 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b522e:	f04f 0901 	mov.w	r9, #1
   b5232:	e783      	b.n	b513c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b5234:	7802      	ldrb	r2, [r0, #0]
   b5236:	2ae5      	cmp	r2, #229	; 0xe5
   b5238:	d000      	beq.n	b523c <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b523a:	b97a      	cbnz	r2, b525c <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b523c:	9904      	ldr	r1, [sp, #16]
   b523e:	2c00      	cmp	r4, #0
   b5240:	bf08      	it	eq
   b5242:	4641      	moveq	r1, r8
   b5244:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b5246:	9903      	ldr	r1, [sp, #12]
   b5248:	428c      	cmp	r4, r1
        freeFound++;
   b524a:	bf3c      	itt	cc
   b524c:	3401      	addcc	r4, #1
   b524e:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b5250:	2a00      	cmp	r2, #0
   b5252:	d080      	beq.n	b5156 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b5254:	2ae5      	cmp	r2, #229	; 0xe5
   b5256:	d105      	bne.n	b5264 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b5258:	2600      	movs	r6, #0
   b525a:	e76f      	b.n	b513c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b525c:	9903      	ldr	r1, [sp, #12]
   b525e:	428c      	cmp	r4, r1
   b5260:	bf38      	it	cc
   b5262:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b5264:	2a2e      	cmp	r2, #46	; 0x2e
   b5266:	d0f7      	beq.n	b5258 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b5268:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b526a:	290f      	cmp	r1, #15
   b526c:	d14a      	bne.n	b5304 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b526e:	bb16      	cbnz	r6, b52b6 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b5270:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b5274:	f43f af62 	beq.w	b513c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b5278:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b527c:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b5280:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b5282:	220d      	movs	r2, #13
   b5284:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b5288:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b528c:	9a05      	ldr	r2, [sp, #20]
   b528e:	4542      	cmp	r2, r8
   b5290:	d9e2      	bls.n	b5258 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b5292:	eba2 0208 	sub.w	r2, r2, r8
   b5296:	9208      	str	r2, [sp, #32]
   b5298:	2200      	movs	r2, #0
   b529a:	eb02 0108 	add.w	r1, r2, r8
   b529e:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b52a0:	4618      	mov	r0, r3
   b52a2:	b2d1      	uxtb	r1, r2
   b52a4:	f7ff fdbe 	bl	b4e24 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b52a8:	9908      	ldr	r1, [sp, #32]
   b52aa:	428a      	cmp	r2, r1
   b52ac:	d10d      	bne.n	b52ca <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b52ae:	2800      	cmp	r0, #0
   b52b0:	bf18      	it	ne
   b52b2:	2600      	movne	r6, #0
   b52b4:	e742      	b.n	b513c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b52b6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b52ba:	fa5f fa8a 	uxtb.w	sl, sl
   b52be:	4552      	cmp	r2, sl
   b52c0:	d1ca      	bne.n	b5258 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b52c2:	7b5a      	ldrb	r2, [r3, #13]
   b52c4:	455a      	cmp	r2, fp
   b52c6:	d0dc      	beq.n	b5282 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b52c8:	e7c6      	b.n	b5258 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b52ca:	28ff      	cmp	r0, #255	; 0xff
   b52cc:	d8c4      	bhi.n	b5258 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b52ce:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b52d2:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b52d6:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b52d8:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b52da:	bf9c      	itt	ls
   b52dc:	f10e 0020 	addls.w	r0, lr, #32
   b52e0:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b52e4:	4608      	mov	r0, r1
   b52e6:	9909      	ldr	r1, [sp, #36]	; 0x24
   b52e8:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b52ea:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b52ee:	f1bc 0f19 	cmp.w	ip, #25
   b52f2:	bf9c      	itt	ls
   b52f4:	3120      	addls	r1, #32
   b52f6:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b52f8:	4571      	cmp	r1, lr
   b52fa:	d1ad      	bne.n	b5258 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b52fc:	3201      	adds	r2, #1
   b52fe:	2a0d      	cmp	r2, #13
   b5300:	d1cb      	bne.n	b529a <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b5302:	e71b      	b.n	b513c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b5304:	0708      	lsls	r0, r1, #28
   b5306:	d4a7      	bmi.n	b5258 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b5308:	b15e      	cbz	r6, b5322 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b530a:	f1ba 0f01 	cmp.w	sl, #1
   b530e:	f47f aeec 	bne.w	b50ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b5312:	4618      	mov	r0, r3
   b5314:	f7ff fd9a 	bl	b4e4c <_ZN7FatFile11lfnChecksumEPh>
   b5318:	4558      	cmp	r0, fp
   b531a:	f47f aee6 	bne.w	b50ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b531e:	46b1      	mov	r9, r6
   b5320:	e00e      	b.n	b5340 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b5322:	ee18 1a10 	vmov	r1, s16
   b5326:	220b      	movs	r2, #11
   b5328:	4618      	mov	r0, r3
   b532a:	f002 fd95 	bl	b7e58 <memcmp>
   b532e:	2800      	cmp	r0, #0
   b5330:	f47f af04 	bne.w	b513c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b5334:	f897 9000 	ldrb.w	r9, [r7]
   b5338:	f019 0901 	ands.w	r9, r9, #1
   b533c:	f47f af77 	bne.w	b522e <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b5340:	9b06      	ldr	r3, [sp, #24]
   b5342:	0519      	lsls	r1, r3, #20
   b5344:	f53f aed1 	bmi.w	b50ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b5348:	9b06      	ldr	r3, [sp, #24]
   b534a:	9807      	ldr	r0, [sp, #28]
   b534c:	f8cd 9000 	str.w	r9, [sp]
   b5350:	4642      	mov	r2, r8
   b5352:	4629      	mov	r1, r5
   b5354:	f7ff fbac 	bl	b4ab0 <_ZN7FatFile15openCachedEntryEPS_tih>
   b5358:	e6c8      	b.n	b50ec <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b535a:	2100      	movs	r1, #0
   b535c:	4628      	mov	r0, r5
   b535e:	f7ff fb45 	bl	b49ec <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b5362:	b9a0      	cbnz	r0, b538e <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b5364:	786b      	ldrb	r3, [r5, #1]
   b5366:	2b00      	cmp	r3, #0
   b5368:	f47f aebf 	bne.w	b50ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b536c:	4628      	mov	r0, r5
   b536e:	f7ff fa29 	bl	b47c4 <_ZN7FatFile13addDirClusterEv>
   b5372:	2800      	cmp	r0, #0
   b5374:	f43f aeb9 	beq.w	b50ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b5378:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b537a:	791b      	ldrb	r3, [r3, #4]
   b537c:	2b01      	cmp	r3, #1
   b537e:	f63f aefb 	bhi.w	b5178 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b5382:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b5384:	3410      	adds	r4, #16
   b5386:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b5388:	42a3      	cmp	r3, r4
   b538a:	d8ef      	bhi.n	b536c <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b538c:	e6f4      	b.n	b5178 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b538e:	3401      	adds	r4, #1
   b5390:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b5392:	e6ed      	b.n	b5170 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b5394:	4639      	mov	r1, r7
   b5396:	4628      	mov	r0, r5
   b5398:	f7ff fe46 	bl	b5028 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b539c:	2800      	cmp	r0, #0
   b539e:	f47f aeef 	bne.w	b5180 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b53a2:	e6a2      	b.n	b50ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b53a4:	bf14      	ite	ne
   b53a6:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b53aa:	2100      	moveq	r1, #0
   b53ac:	b289      	uxth	r1, r1
   b53ae:	e72b      	b.n	b5208 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b53b0:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b53b4:	bf94      	ite	ls
   b53b6:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b53ba:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b53be:	8091      	strh	r1, [r2, #4]
   b53c0:	e72d      	b.n	b521e <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b53c2:	4631      	mov	r1, r6
   b53c4:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b53c6:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b53ca:	f7ff fb0f 	bl	b49ec <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b53ce:	4604      	mov	r4, r0
   b53d0:	2800      	cmp	r0, #0
   b53d2:	f43f ae8a 	beq.w	b50ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b53d6:	2220      	movs	r2, #32
   b53d8:	4631      	mov	r1, r6
   b53da:	f002 fd5b 	bl	b7e94 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b53de:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b53e2:	6023      	str	r3, [r4, #0]
   b53e4:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b53e8:	6063      	str	r3, [r4, #4]
   b53ea:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b53ee:	8123      	strh	r3, [r4, #8]
   b53f0:	7dfb      	ldrb	r3, [r7, #23]
   b53f2:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b53f4:	783b      	ldrb	r3, [r7, #0]
   b53f6:	f003 0318 	and.w	r3, r3, #24
   b53fa:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b53fc:	4b0f      	ldr	r3, [pc, #60]	; (b543c <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b53fe:	681b      	ldr	r3, [r3, #0]
   b5400:	b19b      	cbz	r3, b542a <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b5402:	f104 010e 	add.w	r1, r4, #14
   b5406:	f104 0010 	add.w	r0, r4, #16
   b540a:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b540c:	8a23      	ldrh	r3, [r4, #16]
   b540e:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b5410:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b5412:	89e3      	ldrh	r3, [r4, #14]
   b5414:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b5416:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b5418:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b541c:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b5420:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b5424:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b5428:	e78e      	b.n	b5348 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b542a:	2321      	movs	r3, #33	; 0x21
   b542c:	7423      	strb	r3, [r4, #16]
   b542e:	2328      	movs	r3, #40	; 0x28
   b5430:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b5432:	2308      	movs	r3, #8
   b5434:	73a6      	strb	r6, [r4, #14]
   b5436:	73e3      	strb	r3, [r4, #15]
   b5438:	e7e8      	b.n	b540c <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b543a:	bf00      	nop
   b543c:	2003e674 	.word	0x2003e674

000b5440 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5440:	b513      	push	{r0, r1, r4, lr}
   b5442:	4604      	mov	r4, r0
    }
   b5444:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5446:	b159      	cbz	r1, b5460 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5448:	9101      	str	r1, [sp, #4]
   b544a:	f002 fd59 	bl	b7f00 <strlen>
   b544e:	6823      	ldr	r3, [r4, #0]
   b5450:	9901      	ldr	r1, [sp, #4]
   b5452:	68db      	ldr	r3, [r3, #12]
   b5454:	4602      	mov	r2, r0
   b5456:	4620      	mov	r0, r4
    }
   b5458:	b002      	add	sp, #8
   b545a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b545e:	4718      	bx	r3
    }
   b5460:	b002      	add	sp, #8
   b5462:	bd10      	pop	{r4, pc}

000b5464 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b5464:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b5466:	7803      	ldrb	r3, [r0, #0]
   b5468:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b546a:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b546c:	d520      	bpl.n	b54b0 <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b546e:	6843      	ldr	r3, [r0, #4]
   b5470:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b5472:	f100 020c 	add.w	r2, r0, #12
   b5476:	6818      	ldr	r0, [r3, #0]
   b5478:	9201      	str	r2, [sp, #4]
   b547a:	f000 fb88 	bl	b5b8e <_ZN9SdSpiCard10writeBlockEmPKh>
   b547e:	9a01      	ldr	r2, [sp, #4]
   b5480:	4605      	mov	r5, r0
   b5482:	b918      	cbnz	r0, b548c <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b5484:	2500      	movs	r5, #0
}
   b5486:	4628      	mov	r0, r5
   b5488:	b003      	add	sp, #12
   b548a:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b548c:	7823      	ldrb	r3, [r4, #0]
   b548e:	079b      	lsls	r3, r3, #30
   b5490:	d404      	bmi.n	b549c <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b5492:	7823      	ldrb	r3, [r4, #0]
   b5494:	f023 0301 	bic.w	r3, r3, #1
   b5498:	7023      	strb	r3, [r4, #0]
   b549a:	e7f4      	b.n	b5486 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b549c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b54a0:	6919      	ldr	r1, [r3, #16]
   b54a2:	4401      	add	r1, r0
   b54a4:	6818      	ldr	r0, [r3, #0]
   b54a6:	f000 fb72 	bl	b5b8e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b54aa:	2800      	cmp	r0, #0
   b54ac:	d1f1      	bne.n	b5492 <_ZN8FatCache4syncEv+0x2e>
   b54ae:	e7e9      	b.n	b5484 <_ZN8FatCache4syncEv+0x20>
  return true;
   b54b0:	2501      	movs	r5, #1
   b54b2:	e7e8      	b.n	b5486 <_ZN8FatCache4syncEv+0x22>

000b54b4 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b54b4:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b54b6:	6883      	ldr	r3, [r0, #8]
   b54b8:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b54ba:	4604      	mov	r4, r0
   b54bc:	460e      	mov	r6, r1
   b54be:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b54c0:	d009      	beq.n	b54d6 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b54c2:	f7ff ffcf 	bl	b5464 <_ZN8FatCache4syncEv>
   b54c6:	b908      	cbnz	r0, b54cc <_ZN8FatCache4readEmh+0x18>
  return 0;
   b54c8:	2000      	movs	r0, #0
}
   b54ca:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b54cc:	076b      	lsls	r3, r5, #29
   b54ce:	d50a      	bpl.n	b54e6 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b54d0:	2300      	movs	r3, #0
   b54d2:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b54d4:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b54d6:	7822      	ldrb	r2, [r4, #0]
   b54d8:	f005 0503 	and.w	r5, r5, #3
   b54dc:	4620      	mov	r0, r4
   b54de:	4315      	orrs	r5, r2
   b54e0:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b54e4:	e7f1      	b.n	b54ca <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b54e6:	6863      	ldr	r3, [r4, #4]
   b54e8:	f104 020c 	add.w	r2, r4, #12
   b54ec:	6818      	ldr	r0, [r3, #0]
   b54ee:	4631      	mov	r1, r6
   b54f0:	f000 fac4 	bl	b5a7c <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b54f4:	2800      	cmp	r0, #0
   b54f6:	d1eb      	bne.n	b54d0 <_ZN8FatCache4readEmh+0x1c>
   b54f8:	e7e6      	b.n	b54c8 <_ZN8FatCache4readEmh+0x14>

000b54fa <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b54fa:	7983      	ldrb	r3, [r0, #6]
   b54fc:	6940      	ldr	r0, [r0, #20]
   b54fe:	3902      	subs	r1, #2
   b5500:	4099      	lsls	r1, r3
}
   b5502:	4408      	add	r0, r1
   b5504:	4770      	bx	lr

000b5506 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b5506:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b5508:	b570      	push	{r4, r5, r6, lr}
   b550a:	4605      	mov	r5, r0
   b550c:	460c      	mov	r4, r1
   b550e:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b5510:	d802      	bhi.n	b5518 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b5512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b5516:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b5518:	69c3      	ldr	r3, [r0, #28]
   b551a:	428b      	cmp	r3, r1
   b551c:	d3f9      	bcc.n	b5512 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b551e:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b5520:	2b20      	cmp	r3, #32
   b5522:	d116      	bne.n	b5552 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b5524:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b5526:	2202      	movs	r2, #2
   b5528:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b552c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5530:	f7ff ffc0 	bl	b54b4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5534:	2800      	cmp	r0, #0
   b5536:	d0ec      	beq.n	b5512 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b5538:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b553c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b5540:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b5544:	69ea      	ldr	r2, [r5, #28]
   b5546:	429a      	cmp	r2, r3
  *value = next;
   b5548:	bf26      	itte	cs
   b554a:	6033      	strcs	r3, [r6, #0]
  return 1;
   b554c:	2001      	movcs	r0, #1
    return 0;
   b554e:	2000      	movcc	r0, #0
   b5550:	e7e1      	b.n	b5516 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b5552:	2b10      	cmp	r3, #16
   b5554:	d1dd      	bne.n	b5512 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b5556:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b555a:	6981      	ldr	r1, [r0, #24]
   b555c:	2202      	movs	r2, #2
   b555e:	4419      	add	r1, r3
   b5560:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5564:	f7ff ffa6 	bl	b54b4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5568:	2800      	cmp	r0, #0
   b556a:	d0d2      	beq.n	b5512 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b556c:	b2e4      	uxtb	r4, r4
   b556e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b5572:	e7e7      	b.n	b5544 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b5574 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b5574:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b5576:	b538      	push	{r3, r4, r5, lr}
   b5578:	460c      	mov	r4, r1
   b557a:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b557c:	d801      	bhi.n	b5582 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b557e:	2000      	movs	r0, #0
}
   b5580:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b5582:	69c3      	ldr	r3, [r0, #28]
   b5584:	428b      	cmp	r3, r1
   b5586:	d3fa      	bcc.n	b557e <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b5588:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b558a:	2b20      	cmp	r3, #32
   b558c:	d10f      	bne.n	b55ae <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b558e:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b5590:	2203      	movs	r2, #3
   b5592:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b5596:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b559a:	f7ff ff8b 	bl	b54b4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b559e:	2800      	cmp	r0, #0
   b55a0:	d0ed      	beq.n	b557e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b55a2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b55a6:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b55aa:	2001      	movs	r0, #1
   b55ac:	e7e8      	b.n	b5580 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b55ae:	2b10      	cmp	r3, #16
   b55b0:	d1e5      	bne.n	b557e <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b55b2:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b55b6:	6981      	ldr	r1, [r0, #24]
   b55b8:	2203      	movs	r2, #3
   b55ba:	4419      	add	r1, r3
   b55bc:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b55c0:	f7ff ff78 	bl	b54b4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b55c4:	2800      	cmp	r0, #0
   b55c6:	d0da      	beq.n	b557e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b55c8:	b2e4      	uxtb	r4, r4
   b55ca:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b55ce:	e7ec      	b.n	b55aa <_ZN9FatVolume6fatPutEmm+0x36>

000b55d0 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b55d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b55d4:	68c4      	ldr	r4, [r0, #12]
   b55d6:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b55d8:	4605      	mov	r5, r0
   b55da:	460e      	mov	r6, r1
   b55dc:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b55de:	d301      	bcc.n	b55e4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b55e0:	2701      	movs	r7, #1
   b55e2:	e001      	b.n	b55e8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b55e4:	460c      	mov	r4, r1
    setStart = false;
   b55e6:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b55e8:	69eb      	ldr	r3, [r5, #28]
    find++;
   b55ea:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b55ec:	42a3      	cmp	r3, r4
   b55ee:	d202      	bcs.n	b55f6 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b55f0:	b9c7      	cbnz	r7, b5624 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b55f2:	68ec      	ldr	r4, [r5, #12]
   b55f4:	e7f4      	b.n	b55e0 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b55f6:	42a6      	cmp	r6, r4
   b55f8:	d014      	beq.n	b5624 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b55fa:	aa01      	add	r2, sp, #4
   b55fc:	4621      	mov	r1, r4
   b55fe:	4628      	mov	r0, r5
   b5600:	f7ff ff81 	bl	b5506 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b5604:	2800      	cmp	r0, #0
   b5606:	db0d      	blt.n	b5624 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b5608:	d0ee      	beq.n	b55e8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b560a:	9b01      	ldr	r3, [sp, #4]
   b560c:	2b00      	cmp	r3, #0
   b560e:	d1eb      	bne.n	b55e8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b5610:	b107      	cbz	r7, b5614 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b5612:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b5614:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b5618:	4621      	mov	r1, r4
   b561a:	4628      	mov	r0, r5
   b561c:	f7ff ffaa 	bl	b5574 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b5620:	4607      	mov	r7, r0
   b5622:	b920      	cbnz	r0, b562e <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b5624:	2700      	movs	r7, #0
}
   b5626:	4638      	mov	r0, r7
   b5628:	b002      	add	sp, #8
   b562a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b562e:	b916      	cbnz	r6, b5636 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b5630:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b5634:	e7f7      	b.n	b5626 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b5636:	4622      	mov	r2, r4
   b5638:	4631      	mov	r1, r6
   b563a:	4628      	mov	r0, r5
   b563c:	f7ff ff9a 	bl	b5574 <_ZN9FatVolume6fatPutEmm>
   b5640:	2800      	cmp	r0, #0
   b5642:	d1f5      	bne.n	b5630 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b5644:	e7ee      	b.n	b5624 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b5646 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b5646:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5648:	4605      	mov	r5, r0
   b564a:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b564c:	aa01      	add	r2, sp, #4
   b564e:	4621      	mov	r1, r4
   b5650:	4628      	mov	r0, r5
   b5652:	f7ff ff58 	bl	b5506 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b5656:	1e06      	subs	r6, r0, #0
   b5658:	db10      	blt.n	b567c <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b565a:	2200      	movs	r2, #0
   b565c:	4621      	mov	r1, r4
   b565e:	4628      	mov	r0, r5
   b5660:	f7ff ff88 	bl	b5574 <_ZN9FatVolume6fatPutEmm>
   b5664:	b150      	cbz	r0, b567c <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b5666:	68eb      	ldr	r3, [r5, #12]
   b5668:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b566a:	bf24      	itt	cs
   b566c:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b5670:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b5672:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b5674:	2e00      	cmp	r6, #0
   b5676:	d1e9      	bne.n	b564c <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b5678:	b002      	add	sp, #8
   b567a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b567c:	2000      	movs	r0, #0
   b567e:	e7fb      	b.n	b5678 <_ZN9FatVolume9freeChainEm+0x32>

000b5680 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b5680:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b5682:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b5684:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b5686:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b5688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b568c:	4604      	mov	r4, r0
  m_fatType = 0;
   b568e:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b5690:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b5694:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b5696:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b569a:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b569c:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b56a0:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b56a4:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b56a8:	460d      	mov	r5, r1
   b56aa:	b1b9      	cbz	r1, b56dc <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b56ac:	2904      	cmp	r1, #4
   b56ae:	d901      	bls.n	b56b4 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b56b0:	2000      	movs	r0, #0
}
   b56b2:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b56b4:	4611      	mov	r1, r2
   b56b6:	4630      	mov	r0, r6
   b56b8:	f7ff fefc 	bl	b54b4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b56bc:	2800      	cmp	r0, #0
   b56be:	d0f7      	beq.n	b56b0 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b56c0:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b56c4:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b56c8:	065b      	lsls	r3, r3, #25
   b56ca:	d1f1      	bne.n	b56b0 <_ZN9FatVolume4initEh+0x30>
   b56cc:	f105 011b 	add.w	r1, r5, #27
   b56d0:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b56d4:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b56d8:	2d00      	cmp	r5, #0
   b56da:	d0e9      	beq.n	b56b0 <_ZN9FatVolume4initEh+0x30>
   b56dc:	2200      	movs	r2, #0
   b56de:	4629      	mov	r1, r5
   b56e0:	4630      	mov	r0, r6
   b56e2:	f7ff fee7 	bl	b54b4 <_ZN8FatCache4readEmh>
  if (!pc) {
   b56e6:	2800      	cmp	r0, #0
   b56e8:	d0e2      	beq.n	b56b0 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b56ea:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b56ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b56f2:	d1dd      	bne.n	b56b0 <_ZN9FatVolume4initEh+0x30>
   b56f4:	7c03      	ldrb	r3, [r0, #16]
   b56f6:	2b02      	cmp	r3, #2
   b56f8:	d1da      	bne.n	b56b0 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b56fa:	89c3      	ldrh	r3, [r0, #14]
   b56fc:	2b00      	cmp	r3, #0
   b56fe:	d0d7      	beq.n	b56b0 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b5700:	7b41      	ldrb	r1, [r0, #13]
   b5702:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b5704:	1e4b      	subs	r3, r1, #1
   b5706:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b5708:	2300      	movs	r3, #0
   b570a:	71a3      	strb	r3, [r4, #6]
   b570c:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b570e:	2301      	movs	r3, #1
   b5710:	4299      	cmp	r1, r3
   b5712:	d007      	beq.n	b5724 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b5714:	3e01      	subs	r6, #1
   b5716:	d0cb      	beq.n	b56b0 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b5718:	79a2      	ldrb	r2, [r4, #6]
   b571a:	005b      	lsls	r3, r3, #1
   b571c:	3201      	adds	r2, #1
   b571e:	b2db      	uxtb	r3, r3
   b5720:	71a2      	strb	r2, [r4, #6]
   b5722:	e7f5      	b.n	b5710 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b5724:	8ac1      	ldrh	r1, [r0, #22]
   b5726:	b901      	cbnz	r1, b572a <_ZN9FatVolume4initEh+0xaa>
   b5728:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b572a:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b572c:	89c3      	ldrh	r3, [r0, #14]
   b572e:	442b      	add	r3, r5
   b5730:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b5732:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b5736:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b5738:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b573c:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b573e:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b5742:	0149      	lsls	r1, r1, #5
   b5744:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b5748:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b574c:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b574e:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b5752:	b902      	cbnz	r2, b5756 <_ZN9FatVolume4initEh+0xd6>
   b5754:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b5756:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b5758:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b575a:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b575c:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b575e:	1c4b      	adds	r3, r1, #1
   b5760:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b5762:	f640 73f4 	movw	r3, #4084	; 0xff4
   b5766:	4299      	cmp	r1, r3
   b5768:	d802      	bhi.n	b5770 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b576a:	230c      	movs	r3, #12
   b576c:	71e3      	strb	r3, [r4, #7]
   b576e:	e79f      	b.n	b56b0 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b5770:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b5774:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b5776:	bf85      	ittet	hi
   b5778:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b577a:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b577c:	2310      	movls	r3, #16
    m_fatType = 32;
   b577e:	2320      	movhi	r3, #32
   b5780:	71e3      	strb	r3, [r4, #7]
  return true;
   b5782:	2001      	movs	r0, #1
   b5784:	e795      	b.n	b56b2 <_ZN9FatVolume4initEh+0x32>

000b5786 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b5786:	f000 bacb 	b.w	b5d20 <_ZN14SdSpiAltDriver4sendEh>

000b578a <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b578a:	f000 baae 	b.w	b5cea <_ZN14SdSpiAltDriver7receiveEv>
	...

000b5790 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b5790:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b5792:	4e0e      	ldr	r6, [pc, #56]	; (b57cc <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b5794:	460d      	mov	r5, r1
   b5796:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b5798:	f000 faea 	bl	b5d70 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b579c:	6833      	ldr	r3, [r6, #0]
   b579e:	1ac0      	subs	r0, r0, r3
   b57a0:	4b0b      	ldr	r3, [pc, #44]	; (b57d0 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b57a2:	4298      	cmp	r0, r3
   b57a4:	d908      	bls.n	b57b8 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b57a6:	f000 faeb 	bl	b5d80 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b57aa:	4b0a      	ldr	r3, [pc, #40]	; (b57d4 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b57ac:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
            application_checkin();
            return spark_process();
   b57ae:	f000 fcbf 	bl	b6130 <spark_process>
   b57b2:	f000 fadd 	bl	b5d70 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b57b6:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b57b8:	f000 fae2 	bl	b5d80 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b57bc:	b280      	uxth	r0, r0
   b57be:	1b40      	subs	r0, r0, r5
}
   b57c0:	42a0      	cmp	r0, r4
   b57c2:	bfd4      	ite	le
   b57c4:	2000      	movle	r0, #0
   b57c6:	2001      	movgt	r0, #1
   b57c8:	bd70      	pop	{r4, r5, r6, pc}
   b57ca:	bf00      	nop
   b57cc:	2003e67c 	.word	0x2003e67c
   b57d0:	000186a0 	.word	0x000186a0
   b57d4:	2003e710 	.word	0x2003e710

000b57d8 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b57d8:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b57da:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b57dc:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b57de:	b94d      	cbnz	r5, b57f4 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b57e0:	6840      	ldr	r0, [r0, #4]
   b57e2:	f000 fa6b 	bl	b5cbc <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b57e6:	6863      	ldr	r3, [r4, #4]
   b57e8:	4629      	mov	r1, r5
   b57ea:	7d18      	ldrb	r0, [r3, #20]
   b57ec:	f001 fd37 	bl	b725e <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b57f0:	2301      	movs	r3, #1
   b57f2:	7223      	strb	r3, [r4, #8]
  }
}
   b57f4:	bd38      	pop	{r3, r4, r5, pc}

000b57f6 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b57f6:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b57f8:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b57fa:	4604      	mov	r4, r0
  if (m_spiActive) {
   b57fc:	b16b      	cbz	r3, b581a <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b57fe:	6843      	ldr	r3, [r0, #4]
   b5800:	2101      	movs	r1, #1
   b5802:	7d18      	ldrb	r0, [r3, #20]
   b5804:	f001 fd2b 	bl	b725e <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b5808:	6860      	ldr	r0, [r4, #4]
   b580a:	21ff      	movs	r1, #255	; 0xff
   b580c:	f7ff ffbb 	bl	b5786 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b5810:	6860      	ldr	r0, [r4, #4]
   b5812:	f000 fa67 	bl	b5ce4 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b5816:	2300      	movs	r3, #0
   b5818:	7223      	strb	r3, [r4, #8]
  }
}
   b581a:	bd10      	pop	{r4, pc}

000b581c <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b581e:	4604      	mov	r4, r0
   b5820:	460d      	mov	r5, r1
   b5822:	4616      	mov	r6, r2
   b5824:	f000 faac 	bl	b5d80 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b5828:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b582a:	6860      	ldr	r0, [r4, #4]
   b582c:	f7ff ffad 	bl	b578a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5830:	28ff      	cmp	r0, #255	; 0xff
   b5832:	7260      	strb	r0, [r4, #9]
   b5834:	d10e      	bne.n	b5854 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b5836:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b583a:	4639      	mov	r1, r7
   b583c:	4620      	mov	r0, r4
   b583e:	f7ff ffa7 	bl	b5790 <_ZN9SdSpiCard10isTimedOutEtt>
   b5842:	2800      	cmp	r0, #0
   b5844:	d0f1      	beq.n	b582a <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b5846:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b5848:	4620      	mov	r0, r4
   b584a:	7023      	strb	r3, [r4, #0]
   b584c:	f7ff ffd3 	bl	b57f6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5850:	2000      	movs	r0, #0
}
   b5852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b5854:	28fe      	cmp	r0, #254	; 0xfe
   b5856:	d001      	beq.n	b585c <_ZN9SdSpiCard8readDataEPhj+0x40>
   b5858:	2350      	movs	r3, #80	; 0x50
   b585a:	e7f5      	b.n	b5848 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b585c:	6860      	ldr	r0, [r4, #4]
   b585e:	4632      	mov	r2, r6
   b5860:	4629      	mov	r1, r5
   b5862:	f000 fa47 	bl	b5cf4 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b5866:	7260      	strb	r0, [r4, #9]
   b5868:	b108      	cbz	r0, b586e <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b586a:	2360      	movs	r3, #96	; 0x60
   b586c:	e7ec      	b.n	b5848 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b586e:	6860      	ldr	r0, [r4, #4]
   b5870:	f7ff ff8b 	bl	b578a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b5874:	6860      	ldr	r0, [r4, #4]
   b5876:	f7ff ff88 	bl	b578a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b587a:	2001      	movs	r0, #1
   b587c:	e7e9      	b.n	b5852 <_ZN9SdSpiCard8readDataEPhj+0x36>

000b587e <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b587e:	b570      	push	{r4, r5, r6, lr}
   b5880:	4604      	mov	r4, r0
   b5882:	460e      	mov	r6, r1
   b5884:	f000 fa7c 	bl	b5d80 <HAL_Timer_Get_Milli_Seconds>
   b5888:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b588a:	4632      	mov	r2, r6
   b588c:	4629      	mov	r1, r5
   b588e:	4620      	mov	r0, r4
   b5890:	f7ff ff7e 	bl	b5790 <_ZN9SdSpiCard10isTimedOutEtt>
   b5894:	b930      	cbnz	r0, b58a4 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b5896:	6860      	ldr	r0, [r4, #4]
   b5898:	f7ff ff77 	bl	b578a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b589c:	28ff      	cmp	r0, #255	; 0xff
   b589e:	d1f4      	bne.n	b588a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b58a0:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b58a2:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b58a4:	2000      	movs	r0, #0
   b58a6:	e7fc      	b.n	b58a2 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b58a8 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b58a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b58aa:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b58ac:	9201      	str	r2, [sp, #4]
   b58ae:	4604      	mov	r4, r0
   b58b0:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b58b2:	b90b      	cbnz	r3, b58b8 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b58b4:	f7ff ff90 	bl	b57d8 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b58b8:	b125      	cbz	r5, b58c4 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b58ba:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b58be:	4620      	mov	r0, r4
   b58c0:	f7ff ffdd 	bl	b587e <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b58c4:	6860      	ldr	r0, [r4, #4]
   b58c6:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b58ca:	f7ff ff5c 	bl	b5786 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b58ce:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b58d0:	af01      	add	r7, sp, #4
   b58d2:	5db9      	ldrb	r1, [r7, r6]
   b58d4:	6860      	ldr	r0, [r4, #4]
   b58d6:	f7ff ff56 	bl	b5786 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b58da:	3e01      	subs	r6, #1
   b58dc:	d2f9      	bcs.n	b58d2 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b58de:	2d00      	cmp	r5, #0
   b58e0:	6860      	ldr	r0, [r4, #4]
   b58e2:	bf0c      	ite	eq
   b58e4:	2195      	moveq	r1, #149	; 0x95
   b58e6:	2187      	movne	r1, #135	; 0x87
   b58e8:	f7ff ff4d 	bl	b5786 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b58ec:	6860      	ldr	r0, [r4, #4]
   b58ee:	f7ff ff4c 	bl	b578a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b58f2:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b58f4:	6860      	ldr	r0, [r4, #4]
   b58f6:	f7ff ff48 	bl	b578a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b58fa:	0603      	lsls	r3, r0, #24
   b58fc:	7260      	strb	r0, [r4, #9]
   b58fe:	d503      	bpl.n	b5908 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b5900:	3d01      	subs	r5, #1
   b5902:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b5906:	d1f5      	bne.n	b58f4 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b5908:	b003      	add	sp, #12
   b590a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b590c <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b590c:	b570      	push	{r4, r5, r6, lr}
   b590e:	4604      	mov	r4, r0
   b5910:	460d      	mov	r5, r1
   b5912:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b5914:	2137      	movs	r1, #55	; 0x37
   b5916:	2200      	movs	r2, #0
   b5918:	f7ff ffc6 	bl	b58a8 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b591c:	4632      	mov	r2, r6
   b591e:	4629      	mov	r1, r5
   b5920:	4620      	mov	r0, r4
  }
   b5922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b5926:	f7ff bfbf 	b.w	b58a8 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b592c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b592c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b5930:	2500      	movs	r5, #0
   b5932:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b5934:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b5936:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b5938:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b593a:	4604      	mov	r4, r0
   b593c:	4690      	mov	r8, r2
   b593e:	461e      	mov	r6, r3
   b5940:	f000 fa1e 	bl	b5d80 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b5944:	4641      	mov	r1, r8
   b5946:	4607      	mov	r7, r0
   b5948:	6860      	ldr	r0, [r4, #4]
   b594a:	f000 f9bb 	bl	b5cc4 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b594e:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b5950:	4a49      	ldr	r2, [pc, #292]	; (b5a78 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b5952:	721d      	strb	r5, [r3, #8]
   b5954:	2501      	movs	r5, #1
   b5956:	60da      	str	r2, [r3, #12]
   b5958:	821d      	strh	r5, [r3, #16]
  spiStart();
   b595a:	4620      	mov	r0, r4
   b595c:	f7ff ff3c 	bl	b57d8 <_ZN9SdSpiCard8spiStartEv>
   b5960:	6863      	ldr	r3, [r4, #4]
   b5962:	4629      	mov	r1, r5
   b5964:	7d18      	ldrb	r0, [r3, #20]
   b5966:	f001 fc7a 	bl	b725e <digitalWrite>
   b596a:	250a      	movs	r5, #10
    spiSend(0XFF);
   b596c:	6860      	ldr	r0, [r4, #4]
   b596e:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b5970:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b5972:	f7ff ff08 	bl	b5786 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b5976:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b597a:	d1f7      	bne.n	b596c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b597c:	6863      	ldr	r3, [r4, #4]
   b597e:	4629      	mov	r1, r5
   b5980:	7d18      	ldrb	r0, [r3, #20]
   b5982:	f001 fc6c 	bl	b725e <digitalWrite>
  }
   b5986:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b5988:	2200      	movs	r2, #0
   b598a:	4611      	mov	r1, r2
   b598c:	4620      	mov	r0, r4
   b598e:	f7ff ff8b 	bl	b58a8 <_ZN9SdSpiCard11cardCommandEhm>
   b5992:	2801      	cmp	r0, #1
   b5994:	4680      	mov	r8, r0
   b5996:	d018      	beq.n	b59ca <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b5998:	3d01      	subs	r5, #1
   b599a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b599e:	d107      	bne.n	b59b0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b59a0:	2320      	movs	r3, #32
  spiStop();
   b59a2:	4620      	mov	r0, r4
   b59a4:	7023      	strb	r3, [r4, #0]
   b59a6:	f7ff ff26 	bl	b57f6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b59aa:	2000      	movs	r0, #0
}
   b59ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b59b0:	6860      	ldr	r0, [r4, #4]
   b59b2:	21fd      	movs	r1, #253	; 0xfd
   b59b4:	f7ff fee7 	bl	b5786 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b59b8:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b59bc:	6860      	ldr	r0, [r4, #4]
   b59be:	f7ff fee4 	bl	b578a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b59c2:	f1b8 0801 	subs.w	r8, r8, #1
   b59c6:	d1f9      	bne.n	b59bc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b59c8:	e7de      	b.n	b5988 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b59ca:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b59ce:	2108      	movs	r1, #8
   b59d0:	4620      	mov	r0, r4
   b59d2:	f7ff ff69 	bl	b58a8 <_ZN9SdSpiCard11cardCommandEhm>
   b59d6:	2805      	cmp	r0, #5
   b59d8:	d114      	bne.n	b5a04 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b59da:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b59de:	2500      	movs	r5, #0
   b59e0:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b59e2:	462a      	mov	r2, r5
   b59e4:	2129      	movs	r1, #41	; 0x29
   b59e6:	4620      	mov	r0, r4
   b59e8:	f7ff ff90 	bl	b590c <_ZN9SdSpiCard8cardAcmdEhm>
   b59ec:	4602      	mov	r2, r0
   b59ee:	b1d8      	cbz	r0, b5a28 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b59f0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b59f4:	4639      	mov	r1, r7
   b59f6:	4620      	mov	r0, r4
   b59f8:	f7ff feca 	bl	b5790 <_ZN9SdSpiCard10isTimedOutEtt>
   b59fc:	2800      	cmp	r0, #0
   b59fe:	d0f0      	beq.n	b59e2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b5a00:	2343      	movs	r3, #67	; 0x43
   b5a02:	e7ce      	b.n	b59a2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b5a04:	2504      	movs	r5, #4
      m_status = spiReceive();
   b5a06:	6860      	ldr	r0, [r4, #4]
   b5a08:	f7ff febf 	bl	b578a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b5a0c:	3d01      	subs	r5, #1
   b5a0e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b5a12:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b5a14:	d1f7      	bne.n	b5a06 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b5a16:	28aa      	cmp	r0, #170	; 0xaa
   b5a18:	d104      	bne.n	b5a24 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b5a1a:	2302      	movs	r3, #2
   b5a1c:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b5a1e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b5a22:	e7dd      	b.n	b59e0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b5a24:	2325      	movs	r3, #37	; 0x25
   b5a26:	e7bc      	b.n	b59a2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b5a28:	7aa3      	ldrb	r3, [r4, #10]
   b5a2a:	2b02      	cmp	r3, #2
   b5a2c:	d118      	bne.n	b5a60 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b5a2e:	213a      	movs	r1, #58	; 0x3a
   b5a30:	4620      	mov	r0, r4
   b5a32:	f7ff ff39 	bl	b58a8 <_ZN9SdSpiCard11cardCommandEhm>
   b5a36:	b108      	cbz	r0, b5a3c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b5a38:	2337      	movs	r3, #55	; 0x37
   b5a3a:	e7b2      	b.n	b59a2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b5a3c:	6860      	ldr	r0, [r4, #4]
   b5a3e:	f7ff fea4 	bl	b578a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5a42:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b5a46:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b5a48:	bf04      	itt	eq
   b5a4a:	2303      	moveq	r3, #3
   b5a4c:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b5a4e:	6860      	ldr	r0, [r4, #4]
   b5a50:	f7ff fe9b 	bl	b578a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5a54:	6860      	ldr	r0, [r4, #4]
   b5a56:	f7ff fe98 	bl	b578a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5a5a:	6860      	ldr	r0, [r4, #4]
   b5a5c:	f7ff fe95 	bl	b578a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b5a60:	4620      	mov	r0, r4
   b5a62:	f7ff fec8 	bl	b57f6 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b5a66:	6863      	ldr	r3, [r4, #4]
   b5a68:	7930      	ldrb	r0, [r6, #4]
   b5a6a:	68b1      	ldr	r1, [r6, #8]
   b5a6c:	89b2      	ldrh	r2, [r6, #12]
   b5a6e:	821a      	strh	r2, [r3, #16]
   b5a70:	7218      	strb	r0, [r3, #8]
   b5a72:	60d9      	str	r1, [r3, #12]
  return true;
   b5a74:	2001      	movs	r0, #1
   b5a76:	e799      	b.n	b59ac <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b5a78:	0003d090 	.word	0x0003d090

000b5a7c <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b5a7c:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b5a7e:	7a83      	ldrb	r3, [r0, #10]
   b5a80:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b5a82:	bf18      	it	ne
   b5a84:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b5a86:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b5a88:	460a      	mov	r2, r1
   b5a8a:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b5a8c:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b5a8e:	f7ff ff0b 	bl	b58a8 <_ZN9SdSpiCard11cardCommandEhm>
   b5a92:	b130      	cbz	r0, b5aa2 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b5a94:	2330      	movs	r3, #48	; 0x30
   b5a96:	7023      	strb	r3, [r4, #0]
  spiStop();
   b5a98:	4620      	mov	r0, r4
   b5a9a:	f7ff feac 	bl	b57f6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5a9e:	2500      	movs	r5, #0
   b5aa0:	e00b      	b.n	b5aba <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b5aa2:	4629      	mov	r1, r5
   b5aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
   b5aa8:	4620      	mov	r0, r4
   b5aaa:	f7ff feb7 	bl	b581c <_ZN9SdSpiCard8readDataEPhj>
   b5aae:	4605      	mov	r5, r0
   b5ab0:	2800      	cmp	r0, #0
   b5ab2:	d0f1      	beq.n	b5a98 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b5ab4:	4620      	mov	r0, r4
   b5ab6:	f7ff fe9e 	bl	b57f6 <_ZN9SdSpiCard7spiStopEv>
}
   b5aba:	4628      	mov	r0, r5
   b5abc:	bd38      	pop	{r3, r4, r5, pc}

000b5abe <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b5abe:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b5ac0:	7a83      	ldrb	r3, [r0, #10]
   b5ac2:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b5ac4:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b5ac6:	bf18      	it	ne
   b5ac8:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b5aca:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b5acc:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b5ace:	f7ff feeb 	bl	b58a8 <_ZN9SdSpiCard11cardCommandEhm>
   b5ad2:	b130      	cbz	r0, b5ae2 <_ZN9SdSpiCard9readStartEm+0x24>
   b5ad4:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b5ad6:	4620      	mov	r0, r4
   b5ad8:	7023      	strb	r3, [r4, #0]
   b5ada:	f7ff fe8c 	bl	b57f6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5ade:	2000      	movs	r0, #0
}
   b5ae0:	bd10      	pop	{r4, pc}
  return true;
   b5ae2:	2001      	movs	r0, #1
   b5ae4:	e7fc      	b.n	b5ae0 <_ZN9SdSpiCard9readStartEm+0x22>

000b5ae6 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b5ae6:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b5ae8:	2200      	movs	r2, #0
   b5aea:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b5aec:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b5aee:	f7ff fedb 	bl	b58a8 <_ZN9SdSpiCard11cardCommandEhm>
   b5af2:	b130      	cbz	r0, b5b02 <_ZN9SdSpiCard8readStopEv+0x1c>
   b5af4:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b5af6:	4620      	mov	r0, r4
   b5af8:	7023      	strb	r3, [r4, #0]
   b5afa:	f7ff fe7c 	bl	b57f6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5afe:	2000      	movs	r0, #0
}
   b5b00:	bd10      	pop	{r4, pc}
  spiStop();
   b5b02:	4620      	mov	r0, r4
   b5b04:	f7ff fe77 	bl	b57f6 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b5b08:	2001      	movs	r0, #1
   b5b0a:	e7f9      	b.n	b5b00 <_ZN9SdSpiCard8readStopEv+0x1a>

000b5b0c <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b5b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b0e:	4604      	mov	r4, r0
   b5b10:	4616      	mov	r6, r2
   b5b12:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b5b14:	f7ff ffd3 	bl	b5abe <_ZN9SdSpiCard9readStartEm>
   b5b18:	b168      	cbz	r0, b5b36 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b5b1a:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b5b1c:	b2ab      	uxth	r3, r5
   b5b1e:	429f      	cmp	r7, r3
   b5b20:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b5b24:	d909      	bls.n	b5b3a <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b5b26:	f44f 7200 	mov.w	r2, #512	; 0x200
   b5b2a:	4620      	mov	r0, r4
   b5b2c:	f7ff fe76 	bl	b581c <_ZN9SdSpiCard8readDataEPhj>
   b5b30:	3501      	adds	r5, #1
   b5b32:	2800      	cmp	r0, #0
   b5b34:	d1f2      	bne.n	b5b1c <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b5b36:	2000      	movs	r0, #0
   b5b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b5b3a:	4620      	mov	r0, r4
}
   b5b3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b5b40:	f7ff bfd1 	b.w	b5ae6 <_ZN9SdSpiCard8readStopEv>

000b5b44 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b5b44:	b538      	push	{r3, r4, r5, lr}
   b5b46:	4604      	mov	r4, r0
   b5b48:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b5b4a:	6840      	ldr	r0, [r0, #4]
   b5b4c:	f7ff fe1b 	bl	b5786 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b5b50:	f44f 7200 	mov.w	r2, #512	; 0x200
   b5b54:	6860      	ldr	r0, [r4, #4]
   b5b56:	4629      	mov	r1, r5
   b5b58:	f000 f8e6 	bl	b5d28 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b5b5c:	6860      	ldr	r0, [r4, #4]
   b5b5e:	21ff      	movs	r1, #255	; 0xff
   b5b60:	f7ff fe11 	bl	b5786 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b5b64:	6860      	ldr	r0, [r4, #4]
   b5b66:	21ff      	movs	r1, #255	; 0xff
   b5b68:	f7ff fe0d 	bl	b5786 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b5b6c:	6860      	ldr	r0, [r4, #4]
   b5b6e:	f7ff fe0c 	bl	b578a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5b72:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b5b74:	f000 001f 	and.w	r0, r0, #31
   b5b78:	2805      	cmp	r0, #5
   b5b7a:	d006      	beq.n	b5b8a <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b5b7c:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b5b7e:	4620      	mov	r0, r4
   b5b80:	7023      	strb	r3, [r4, #0]
   b5b82:	f7ff fe38 	bl	b57f6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5b86:	2000      	movs	r0, #0
}
   b5b88:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b5b8a:	2001      	movs	r0, #1
   b5b8c:	e7fc      	b.n	b5b88 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b5b8e <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b5b8e:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b5b90:	7a83      	ldrb	r3, [r0, #10]
   b5b92:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b5b94:	bf18      	it	ne
   b5b96:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b5b98:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b5b9a:	460a      	mov	r2, r1
   b5b9c:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b5b9e:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b5ba0:	f7ff fe82 	bl	b58a8 <_ZN9SdSpiCard11cardCommandEhm>
   b5ba4:	4606      	mov	r6, r0
   b5ba6:	b130      	cbz	r0, b5bb6 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b5ba8:	2332      	movs	r3, #50	; 0x32
   b5baa:	7023      	strb	r3, [r4, #0]
  spiStop();
   b5bac:	4620      	mov	r0, r4
   b5bae:	f7ff fe22 	bl	b57f6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5bb2:	2500      	movs	r5, #0
   b5bb4:	e01f      	b.n	b5bf6 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b5bb6:	462a      	mov	r2, r5
   b5bb8:	21fe      	movs	r1, #254	; 0xfe
   b5bba:	4620      	mov	r0, r4
   b5bbc:	f7ff ffc2 	bl	b5b44 <_ZN9SdSpiCard9writeDataEhPKh>
   b5bc0:	2800      	cmp	r0, #0
   b5bc2:	d0f3      	beq.n	b5bac <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b5bc4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b5bc8:	4620      	mov	r0, r4
   b5bca:	f7ff fe58 	bl	b587e <_ZN9SdSpiCard11waitNotBusyEt>
   b5bce:	4605      	mov	r5, r0
   b5bd0:	b908      	cbnz	r0, b5bd6 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b5bd2:	235a      	movs	r3, #90	; 0x5a
   b5bd4:	e7e9      	b.n	b5baa <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b5bd6:	4632      	mov	r2, r6
   b5bd8:	210d      	movs	r1, #13
   b5bda:	4620      	mov	r0, r4
   b5bdc:	f7ff fe64 	bl	b58a8 <_ZN9SdSpiCard11cardCommandEhm>
   b5be0:	b108      	cbz	r0, b5be6 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b5be2:	2329      	movs	r3, #41	; 0x29
   b5be4:	e7e1      	b.n	b5baa <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b5be6:	6860      	ldr	r0, [r4, #4]
   b5be8:	f7ff fdcf 	bl	b578a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5bec:	2800      	cmp	r0, #0
   b5bee:	d1f8      	bne.n	b5be2 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b5bf0:	4620      	mov	r0, r4
   b5bf2:	f7ff fe00 	bl	b57f6 <_ZN9SdSpiCard7spiStopEv>
}
   b5bf6:	4628      	mov	r0, r5
   b5bf8:	bd70      	pop	{r4, r5, r6, pc}

000b5bfa <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b5bfa:	b513      	push	{r0, r1, r4, lr}
   b5bfc:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b5bfe:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b5c02:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b5c04:	f7ff fe3b 	bl	b587e <_ZN9SdSpiCard11waitNotBusyEt>
   b5c08:	9a01      	ldr	r2, [sp, #4]
   b5c0a:	b930      	cbnz	r0, b5c1a <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b5c0c:	235b      	movs	r3, #91	; 0x5b
   b5c0e:	7023      	strb	r3, [r4, #0]
  spiStop();
   b5c10:	4620      	mov	r0, r4
   b5c12:	f7ff fdf0 	bl	b57f6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5c16:	2000      	movs	r0, #0
   b5c18:	e005      	b.n	b5c26 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b5c1a:	21fc      	movs	r1, #252	; 0xfc
   b5c1c:	4620      	mov	r0, r4
   b5c1e:	f7ff ff91 	bl	b5b44 <_ZN9SdSpiCard9writeDataEhPKh>
   b5c22:	2800      	cmp	r0, #0
   b5c24:	d0f4      	beq.n	b5c10 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b5c26:	b002      	add	sp, #8
   b5c28:	bd10      	pop	{r4, pc}

000b5c2a <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b5c2a:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b5c2c:	7a83      	ldrb	r3, [r0, #10]
   b5c2e:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b5c30:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b5c32:	bf18      	it	ne
   b5c34:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b5c36:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b5c38:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b5c3a:	f7ff fe35 	bl	b58a8 <_ZN9SdSpiCard11cardCommandEhm>
   b5c3e:	b130      	cbz	r0, b5c4e <_ZN9SdSpiCard10writeStartEm+0x24>
   b5c40:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b5c42:	4620      	mov	r0, r4
   b5c44:	7023      	strb	r3, [r4, #0]
   b5c46:	f7ff fdd6 	bl	b57f6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5c4a:	2000      	movs	r0, #0
}
   b5c4c:	bd10      	pop	{r4, pc}
  return true;
   b5c4e:	2001      	movs	r0, #1
   b5c50:	e7fc      	b.n	b5c4c <_ZN9SdSpiCard10writeStartEm+0x22>

000b5c52 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b5c52:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b5c54:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b5c58:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b5c5a:	f7ff fe10 	bl	b587e <_ZN9SdSpiCard11waitNotBusyEt>
   b5c5e:	4605      	mov	r5, r0
   b5c60:	b930      	cbnz	r0, b5c70 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b5c62:	2356      	movs	r3, #86	; 0x56
   b5c64:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b5c66:	4620      	mov	r0, r4
   b5c68:	f7ff fdc5 	bl	b57f6 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b5c6c:	4628      	mov	r0, r5
   b5c6e:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b5c70:	6860      	ldr	r0, [r4, #4]
   b5c72:	21fd      	movs	r1, #253	; 0xfd
   b5c74:	f7ff fd87 	bl	b5786 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b5c78:	e7f5      	b.n	b5c66 <_ZN9SdSpiCard9writeStopEv+0x14>

000b5c7a <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b5c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5c7c:	4604      	mov	r4, r0
   b5c7e:	4616      	mov	r6, r2
   b5c80:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b5c82:	f7ff ffd2 	bl	b5c2a <_ZN9SdSpiCard10writeStartEm>
   b5c86:	b170      	cbz	r0, b5ca6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b5c88:	2500      	movs	r5, #0
   b5c8a:	42bd      	cmp	r5, r7
   b5c8c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b5c90:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b5c92:	d004      	beq.n	b5c9e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b5c94:	f7ff ffb1 	bl	b5bfa <_ZN9SdSpiCard9writeDataEPKh>
   b5c98:	b128      	cbz	r0, b5ca6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b5c9a:	3501      	adds	r5, #1
   b5c9c:	e7f5      	b.n	b5c8a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b5c9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b5ca2:	f7ff bfd6 	b.w	b5c52 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b5ca6:	4620      	mov	r0, r4
   b5ca8:	f7ff fda5 	bl	b57f6 <_ZN9SdSpiCard7spiStopEv>
}
   b5cac:	2000      	movs	r0, #0
   b5cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5cb0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b5cb0:	4b01      	ldr	r3, [pc, #4]	; (b5cb8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b5cb2:	2201      	movs	r2, #1
   b5cb4:	701a      	strb	r2, [r3, #0]
}
   b5cb6:	4770      	bx	lr
   b5cb8:	2003e680 	.word	0x2003e680

000b5cbc <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b5cbc:	1d01      	adds	r1, r0, #4
   b5cbe:	6800      	ldr	r0, [r0, #0]
   b5cc0:	f000 bfa0 	b.w	b6c04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b5cc4 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b5cc4:	b510      	push	{r4, lr}
   b5cc6:	4604      	mov	r4, r0
  m_csPin = csPin;
   b5cc8:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b5cca:	6800      	ldr	r0, [r0, #0]
   b5ccc:	f000 ff6c 	bl	b6ba8 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b5cd0:	7d20      	ldrb	r0, [r4, #20]
   b5cd2:	2101      	movs	r1, #1
   b5cd4:	f001 fab2 	bl	b723c <pinMode>
  digitalWrite(m_csPin, HIGH);
   b5cd8:	7d20      	ldrb	r0, [r4, #20]
   b5cda:	2101      	movs	r1, #1
}
   b5cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b5ce0:	f001 babd 	b.w	b725e <digitalWrite>

000b5ce4 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b5ce4:	6800      	ldr	r0, [r0, #0]
   b5ce6:	f000 bf73 	b.w	b6bd0 <_ZN8SPIClass14endTransactionEv>

000b5cea <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b5cea:	6800      	ldr	r0, [r0, #0]
   b5cec:	21ff      	movs	r1, #255	; 0xff
   b5cee:	f000 bff7 	b.w	b6ce0 <_ZN8SPIClass8transferEh>
	...

000b5cf4 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b5cf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5cf6:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b5cf8:	4a07      	ldr	r2, [pc, #28]	; (b5d18 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b5cfa:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b5cfc:	2500      	movs	r5, #0
   b5cfe:	4c07      	ldr	r4, [pc, #28]	; (b5d1c <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b5d00:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b5d02:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b5d04:	460a      	mov	r2, r1
   b5d06:	4629      	mov	r1, r5
   b5d08:	f000 fff0 	bl	b6cec <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b5d0c:	7823      	ldrb	r3, [r4, #0]
   b5d0e:	2b00      	cmp	r3, #0
   b5d10:	d0fc      	beq.n	b5d0c <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b5d12:	2000      	movs	r0, #0
   b5d14:	b003      	add	sp, #12
   b5d16:	bd30      	pop	{r4, r5, pc}
   b5d18:	000b5cb1 	.word	0x000b5cb1
   b5d1c:	2003e680 	.word	0x2003e680

000b5d20 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b5d20:	6800      	ldr	r0, [r0, #0]
   b5d22:	f000 bfdd 	b.w	b6ce0 <_ZN8SPIClass8transferEh>
	...

000b5d28 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b5d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5d2a:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b5d2c:	4a06      	ldr	r2, [pc, #24]	; (b5d48 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b5d2e:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b5d30:	2500      	movs	r5, #0
   b5d32:	4c06      	ldr	r4, [pc, #24]	; (b5d4c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b5d34:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b5d36:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b5d38:	462a      	mov	r2, r5
   b5d3a:	f000 ffd7 	bl	b6cec <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b5d3e:	7823      	ldrb	r3, [r4, #0]
   b5d40:	2b00      	cmp	r3, #0
   b5d42:	d0fc      	beq.n	b5d3e <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b5d44:	b003      	add	sp, #12
   b5d46:	bd30      	pop	{r4, r5, pc}
   b5d48:	000b5cb1 	.word	0x000b5cb1
   b5d4c:	2003e680 	.word	0x2003e680

000b5d50 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5d50:	b508      	push	{r3, lr}
   b5d52:	4b02      	ldr	r3, [pc, #8]	; (b5d5c <os_mutex_recursive_create+0xc>)
   b5d54:	681b      	ldr	r3, [r3, #0]
   b5d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5d58:	9301      	str	r3, [sp, #4]
   b5d5a:	bd08      	pop	{r3, pc}
   b5d5c:	00030248 	.word	0x00030248

000b5d60 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5d60:	b508      	push	{r3, lr}
   b5d62:	4b02      	ldr	r3, [pc, #8]	; (b5d6c <HAL_RNG_GetRandomNumber+0xc>)
   b5d64:	681b      	ldr	r3, [r3, #0]
   b5d66:	685b      	ldr	r3, [r3, #4]
   b5d68:	9301      	str	r3, [sp, #4]
   b5d6a:	bd08      	pop	{r3, pc}
   b5d6c:	00030218 	.word	0x00030218

000b5d70 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b5d70:	b508      	push	{r3, lr}
   b5d72:	4b02      	ldr	r3, [pc, #8]	; (b5d7c <HAL_Timer_Get_Micro_Seconds+0xc>)
   b5d74:	681b      	ldr	r3, [r3, #0]
   b5d76:	691b      	ldr	r3, [r3, #16]
   b5d78:	9301      	str	r3, [sp, #4]
   b5d7a:	bd08      	pop	{r3, pc}
   b5d7c:	00030218 	.word	0x00030218

000b5d80 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5d80:	b508      	push	{r3, lr}
   b5d82:	4b02      	ldr	r3, [pc, #8]	; (b5d8c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5d84:	681b      	ldr	r3, [r3, #0]
   b5d86:	695b      	ldr	r3, [r3, #20]
   b5d88:	9301      	str	r3, [sp, #4]
   b5d8a:	bd08      	pop	{r3, pc}
   b5d8c:	00030218 	.word	0x00030218

000b5d90 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5d90:	b508      	push	{r3, lr}
   b5d92:	4b02      	ldr	r3, [pc, #8]	; (b5d9c <hal_rtc_time_is_valid+0xc>)
   b5d94:	681b      	ldr	r3, [r3, #0]
   b5d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5d98:	9301      	str	r3, [sp, #4]
   b5d9a:	bd08      	pop	{r3, pc}
   b5d9c:	00030218 	.word	0x00030218

000b5da0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5da0:	b508      	push	{r3, lr}
   b5da2:	4b02      	ldr	r3, [pc, #8]	; (b5dac <hal_rtc_get_time+0xc>)
   b5da4:	681b      	ldr	r3, [r3, #0]
   b5da6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5da8:	9301      	str	r3, [sp, #4]
   b5daa:	bd08      	pop	{r3, pc}
   b5dac:	00030218 	.word	0x00030218

000b5db0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b5db0:	b508      	push	{r3, lr}
   b5db2:	4b02      	ldr	r3, [pc, #8]	; (b5dbc <HAL_Validate_Pin_Function+0xc>)
   b5db4:	681b      	ldr	r3, [r3, #0]
   b5db6:	685b      	ldr	r3, [r3, #4]
   b5db8:	9301      	str	r3, [sp, #4]
   b5dba:	bd08      	pop	{r3, pc}
   b5dbc:	0003022c 	.word	0x0003022c

000b5dc0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5dc0:	b508      	push	{r3, lr}
   b5dc2:	4b02      	ldr	r3, [pc, #8]	; (b5dcc <HAL_Pin_Mode+0xc>)
   b5dc4:	681b      	ldr	r3, [r3, #0]
   b5dc6:	689b      	ldr	r3, [r3, #8]
   b5dc8:	9301      	str	r3, [sp, #4]
   b5dca:	bd08      	pop	{r3, pc}
   b5dcc:	0003022c 	.word	0x0003022c

000b5dd0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5dd0:	b508      	push	{r3, lr}
   b5dd2:	4b02      	ldr	r3, [pc, #8]	; (b5ddc <HAL_Get_Pin_Mode+0xc>)
   b5dd4:	681b      	ldr	r3, [r3, #0]
   b5dd6:	68db      	ldr	r3, [r3, #12]
   b5dd8:	9301      	str	r3, [sp, #4]
   b5dda:	bd08      	pop	{r3, pc}
   b5ddc:	0003022c 	.word	0x0003022c

000b5de0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5de0:	b508      	push	{r3, lr}
   b5de2:	4b02      	ldr	r3, [pc, #8]	; (b5dec <HAL_GPIO_Write+0xc>)
   b5de4:	681b      	ldr	r3, [r3, #0]
   b5de6:	691b      	ldr	r3, [r3, #16]
   b5de8:	9301      	str	r3, [sp, #4]
   b5dea:	bd08      	pop	{r3, pc}
   b5dec:	0003022c 	.word	0x0003022c

000b5df0 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b5df0:	b508      	push	{r3, lr}
   b5df2:	4b02      	ldr	r3, [pc, #8]	; (b5dfc <hal_adc_read+0xc>)
   b5df4:	681b      	ldr	r3, [r3, #0]
   b5df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5df8:	9301      	str	r3, [sp, #4]
   b5dfa:	bd08      	pop	{r3, pc}
   b5dfc:	0003022c 	.word	0x0003022c

000b5e00 <hal_i2c_begin_transmission>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5e00:	b508      	push	{r3, lr}
   b5e02:	4b02      	ldr	r3, [pc, #8]	; (b5e0c <hal_i2c_begin_transmission+0xc>)
   b5e04:	681b      	ldr	r3, [r3, #0]
   b5e06:	699b      	ldr	r3, [r3, #24]
   b5e08:	9301      	str	r3, [sp, #4]
   b5e0a:	bd08      	pop	{r3, pc}
   b5e0c:	00030228 	.word	0x00030228

000b5e10 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5e10:	b508      	push	{r3, lr}
   b5e12:	4b02      	ldr	r3, [pc, #8]	; (b5e1c <hal_i2c_end_transmission+0xc>)
   b5e14:	681b      	ldr	r3, [r3, #0]
   b5e16:	69db      	ldr	r3, [r3, #28]
   b5e18:	9301      	str	r3, [sp, #4]
   b5e1a:	bd08      	pop	{r3, pc}
   b5e1c:	00030228 	.word	0x00030228

000b5e20 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5e20:	b508      	push	{r3, lr}
   b5e22:	4b02      	ldr	r3, [pc, #8]	; (b5e2c <hal_i2c_write+0xc>)
   b5e24:	681b      	ldr	r3, [r3, #0]
   b5e26:	6a1b      	ldr	r3, [r3, #32]
   b5e28:	9301      	str	r3, [sp, #4]
   b5e2a:	bd08      	pop	{r3, pc}
   b5e2c:	00030228 	.word	0x00030228

000b5e30 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5e30:	b508      	push	{r3, lr}
   b5e32:	4b02      	ldr	r3, [pc, #8]	; (b5e3c <hal_i2c_available+0xc>)
   b5e34:	681b      	ldr	r3, [r3, #0]
   b5e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5e38:	9301      	str	r3, [sp, #4]
   b5e3a:	bd08      	pop	{r3, pc}
   b5e3c:	00030228 	.word	0x00030228

000b5e40 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5e40:	b508      	push	{r3, lr}
   b5e42:	4b02      	ldr	r3, [pc, #8]	; (b5e4c <hal_i2c_read+0xc>)
   b5e44:	681b      	ldr	r3, [r3, #0]
   b5e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5e48:	9301      	str	r3, [sp, #4]
   b5e4a:	bd08      	pop	{r3, pc}
   b5e4c:	00030228 	.word	0x00030228

000b5e50 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5e50:	b508      	push	{r3, lr}
   b5e52:	4b02      	ldr	r3, [pc, #8]	; (b5e5c <hal_i2c_peek+0xc>)
   b5e54:	681b      	ldr	r3, [r3, #0]
   b5e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5e58:	9301      	str	r3, [sp, #4]
   b5e5a:	bd08      	pop	{r3, pc}
   b5e5c:	00030228 	.word	0x00030228

000b5e60 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5e60:	b508      	push	{r3, lr}
   b5e62:	4b02      	ldr	r3, [pc, #8]	; (b5e6c <hal_i2c_flush+0xc>)
   b5e64:	681b      	ldr	r3, [r3, #0]
   b5e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5e68:	9301      	str	r3, [sp, #4]
   b5e6a:	bd08      	pop	{r3, pc}
   b5e6c:	00030228 	.word	0x00030228

000b5e70 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5e70:	b508      	push	{r3, lr}
   b5e72:	4b02      	ldr	r3, [pc, #8]	; (b5e7c <hal_i2c_is_enabled+0xc>)
   b5e74:	681b      	ldr	r3, [r3, #0]
   b5e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5e78:	9301      	str	r3, [sp, #4]
   b5e7a:	bd08      	pop	{r3, pc}
   b5e7c:	00030228 	.word	0x00030228

000b5e80 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5e80:	b508      	push	{r3, lr}
   b5e82:	4b02      	ldr	r3, [pc, #8]	; (b5e8c <hal_i2c_init+0xc>)
   b5e84:	681b      	ldr	r3, [r3, #0]
   b5e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5e88:	9301      	str	r3, [sp, #4]
   b5e8a:	bd08      	pop	{r3, pc}
   b5e8c:	00030228 	.word	0x00030228

000b5e90 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b5e90:	b508      	push	{r3, lr}
   b5e92:	4b02      	ldr	r3, [pc, #8]	; (b5e9c <hal_i2c_lock+0xc>)
   b5e94:	681b      	ldr	r3, [r3, #0]
   b5e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b5e98:	9301      	str	r3, [sp, #4]
   b5e9a:	bd08      	pop	{r3, pc}
   b5e9c:	00030228 	.word	0x00030228

000b5ea0 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b5ea0:	b508      	push	{r3, lr}
   b5ea2:	4b02      	ldr	r3, [pc, #8]	; (b5eac <hal_i2c_unlock+0xc>)
   b5ea4:	681b      	ldr	r3, [r3, #0]
   b5ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5ea8:	9301      	str	r3, [sp, #4]
   b5eaa:	bd08      	pop	{r3, pc}
   b5eac:	00030228 	.word	0x00030228

000b5eb0 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5eb0:	b508      	push	{r3, lr}
   b5eb2:	4b02      	ldr	r3, [pc, #8]	; (b5ebc <hal_i2c_request_ex+0xc>)
   b5eb4:	681b      	ldr	r3, [r3, #0]
   b5eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5eb8:	9301      	str	r3, [sp, #4]
   b5eba:	bd08      	pop	{r3, pc}
   b5ebc:	00030228 	.word	0x00030228

000b5ec0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5ec0:	b508      	push	{r3, lr}
   b5ec2:	4b02      	ldr	r3, [pc, #8]	; (b5ecc <inet_inet_ntop+0xc>)
   b5ec4:	681b      	ldr	r3, [r3, #0]
   b5ec6:	695b      	ldr	r3, [r3, #20]
   b5ec8:	9301      	str	r3, [sp, #4]
   b5eca:	bd08      	pop	{r3, pc}
   b5ecc:	00030264 	.word	0x00030264

000b5ed0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5ed0:	b508      	push	{r3, lr}
   b5ed2:	4b02      	ldr	r3, [pc, #8]	; (b5edc <netdb_freeaddrinfo+0xc>)
   b5ed4:	681b      	ldr	r3, [r3, #0]
   b5ed6:	689b      	ldr	r3, [r3, #8]
   b5ed8:	9301      	str	r3, [sp, #4]
   b5eda:	bd08      	pop	{r3, pc}
   b5edc:	00030268 	.word	0x00030268

000b5ee0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5ee0:	b508      	push	{r3, lr}
   b5ee2:	4b02      	ldr	r3, [pc, #8]	; (b5eec <netdb_getaddrinfo+0xc>)
   b5ee4:	681b      	ldr	r3, [r3, #0]
   b5ee6:	68db      	ldr	r3, [r3, #12]
   b5ee8:	9301      	str	r3, [sp, #4]
   b5eea:	bd08      	pop	{r3, pc}
   b5eec:	00030268 	.word	0x00030268

000b5ef0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5ef0:	b508      	push	{r3, lr}
   b5ef2:	4b02      	ldr	r3, [pc, #8]	; (b5efc <hal_spi_begin+0xc>)
   b5ef4:	681b      	ldr	r3, [r3, #0]
   b5ef6:	681b      	ldr	r3, [r3, #0]
   b5ef8:	9301      	str	r3, [sp, #4]
   b5efa:	bd08      	pop	{r3, pc}
   b5efc:	00030230 	.word	0x00030230

000b5f00 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5f00:	b508      	push	{r3, lr}
   b5f02:	4b02      	ldr	r3, [pc, #8]	; (b5f0c <hal_spi_transfer+0xc>)
   b5f04:	681b      	ldr	r3, [r3, #0]
   b5f06:	695b      	ldr	r3, [r3, #20]
   b5f08:	9301      	str	r3, [sp, #4]
   b5f0a:	bd08      	pop	{r3, pc}
   b5f0c:	00030230 	.word	0x00030230

000b5f10 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5f10:	b508      	push	{r3, lr}
   b5f12:	4b02      	ldr	r3, [pc, #8]	; (b5f1c <hal_spi_init+0xc>)
   b5f14:	681b      	ldr	r3, [r3, #0]
   b5f16:	69db      	ldr	r3, [r3, #28]
   b5f18:	9301      	str	r3, [sp, #4]
   b5f1a:	bd08      	pop	{r3, pc}
   b5f1c:	00030230 	.word	0x00030230

000b5f20 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5f20:	b508      	push	{r3, lr}
   b5f22:	4b02      	ldr	r3, [pc, #8]	; (b5f2c <hal_spi_is_enabled+0xc>)
   b5f24:	681b      	ldr	r3, [r3, #0]
   b5f26:	6a1b      	ldr	r3, [r3, #32]
   b5f28:	9301      	str	r3, [sp, #4]
   b5f2a:	bd08      	pop	{r3, pc}
   b5f2c:	00030230 	.word	0x00030230

000b5f30 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5f30:	b508      	push	{r3, lr}
   b5f32:	4b02      	ldr	r3, [pc, #8]	; (b5f3c <hal_spi_info+0xc>)
   b5f34:	681b      	ldr	r3, [r3, #0]
   b5f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5f38:	9301      	str	r3, [sp, #4]
   b5f3a:	bd08      	pop	{r3, pc}
   b5f3c:	00030230 	.word	0x00030230

000b5f40 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b5f40:	b508      	push	{r3, lr}
   b5f42:	4b02      	ldr	r3, [pc, #8]	; (b5f4c <hal_spi_transfer_dma+0xc>)
   b5f44:	681b      	ldr	r3, [r3, #0]
   b5f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f48:	9301      	str	r3, [sp, #4]
   b5f4a:	bd08      	pop	{r3, pc}
   b5f4c:	00030230 	.word	0x00030230

000b5f50 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b5f50:	b508      	push	{r3, lr}
   b5f52:	4b02      	ldr	r3, [pc, #8]	; (b5f5c <hal_spi_transfer_dma_status+0xc>)
   b5f54:	681b      	ldr	r3, [r3, #0]
   b5f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5f58:	9301      	str	r3, [sp, #4]
   b5f5a:	bd08      	pop	{r3, pc}
   b5f5c:	00030230 	.word	0x00030230

000b5f60 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5f60:	b508      	push	{r3, lr}
   b5f62:	4b02      	ldr	r3, [pc, #8]	; (b5f6c <hal_spi_set_settings+0xc>)
   b5f64:	681b      	ldr	r3, [r3, #0]
   b5f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5f68:	9301      	str	r3, [sp, #4]
   b5f6a:	bd08      	pop	{r3, pc}
   b5f6c:	00030230 	.word	0x00030230

000b5f70 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5f70:	b508      	push	{r3, lr}
   b5f72:	4b02      	ldr	r3, [pc, #8]	; (b5f7c <hal_spi_acquire+0xc>)
   b5f74:	681b      	ldr	r3, [r3, #0]
   b5f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5f78:	9301      	str	r3, [sp, #4]
   b5f7a:	bd08      	pop	{r3, pc}
   b5f7c:	00030230 	.word	0x00030230

000b5f80 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5f80:	b508      	push	{r3, lr}
   b5f82:	4b02      	ldr	r3, [pc, #8]	; (b5f8c <hal_spi_release+0xc>)
   b5f84:	681b      	ldr	r3, [r3, #0]
   b5f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5f88:	9301      	str	r3, [sp, #4]
   b5f8a:	bd08      	pop	{r3, pc}
   b5f8c:	00030230 	.word	0x00030230

000b5f90 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5f90:	b508      	push	{r3, lr}
   b5f92:	4b02      	ldr	r3, [pc, #8]	; (b5f9c <hal_usart_write+0xc>)
   b5f94:	681b      	ldr	r3, [r3, #0]
   b5f96:	68db      	ldr	r3, [r3, #12]
   b5f98:	9301      	str	r3, [sp, #4]
   b5f9a:	bd08      	pop	{r3, pc}
   b5f9c:	0003023c 	.word	0x0003023c

000b5fa0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5fa0:	b508      	push	{r3, lr}
   b5fa2:	4b02      	ldr	r3, [pc, #8]	; (b5fac <hal_usart_available+0xc>)
   b5fa4:	681b      	ldr	r3, [r3, #0]
   b5fa6:	691b      	ldr	r3, [r3, #16]
   b5fa8:	9301      	str	r3, [sp, #4]
   b5faa:	bd08      	pop	{r3, pc}
   b5fac:	0003023c 	.word	0x0003023c

000b5fb0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5fb0:	b508      	push	{r3, lr}
   b5fb2:	4b02      	ldr	r3, [pc, #8]	; (b5fbc <hal_usart_read+0xc>)
   b5fb4:	681b      	ldr	r3, [r3, #0]
   b5fb6:	695b      	ldr	r3, [r3, #20]
   b5fb8:	9301      	str	r3, [sp, #4]
   b5fba:	bd08      	pop	{r3, pc}
   b5fbc:	0003023c 	.word	0x0003023c

000b5fc0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5fc0:	b508      	push	{r3, lr}
   b5fc2:	4b02      	ldr	r3, [pc, #8]	; (b5fcc <hal_usart_peek+0xc>)
   b5fc4:	681b      	ldr	r3, [r3, #0]
   b5fc6:	699b      	ldr	r3, [r3, #24]
   b5fc8:	9301      	str	r3, [sp, #4]
   b5fca:	bd08      	pop	{r3, pc}
   b5fcc:	0003023c 	.word	0x0003023c

000b5fd0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5fd0:	b508      	push	{r3, lr}
   b5fd2:	4b02      	ldr	r3, [pc, #8]	; (b5fdc <hal_usart_flush+0xc>)
   b5fd4:	681b      	ldr	r3, [r3, #0]
   b5fd6:	69db      	ldr	r3, [r3, #28]
   b5fd8:	9301      	str	r3, [sp, #4]
   b5fda:	bd08      	pop	{r3, pc}
   b5fdc:	0003023c 	.word	0x0003023c

000b5fe0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5fe0:	b508      	push	{r3, lr}
   b5fe2:	4b02      	ldr	r3, [pc, #8]	; (b5fec <hal_usart_is_enabled+0xc>)
   b5fe4:	681b      	ldr	r3, [r3, #0]
   b5fe6:	6a1b      	ldr	r3, [r3, #32]
   b5fe8:	9301      	str	r3, [sp, #4]
   b5fea:	bd08      	pop	{r3, pc}
   b5fec:	0003023c 	.word	0x0003023c

000b5ff0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5ff0:	b508      	push	{r3, lr}
   b5ff2:	4b02      	ldr	r3, [pc, #8]	; (b5ffc <hal_usart_available_data_for_write+0xc>)
   b5ff4:	681b      	ldr	r3, [r3, #0]
   b5ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5ff8:	9301      	str	r3, [sp, #4]
   b5ffa:	bd08      	pop	{r3, pc}
   b5ffc:	0003023c 	.word	0x0003023c

000b6000 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6000:	b508      	push	{r3, lr}
   b6002:	4b02      	ldr	r3, [pc, #8]	; (b600c <hal_usart_init_ex+0xc>)
   b6004:	681b      	ldr	r3, [r3, #0]
   b6006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6008:	9301      	str	r3, [sp, #4]
   b600a:	bd08      	pop	{r3, pc}
   b600c:	0003023c 	.word	0x0003023c

000b6010 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6010:	b508      	push	{r3, lr}
   b6012:	4b02      	ldr	r3, [pc, #8]	; (b601c <HAL_USB_USART_Init+0xc>)
   b6014:	681b      	ldr	r3, [r3, #0]
   b6016:	681b      	ldr	r3, [r3, #0]
   b6018:	9301      	str	r3, [sp, #4]
   b601a:	bd08      	pop	{r3, pc}
   b601c:	0003024c 	.word	0x0003024c

000b6020 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6020:	b508      	push	{r3, lr}
   b6022:	4b02      	ldr	r3, [pc, #8]	; (b602c <HAL_USB_USART_Begin+0xc>)
   b6024:	681b      	ldr	r3, [r3, #0]
   b6026:	685b      	ldr	r3, [r3, #4]
   b6028:	9301      	str	r3, [sp, #4]
   b602a:	bd08      	pop	{r3, pc}
   b602c:	0003024c 	.word	0x0003024c

000b6030 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6030:	b508      	push	{r3, lr}
   b6032:	4b02      	ldr	r3, [pc, #8]	; (b603c <HAL_USB_USART_Available_Data+0xc>)
   b6034:	681b      	ldr	r3, [r3, #0]
   b6036:	691b      	ldr	r3, [r3, #16]
   b6038:	9301      	str	r3, [sp, #4]
   b603a:	bd08      	pop	{r3, pc}
   b603c:	0003024c 	.word	0x0003024c

000b6040 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6040:	b508      	push	{r3, lr}
   b6042:	4b02      	ldr	r3, [pc, #8]	; (b604c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6044:	681b      	ldr	r3, [r3, #0]
   b6046:	695b      	ldr	r3, [r3, #20]
   b6048:	9301      	str	r3, [sp, #4]
   b604a:	bd08      	pop	{r3, pc}
   b604c:	0003024c 	.word	0x0003024c

000b6050 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6050:	b508      	push	{r3, lr}
   b6052:	4b02      	ldr	r3, [pc, #8]	; (b605c <HAL_USB_USART_Receive_Data+0xc>)
   b6054:	681b      	ldr	r3, [r3, #0]
   b6056:	699b      	ldr	r3, [r3, #24]
   b6058:	9301      	str	r3, [sp, #4]
   b605a:	bd08      	pop	{r3, pc}
   b605c:	0003024c 	.word	0x0003024c

000b6060 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6060:	b508      	push	{r3, lr}
   b6062:	4b02      	ldr	r3, [pc, #8]	; (b606c <HAL_USB_USART_Send_Data+0xc>)
   b6064:	681b      	ldr	r3, [r3, #0]
   b6066:	69db      	ldr	r3, [r3, #28]
   b6068:	9301      	str	r3, [sp, #4]
   b606a:	bd08      	pop	{r3, pc}
   b606c:	0003024c 	.word	0x0003024c

000b6070 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6070:	b508      	push	{r3, lr}
   b6072:	4b02      	ldr	r3, [pc, #8]	; (b607c <HAL_USB_USART_Flush_Data+0xc>)
   b6074:	681b      	ldr	r3, [r3, #0]
   b6076:	6a1b      	ldr	r3, [r3, #32]
   b6078:	9301      	str	r3, [sp, #4]
   b607a:	bd08      	pop	{r3, pc}
   b607c:	0003024c 	.word	0x0003024c

000b6080 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6080:	b508      	push	{r3, lr}
   b6082:	4b02      	ldr	r3, [pc, #8]	; (b608c <log_message+0xc>)
   b6084:	681b      	ldr	r3, [r3, #0]
   b6086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6088:	9301      	str	r3, [sp, #4]
   b608a:	bd08      	pop	{r3, pc}
   b608c:	00030260 	.word	0x00030260

000b6090 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b6090:	b508      	push	{r3, lr}
   b6092:	4b02      	ldr	r3, [pc, #8]	; (b609c <system_mode+0xc>)
   b6094:	681b      	ldr	r3, [r3, #0]
   b6096:	681b      	ldr	r3, [r3, #0]
   b6098:	9301      	str	r3, [sp, #4]
   b609a:	bd08      	pop	{r3, pc}
   b609c:	00030220 	.word	0x00030220

000b60a0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b60a0:	b508      	push	{r3, lr}
   b60a2:	4b02      	ldr	r3, [pc, #8]	; (b60ac <set_system_mode+0xc>)
   b60a4:	681b      	ldr	r3, [r3, #0]
   b60a6:	685b      	ldr	r3, [r3, #4]
   b60a8:	9301      	str	r3, [sp, #4]
   b60aa:	bd08      	pop	{r3, pc}
   b60ac:	00030220 	.word	0x00030220

000b60b0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b60b0:	b508      	push	{r3, lr}
   b60b2:	4b02      	ldr	r3, [pc, #8]	; (b60bc <system_delay_ms+0xc>)
   b60b4:	681b      	ldr	r3, [r3, #0]
   b60b6:	695b      	ldr	r3, [r3, #20]
   b60b8:	9301      	str	r3, [sp, #4]
   b60ba:	bd08      	pop	{r3, pc}
   b60bc:	00030220 	.word	0x00030220

000b60c0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b60c0:	b508      	push	{r3, lr}
   b60c2:	4b02      	ldr	r3, [pc, #8]	; (b60cc <system_thread_set_state+0xc>)
   b60c4:	681b      	ldr	r3, [r3, #0]
   b60c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b60c8:	9301      	str	r3, [sp, #4]
   b60ca:	bd08      	pop	{r3, pc}
   b60cc:	00030220 	.word	0x00030220

000b60d0 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b60d0:	b508      	push	{r3, lr}
   b60d2:	4b02      	ldr	r3, [pc, #8]	; (b60dc <system_thread_get_state+0xc>)
   b60d4:	681b      	ldr	r3, [r3, #0]
   b60d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b60d8:	9301      	str	r3, [sp, #4]
   b60da:	bd08      	pop	{r3, pc}
   b60dc:	00030220 	.word	0x00030220

000b60e0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b60e0:	b508      	push	{r3, lr}
   b60e2:	4b03      	ldr	r3, [pc, #12]	; (b60f0 <system_ctrl_set_app_request_handler+0x10>)
   b60e4:	681b      	ldr	r3, [r3, #0]
   b60e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b60ea:	9301      	str	r3, [sp, #4]
   b60ec:	bd08      	pop	{r3, pc}
   b60ee:	0000      	.short	0x0000
   b60f0:	00030220 	.word	0x00030220

000b60f4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b60f4:	b508      	push	{r3, lr}
   b60f6:	4b03      	ldr	r3, [pc, #12]	; (b6104 <system_ctrl_set_result+0x10>)
   b60f8:	681b      	ldr	r3, [r3, #0]
   b60fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b60fe:	9301      	str	r3, [sp, #4]
   b6100:	bd08      	pop	{r3, pc}
   b6102:	0000      	.short	0x0000
   b6104:	00030220 	.word	0x00030220

000b6108 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b6108:	b508      	push	{r3, lr}
   b610a:	4b03      	ldr	r3, [pc, #12]	; (b6118 <system_sleep_ext+0x10>)
   b610c:	681b      	ldr	r3, [r3, #0]
   b610e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b6112:	9301      	str	r3, [sp, #4]
   b6114:	bd08      	pop	{r3, pc}
   b6116:	0000      	.short	0x0000
   b6118:	00030220 	.word	0x00030220

000b611c <system_power_management_get_config>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX1 + 2, system, system_power_management_get_config, int(hal_power_config*, void*))
   b611c:	b508      	push	{r3, lr}
   b611e:	4b03      	ldr	r3, [pc, #12]	; (b612c <system_power_management_get_config+0x10>)
   b6120:	681b      	ldr	r3, [r3, #0]
   b6122:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b6126:	9301      	str	r3, [sp, #4]
   b6128:	bd08      	pop	{r3, pc}
   b612a:	0000      	.short	0x0000
   b612c:	00030220 	.word	0x00030220

000b6130 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b6130:	b508      	push	{r3, lr}
   b6132:	4b02      	ldr	r3, [pc, #8]	; (b613c <spark_process+0xc>)
   b6134:	681b      	ldr	r3, [r3, #0]
   b6136:	689b      	ldr	r3, [r3, #8]
   b6138:	9301      	str	r3, [sp, #4]
   b613a:	bd08      	pop	{r3, pc}
   b613c:	00030244 	.word	0x00030244

000b6140 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6140:	b508      	push	{r3, lr}
   b6142:	4b02      	ldr	r3, [pc, #8]	; (b614c <spark_cloud_flag_connected+0xc>)
   b6144:	681b      	ldr	r3, [r3, #0]
   b6146:	695b      	ldr	r3, [r3, #20]
   b6148:	9301      	str	r3, [sp, #4]
   b614a:	bd08      	pop	{r3, pc}
   b614c:	00030244 	.word	0x00030244

000b6150 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b6150:	b508      	push	{r3, lr}
   b6152:	4b02      	ldr	r3, [pc, #8]	; (b615c <spark_sync_time_pending+0xc>)
   b6154:	681b      	ldr	r3, [r3, #0]
   b6156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6158:	9301      	str	r3, [sp, #4]
   b615a:	bd08      	pop	{r3, pc}
   b615c:	00030244 	.word	0x00030244

000b6160 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6160:	b508      	push	{r3, lr}
   b6162:	4b02      	ldr	r3, [pc, #8]	; (b616c <spark_set_random_seed_from_cloud_handler+0xc>)
   b6164:	681b      	ldr	r3, [r3, #0]
   b6166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6168:	9301      	str	r3, [sp, #4]
   b616a:	bd08      	pop	{r3, pc}
   b616c:	00030244 	.word	0x00030244

000b6170 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6170:	b508      	push	{r3, lr}
   b6172:	4b02      	ldr	r3, [pc, #8]	; (b617c <network_connect+0xc>)
   b6174:	681b      	ldr	r3, [r3, #0]
   b6176:	685b      	ldr	r3, [r3, #4]
   b6178:	9301      	str	r3, [sp, #4]
   b617a:	bd08      	pop	{r3, pc}
   b617c:	00030240 	.word	0x00030240

000b6180 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6180:	b508      	push	{r3, lr}
   b6182:	4b02      	ldr	r3, [pc, #8]	; (b618c <network_connecting+0xc>)
   b6184:	681b      	ldr	r3, [r3, #0]
   b6186:	689b      	ldr	r3, [r3, #8]
   b6188:	9301      	str	r3, [sp, #4]
   b618a:	bd08      	pop	{r3, pc}
   b618c:	00030240 	.word	0x00030240

000b6190 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6190:	b508      	push	{r3, lr}
   b6192:	4b02      	ldr	r3, [pc, #8]	; (b619c <network_disconnect+0xc>)
   b6194:	681b      	ldr	r3, [r3, #0]
   b6196:	68db      	ldr	r3, [r3, #12]
   b6198:	9301      	str	r3, [sp, #4]
   b619a:	bd08      	pop	{r3, pc}
   b619c:	00030240 	.word	0x00030240

000b61a0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b61a0:	b508      	push	{r3, lr}
   b61a2:	4b02      	ldr	r3, [pc, #8]	; (b61ac <network_ready+0xc>)
   b61a4:	681b      	ldr	r3, [r3, #0]
   b61a6:	691b      	ldr	r3, [r3, #16]
   b61a8:	9301      	str	r3, [sp, #4]
   b61aa:	bd08      	pop	{r3, pc}
   b61ac:	00030240 	.word	0x00030240

000b61b0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b61b0:	b508      	push	{r3, lr}
   b61b2:	4b02      	ldr	r3, [pc, #8]	; (b61bc <network_on+0xc>)
   b61b4:	681b      	ldr	r3, [r3, #0]
   b61b6:	695b      	ldr	r3, [r3, #20]
   b61b8:	9301      	str	r3, [sp, #4]
   b61ba:	bd08      	pop	{r3, pc}
   b61bc:	00030240 	.word	0x00030240

000b61c0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b61c0:	b508      	push	{r3, lr}
   b61c2:	4b02      	ldr	r3, [pc, #8]	; (b61cc <network_off+0xc>)
   b61c4:	681b      	ldr	r3, [r3, #0]
   b61c6:	699b      	ldr	r3, [r3, #24]
   b61c8:	9301      	str	r3, [sp, #4]
   b61ca:	bd08      	pop	{r3, pc}
   b61cc:	00030240 	.word	0x00030240

000b61d0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b61d0:	b508      	push	{r3, lr}
   b61d2:	4b02      	ldr	r3, [pc, #8]	; (b61dc <network_listen+0xc>)
   b61d4:	681b      	ldr	r3, [r3, #0]
   b61d6:	69db      	ldr	r3, [r3, #28]
   b61d8:	9301      	str	r3, [sp, #4]
   b61da:	bd08      	pop	{r3, pc}
   b61dc:	00030240 	.word	0x00030240

000b61e0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b61e0:	b508      	push	{r3, lr}
   b61e2:	4b02      	ldr	r3, [pc, #8]	; (b61ec <network_listening+0xc>)
   b61e4:	681b      	ldr	r3, [r3, #0]
   b61e6:	6a1b      	ldr	r3, [r3, #32]
   b61e8:	9301      	str	r3, [sp, #4]
   b61ea:	bd08      	pop	{r3, pc}
   b61ec:	00030240 	.word	0x00030240

000b61f0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b61f0:	b508      	push	{r3, lr}
   b61f2:	4b02      	ldr	r3, [pc, #8]	; (b61fc <network_set_listen_timeout+0xc>)
   b61f4:	681b      	ldr	r3, [r3, #0]
   b61f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b61f8:	9301      	str	r3, [sp, #4]
   b61fa:	bd08      	pop	{r3, pc}
   b61fc:	00030240 	.word	0x00030240

000b6200 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6200:	b508      	push	{r3, lr}
   b6202:	4b02      	ldr	r3, [pc, #8]	; (b620c <network_get_listen_timeout+0xc>)
   b6204:	681b      	ldr	r3, [r3, #0]
   b6206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6208:	9301      	str	r3, [sp, #4]
   b620a:	bd08      	pop	{r3, pc}
   b620c:	00030240 	.word	0x00030240

000b6210 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6210:	b508      	push	{r3, lr}
   b6212:	4b02      	ldr	r3, [pc, #8]	; (b621c <network_is_on+0xc>)
   b6214:	681b      	ldr	r3, [r3, #0]
   b6216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6218:	9301      	str	r3, [sp, #4]
   b621a:	bd08      	pop	{r3, pc}
   b621c:	00030240 	.word	0x00030240

000b6220 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6220:	b508      	push	{r3, lr}
   b6222:	4b02      	ldr	r3, [pc, #8]	; (b622c <network_is_off+0xc>)
   b6224:	681b      	ldr	r3, [r3, #0]
   b6226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6228:	9301      	str	r3, [sp, #4]
   b622a:	bd08      	pop	{r3, pc}
   b622c:	00030240 	.word	0x00030240

000b6230 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6230:	b508      	push	{r3, lr}
   b6232:	4b02      	ldr	r3, [pc, #8]	; (b623c <malloc+0xc>)
   b6234:	681b      	ldr	r3, [r3, #0]
   b6236:	681b      	ldr	r3, [r3, #0]
   b6238:	9301      	str	r3, [sp, #4]
   b623a:	bd08      	pop	{r3, pc}
   b623c:	0003021c 	.word	0x0003021c

000b6240 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6240:	b508      	push	{r3, lr}
   b6242:	4b02      	ldr	r3, [pc, #8]	; (b624c <free+0xc>)
   b6244:	681b      	ldr	r3, [r3, #0]
   b6246:	685b      	ldr	r3, [r3, #4]
   b6248:	9301      	str	r3, [sp, #4]
   b624a:	bd08      	pop	{r3, pc}
   b624c:	0003021c 	.word	0x0003021c

000b6250 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b6250:	b508      	push	{r3, lr}
   b6252:	4b02      	ldr	r3, [pc, #8]	; (b625c <snprintf+0xc>)
   b6254:	681b      	ldr	r3, [r3, #0]
   b6256:	69db      	ldr	r3, [r3, #28]
   b6258:	9301      	str	r3, [sp, #4]
   b625a:	bd08      	pop	{r3, pc}
   b625c:	0003021c 	.word	0x0003021c

000b6260 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6260:	b508      	push	{r3, lr}
   b6262:	4b02      	ldr	r3, [pc, #8]	; (b626c <vsnprintf+0xc>)
   b6264:	681b      	ldr	r3, [r3, #0]
   b6266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6268:	9301      	str	r3, [sp, #4]
   b626a:	bd08      	pop	{r3, pc}
   b626c:	0003021c 	.word	0x0003021c

000b6270 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6270:	b508      	push	{r3, lr}
   b6272:	4b02      	ldr	r3, [pc, #8]	; (b627c <__assert_func+0xc>)
   b6274:	681b      	ldr	r3, [r3, #0]
   b6276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6278:	9301      	str	r3, [sp, #4]
   b627a:	bd08      	pop	{r3, pc}
   b627c:	0003021c 	.word	0x0003021c

000b6280 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6280:	b508      	push	{r3, lr}
   b6282:	4b02      	ldr	r3, [pc, #8]	; (b628c <newlib_impure_ptr_callback+0xc>)
   b6284:	681b      	ldr	r3, [r3, #0]
   b6286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6288:	9301      	str	r3, [sp, #4]
   b628a:	bd08      	pop	{r3, pc}
   b628c:	0003021c 	.word	0x0003021c

000b6290 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6290:	2100      	movs	r1, #0
   b6292:	f7ff bf0d 	b.w	b60b0 <system_delay_ms>
	...

000b6298 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6298:	4802      	ldr	r0, [pc, #8]	; (b62a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b629a:	2300      	movs	r3, #0
   b629c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b629e:	f7ff bd57 	b.w	b5d50 <os_mutex_recursive_create>
   b62a2:	bf00      	nop
   b62a4:	2003e684 	.word	0x2003e684

000b62a8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b62a8:	2200      	movs	r2, #0
   b62aa:	6840      	ldr	r0, [r0, #4]
   b62ac:	4611      	mov	r1, r2
   b62ae:	f7ff bf77 	b.w	b61a0 <network_ready>

000b62b2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b62b2:	2200      	movs	r2, #0
   b62b4:	6840      	ldr	r0, [r0, #4]
   b62b6:	4611      	mov	r1, r2
   b62b8:	f7ff bf92 	b.w	b61e0 <network_listening>

000b62bc <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b62bc:	2200      	movs	r2, #0
   b62be:	6840      	ldr	r0, [r0, #4]
   b62c0:	4611      	mov	r1, r2
   b62c2:	f7ff bf9d 	b.w	b6200 <network_get_listen_timeout>

000b62c6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b62c6:	6840      	ldr	r0, [r0, #4]
   b62c8:	2200      	movs	r2, #0
   b62ca:	f7ff bf91 	b.w	b61f0 <network_set_listen_timeout>

000b62ce <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b62ce:	6840      	ldr	r0, [r0, #4]
   b62d0:	2200      	movs	r2, #0
   b62d2:	f081 0101 	eor.w	r1, r1, #1
   b62d6:	f7ff bf7b 	b.w	b61d0 <network_listen>

000b62da <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b62da:	2300      	movs	r3, #0
   b62dc:	6840      	ldr	r0, [r0, #4]
   b62de:	461a      	mov	r2, r3
   b62e0:	4619      	mov	r1, r3
   b62e2:	f7ff bf6d 	b.w	b61c0 <network_off>

000b62e6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b62e6:	2300      	movs	r3, #0
   b62e8:	6840      	ldr	r0, [r0, #4]
   b62ea:	461a      	mov	r2, r3
   b62ec:	4619      	mov	r1, r3
   b62ee:	f7ff bf5f 	b.w	b61b0 <network_on>

000b62f2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b62f2:	2200      	movs	r2, #0
   b62f4:	6840      	ldr	r0, [r0, #4]
   b62f6:	4611      	mov	r1, r2
   b62f8:	f7ff bf42 	b.w	b6180 <network_connecting>

000b62fc <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b62fc:	6840      	ldr	r0, [r0, #4]
   b62fe:	2200      	movs	r2, #0
   b6300:	2102      	movs	r1, #2
   b6302:	f7ff bf45 	b.w	b6190 <network_disconnect>

000b6306 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6306:	2300      	movs	r3, #0
   b6308:	6840      	ldr	r0, [r0, #4]
   b630a:	461a      	mov	r2, r3
   b630c:	f7ff bf30 	b.w	b6170 <network_connect>

000b6310 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b6310:	4b08      	ldr	r3, [pc, #32]	; (b6334 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b6312:	b510      	push	{r4, lr}
   b6314:	2428      	movs	r4, #40	; 0x28
   b6316:	4622      	mov	r2, r4
   b6318:	4618      	mov	r0, r3
   b631a:	2100      	movs	r1, #0
   b631c:	f001 fdba 	bl	b7e94 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6320:	4b05      	ldr	r3, [pc, #20]	; (b6338 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b6322:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b6324:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6328:	6042      	str	r2, [r0, #4]
   b632a:	2204      	movs	r2, #4
   b632c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b632e:	4a03      	ldr	r2, [pc, #12]	; (b633c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b6330:	601a      	str	r2, [r3, #0]
   b6332:	bd10      	pop	{r4, pc}
   b6334:	2003e690 	.word	0x2003e690
   b6338:	2003e688 	.word	0x2003e688
   b633c:	000b8198 	.word	0x000b8198

000b6340 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6340:	2200      	movs	r2, #0
   b6342:	6840      	ldr	r0, [r0, #4]
   b6344:	4611      	mov	r1, r2
   b6346:	f7ff bf4b 	b.w	b61e0 <network_listening>

000b634a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b634a:	2200      	movs	r2, #0
   b634c:	6840      	ldr	r0, [r0, #4]
   b634e:	4611      	mov	r1, r2
   b6350:	f7ff bf56 	b.w	b6200 <network_get_listen_timeout>

000b6354 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6354:	6840      	ldr	r0, [r0, #4]
   b6356:	2200      	movs	r2, #0
   b6358:	f7ff bf4a 	b.w	b61f0 <network_set_listen_timeout>

000b635c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b635c:	6840      	ldr	r0, [r0, #4]
   b635e:	2200      	movs	r2, #0
   b6360:	f081 0101 	eor.w	r1, r1, #1
   b6364:	f7ff bf34 	b.w	b61d0 <network_listen>

000b6368 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6368:	2300      	movs	r3, #0
   b636a:	6840      	ldr	r0, [r0, #4]
   b636c:	461a      	mov	r2, r3
   b636e:	4619      	mov	r1, r3
   b6370:	f7ff bf26 	b.w	b61c0 <network_off>

000b6374 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6374:	2300      	movs	r3, #0
   b6376:	6840      	ldr	r0, [r0, #4]
   b6378:	461a      	mov	r2, r3
   b637a:	4619      	mov	r1, r3
   b637c:	f7ff bf18 	b.w	b61b0 <network_on>

000b6380 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6380:	2200      	movs	r2, #0
   b6382:	6840      	ldr	r0, [r0, #4]
   b6384:	4611      	mov	r1, r2
   b6386:	f7ff bf0b 	b.w	b61a0 <network_ready>

000b638a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b638a:	2200      	movs	r2, #0
   b638c:	6840      	ldr	r0, [r0, #4]
   b638e:	4611      	mov	r1, r2
   b6390:	f7ff bef6 	b.w	b6180 <network_connecting>

000b6394 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6394:	6840      	ldr	r0, [r0, #4]
   b6396:	2200      	movs	r2, #0
   b6398:	2102      	movs	r1, #2
   b639a:	f7ff bef9 	b.w	b6190 <network_disconnect>

000b639e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b639e:	2300      	movs	r3, #0
   b63a0:	6840      	ldr	r0, [r0, #4]
   b63a2:	461a      	mov	r2, r3
   b63a4:	f7ff bee4 	b.w	b6170 <network_connect>

000b63a8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b63a8:	4b02      	ldr	r3, [pc, #8]	; (b63b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b63aa:	2203      	movs	r2, #3
   b63ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b63ae:	4a02      	ldr	r2, [pc, #8]	; (b63b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b63b0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b63b2:	4770      	bx	lr
   b63b4:	2003e6b8 	.word	0x2003e6b8
   b63b8:	000b81d4 	.word	0x000b81d4

000b63bc <_ZN8particle6detail9_getVCellEhh>:
namespace particle {
namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
   b63bc:	0909      	lsrs	r1, r1, #4
   b63be:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   b63c2:	ee07 1a90 	vmov	s15, r1
        return value / 800.0;
    }
   b63c6:	ed9f 0a03 	vldr	s0, [pc, #12]	; b63d4 <_ZN8particle6detail9_getVCellEhh+0x18>
        float value = (float)((MSB << 4) | (LSB >> 4));
   b63ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
   b63ce:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b63d2:	4770      	bx	lr
   b63d4:	44480000 	.word	0x44480000

000b63d8 <_ZN8particle6detail7_getSoCEhhh>:

        // Maxim ModelGauge doc only mentions 18 and 19 bit
        // MSB is the whole number
        // LSB is the decimal, resolution in units 1/256%
        if (soc_bits_precision == particle::power::SOC_19_BIT_PRECISION) {
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   b63d8:	eb01 2300 	add.w	r3, r1, r0, lsl #8
   b63dc:	ee00 3a10 	vmov	s0, r3
        if (soc_bits_precision == particle::power::SOC_19_BIT_PRECISION) {
   b63e0:	2a13      	cmp	r2, #19
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   b63e2:	bf0c      	ite	eq
   b63e4:	eddf 7a04 	vldreq	s15, [pc, #16]	; b63f8 <_ZN8particle6detail7_getSoCEhhh+0x20>
        } else { // default to 18-bit calculation
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 256.0f; // per datasheet
   b63e8:	eddf 7a04 	vldrne	s15, [pc, #16]	; b63fc <_ZN8particle6detail7_getSoCEhhh+0x24>
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   b63ec:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 256.0f; // per datasheet
   b63f0:	ee20 0a27 	vmul.f32	s0, s0, s15
        }
        return soc_percent;

    }
   b63f4:	4770      	bx	lr
   b63f6:	bf00      	nop
   b63f8:	3b000000 	.word	0x3b000000
   b63fc:	3b800000 	.word	0x3b800000

000b6400 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b6400:	6800      	ldr	r0, [r0, #0]
   b6402:	f000 b91c 	b.w	b663e <_ZN7TwoWire4lockEv>

000b6406 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b6406:	b510      	push	{r4, lr}
   b6408:	4604      	mov	r4, r0
      lock_(_lock) {
   b640a:	6001      	str	r1, [r0, #0]
   b640c:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b640e:	b10a      	cbz	r2, b6414 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b6410:	f7ff fff6 	bl	b6400 <_ZN9FuelGauge4lockEv>
}
   b6414:	4620      	mov	r0, r4
   b6416:	bd10      	pop	{r4, pc}

000b6418 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b6418:	b513      	push	{r0, r1, r4, lr}
   b641a:	4604      	mov	r4, r0
   b641c:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b641e:	f000 ffa9 	bl	b7374 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b6422:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b6424:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b6426:	4620      	mov	r0, r4
   b6428:	f7ff ffed 	bl	b6406 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b642c:	4620      	mov	r0, r4
   b642e:	b002      	add	sp, #8
   b6430:	bd10      	pop	{r4, pc}

000b6432 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b6432:	6800      	ldr	r0, [r0, #0]
   b6434:	f000 b90c 	b.w	b6650 <_ZN7TwoWire6unlockEv>

000b6438 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   b6438:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b643c:	4604      	mov	r4, r0
   b643e:	460d      	mov	r5, r1
   b6440:	4617      	mov	r7, r2
   b6442:	461e      	mov	r6, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b6444:	f7ff ffdc 	bl	b6400 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6448:	2236      	movs	r2, #54	; 0x36
   b644a:	2300      	movs	r3, #0
   b644c:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b6450:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b6452:	230a      	movs	r3, #10
   b6454:	f04f 0801 	mov.w	r8, #1
   b6458:	4669      	mov	r1, sp
   b645a:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b645e:	f000 f8d2 	bl	b6606 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   b6462:	6820      	ldr	r0, [r4, #0]
   b6464:	6803      	ldr	r3, [r0, #0]
   b6466:	4629      	mov	r1, r5
   b6468:	689b      	ldr	r3, [r3, #8]
   b646a:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b646c:	6820      	ldr	r0, [r4, #0]
   b646e:	4641      	mov	r1, r8
   b6470:	f000 f8e1 	bl	b6636 <_ZN7TwoWire15endTransmissionEh>
   b6474:	4605      	mov	r5, r0
   b6476:	b140      	cbz	r0, b648a <_ZN9FuelGauge12readRegisterEhRhS0_+0x52>
   b6478:	f06f 059f 	mvn.w	r5, #159	; 0x9f

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   b647c:	4620      	mov	r0, r4
   b647e:	f7ff ffd8 	bl	b6432 <_ZN9FuelGauge6unlockEv>
}
   b6482:	4628      	mov	r0, r5
   b6484:	b004      	add	sp, #16
   b6486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   b648a:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   b648c:	6820      	ldr	r0, [r4, #0]
   b648e:	9301      	str	r3, [sp, #4]
   b6490:	4669      	mov	r1, sp
   b6492:	f000 f8a1 	bl	b65d8 <_ZN7TwoWire11requestFromERK16WireTransmission>
   b6496:	2802      	cmp	r0, #2
   b6498:	d1ee      	bne.n	b6478 <_ZN9FuelGauge12readRegisterEhRhS0_+0x40>
    MSB = i2c_.read();
   b649a:	6820      	ldr	r0, [r4, #0]
   b649c:	6803      	ldr	r3, [r0, #0]
   b649e:	695b      	ldr	r3, [r3, #20]
   b64a0:	4798      	blx	r3
   b64a2:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   b64a4:	6820      	ldr	r0, [r4, #0]
   b64a6:	6803      	ldr	r3, [r0, #0]
   b64a8:	695b      	ldr	r3, [r3, #20]
   b64aa:	4798      	blx	r3
   b64ac:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   b64ae:	e7e5      	b.n	b647c <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>

000b64b0 <_ZN9FuelGauge8getVCellEv>:
float FuelGauge::getVCell() {
   b64b0:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   b64b2:	2300      	movs	r3, #0
   b64b4:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   b64b8:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   b64bc:	f10d 0206 	add.w	r2, sp, #6
   b64c0:	f10d 0307 	add.w	r3, sp, #7
   b64c4:	2102      	movs	r1, #2
   b64c6:	f7ff ffb7 	bl	b6438 <_ZN9FuelGauge12readRegisterEhRhS0_>
   b64ca:	b940      	cbnz	r0, b64de <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
   b64cc:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b64d0:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   b64d4:	b003      	add	sp, #12
   b64d6:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
   b64da:	f7ff bf6f 	b.w	b63bc <_ZN8particle6detail9_getVCellEhh>
}
   b64de:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b64e2:	b003      	add	sp, #12
   b64e4:	f85d fb04 	ldr.w	pc, [sp], #4

000b64e8 <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   b64e8:	b510      	push	{r4, lr}
   b64ea:	b08c      	sub	sp, #48	; 0x30
    byte MSB = 0;
   b64ec:	2300      	movs	r3, #0
   b64ee:	f88d 300e 	strb.w	r3, [sp, #14]
    byte LSB = 0;
   b64f2:	f88d 300f 	strb.w	r3, [sp, #15]
    if (readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   b64f6:	2104      	movs	r1, #4
   b64f8:	f10d 030f 	add.w	r3, sp, #15
   b64fc:	f10d 020e 	add.w	r2, sp, #14
   b6500:	f7ff ff9a 	bl	b6438 <_ZN9FuelGauge12readRegisterEhRhS0_>
   b6504:	4601      	mov	r1, r0
   b6506:	b9c8      	cbnz	r0, b653c <_ZN9FuelGauge6getSoCEv+0x54>
    hal_power_config config = {};
   b6508:	2420      	movs	r4, #32
   b650a:	9001      	str	r0, [sp, #4]
   b650c:	4622      	mov	r2, r4
   b650e:	a804      	add	r0, sp, #16
   b6510:	f001 fcc0 	bl	b7e94 <memset>
    if (system_power_management_get_config(&config, nullptr) == SYSTEM_ERROR_NONE) {
   b6514:	9901      	ldr	r1, [sp, #4]
    config.size = sizeof(config);
   b6516:	f88d 4015 	strb.w	r4, [sp, #21]
    if (system_power_management_get_config(&config, nullptr) == SYSTEM_ERROR_NONE) {
   b651a:	a804      	add	r0, sp, #16
   b651c:	f7ff fdfe 	bl	b611c <system_power_management_get_config>
   b6520:	b950      	cbnz	r0, b6538 <_ZN9FuelGauge6getSoCEv+0x50>
        soc_bits = config.soc_bits;
   b6522:	f89d 201e 	ldrb.w	r2, [sp, #30]
    return particle::detail::_getSoC(MSB, LSB, soc_bits);
   b6526:	f89d 100f 	ldrb.w	r1, [sp, #15]
   b652a:	f89d 000e 	ldrb.w	r0, [sp, #14]
}
   b652e:	b00c      	add	sp, #48	; 0x30
   b6530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return particle::detail::_getSoC(MSB, LSB, soc_bits);
   b6534:	f7ff bf50 	b.w	b63d8 <_ZN8particle6detail7_getSoCEhhh>
    int soc_bits = particle::power::DEFAULT_SOC_18_BIT_PRECISION;
   b6538:	2212      	movs	r2, #18
   b653a:	e7f4      	b.n	b6526 <_ZN9FuelGauge6getSoCEv+0x3e>
}
   b653c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b6540:	b00c      	add	sp, #48	; 0x30
   b6542:	bd10      	pop	{r4, pc}

000b6544 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6544:	4770      	bx	lr

000b6546 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6548:	4606      	mov	r6, r0
   b654a:	4615      	mov	r5, r2
   b654c:	460c      	mov	r4, r1
   b654e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6550:	42bc      	cmp	r4, r7
   b6552:	d006      	beq.n	b6562 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6554:	6833      	ldr	r3, [r6, #0]
   b6556:	f814 1b01 	ldrb.w	r1, [r4], #1
   b655a:	689b      	ldr	r3, [r3, #8]
   b655c:	4630      	mov	r0, r6
   b655e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6560:	e7f6      	b.n	b6550 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6562:	4628      	mov	r0, r5
   b6564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6566 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6566:	7c00      	ldrb	r0, [r0, #16]
   b6568:	2200      	movs	r2, #0
   b656a:	f7ff bc59 	b.w	b5e20 <hal_i2c_write>

000b656e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b656e:	7c00      	ldrb	r0, [r0, #16]
   b6570:	2100      	movs	r1, #0
   b6572:	f7ff bc5d 	b.w	b5e30 <hal_i2c_available>

000b6576 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6576:	7c00      	ldrb	r0, [r0, #16]
   b6578:	2100      	movs	r1, #0
   b657a:	f7ff bc61 	b.w	b5e40 <hal_i2c_read>

000b657e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b657e:	7c00      	ldrb	r0, [r0, #16]
   b6580:	2100      	movs	r1, #0
   b6582:	f7ff bc65 	b.w	b5e50 <hal_i2c_peek>

000b6586 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6586:	7c00      	ldrb	r0, [r0, #16]
   b6588:	2100      	movs	r1, #0
   b658a:	f7ff bc69 	b.w	b5e60 <hal_i2c_flush>

000b658e <_ZN7TwoWireD0Ev>:
   b658e:	b510      	push	{r4, lr}
   b6590:	2114      	movs	r1, #20
   b6592:	4604      	mov	r4, r0
   b6594:	f7fd fd81 	bl	b409a <_ZdlPvj>
   b6598:	4620      	mov	r0, r4
   b659a:	bd10      	pop	{r4, pc}

000b659c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b659c:	b538      	push	{r3, r4, r5, lr}
   b659e:	4604      	mov	r4, r0
   b65a0:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b65a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b65a6:	2200      	movs	r2, #0
   b65a8:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b65ac:	4b09      	ldr	r3, [pc, #36]	; (b65d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b65ae:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b65b0:	4608      	mov	r0, r1
   b65b2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b65b4:	4629      	mov	r1, r5
   b65b6:	f7ff fc63 	bl	b5e80 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b65ba:	30bf      	adds	r0, #191	; 0xbf
   b65bc:	d108      	bne.n	b65d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b65be:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b65c0:	07db      	lsls	r3, r3, #31
   b65c2:	d505      	bpl.n	b65d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b65c4:	6868      	ldr	r0, [r5, #4]
   b65c6:	f7ff fe3b 	bl	b6240 <free>
    free(conf.tx_buffer);
   b65ca:	68e8      	ldr	r0, [r5, #12]
   b65cc:	f7ff fe38 	bl	b6240 <free>
}
   b65d0:	4620      	mov	r0, r4
   b65d2:	bd38      	pop	{r3, r4, r5, pc}
   b65d4:	000b8210 	.word	0x000b8210

000b65d8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b65d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b65da:	2200      	movs	r2, #0
   b65dc:	2314      	movs	r3, #20
   b65de:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b65e2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b65e6:	780b      	ldrb	r3, [r1, #0]
   b65e8:	f88d 3008 	strb.w	r3, [sp, #8]
   b65ec:	684b      	ldr	r3, [r1, #4]
   b65ee:	9303      	str	r3, [sp, #12]
   b65f0:	68cb      	ldr	r3, [r1, #12]
   b65f2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b65f4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b65f6:	7a0b      	ldrb	r3, [r1, #8]
   b65f8:	9305      	str	r3, [sp, #20]
   b65fa:	a901      	add	r1, sp, #4
   b65fc:	f7ff fc58 	bl	b5eb0 <hal_i2c_request_ex>
}
   b6600:	b007      	add	sp, #28
   b6602:	f85d fb04 	ldr.w	pc, [sp], #4

000b6606 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b6606:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6608:	2300      	movs	r3, #0
   b660a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b660e:	684a      	ldr	r2, [r1, #4]
   b6610:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b6612:	2314      	movs	r3, #20
    };
   b6614:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b6616:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b661a:	780b      	ldrb	r3, [r1, #0]
    };
   b661c:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b661e:	7a0a      	ldrb	r2, [r1, #8]
   b6620:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b6622:	7c00      	ldrb	r0, [r0, #16]
    };
   b6624:	f88d 3008 	strb.w	r3, [sp, #8]
   b6628:	aa01      	add	r2, sp, #4
   b662a:	4619      	mov	r1, r3
   b662c:	f7ff fbe8 	bl	b5e00 <hal_i2c_begin_transmission>
}
   b6630:	b007      	add	sp, #28
   b6632:	f85d fb04 	ldr.w	pc, [sp], #4

000b6636 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6636:	7c00      	ldrb	r0, [r0, #16]
   b6638:	2200      	movs	r2, #0
   b663a:	f7ff bbe9 	b.w	b5e10 <hal_i2c_end_transmission>

000b663e <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b663e:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b6640:	2100      	movs	r1, #0
   b6642:	7c00      	ldrb	r0, [r0, #16]
   b6644:	f7ff fc24 	bl	b5e90 <hal_i2c_lock>
}
   b6648:	fab0 f080 	clz	r0, r0
   b664c:	0940      	lsrs	r0, r0, #5
   b664e:	bd08      	pop	{r3, pc}

000b6650 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b6650:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b6652:	2100      	movs	r1, #0
   b6654:	7c00      	ldrb	r0, [r0, #16]
   b6656:	f7ff fc23 	bl	b5ea0 <hal_i2c_unlock>
}
   b665a:	fab0 f080 	clz	r0, r0
   b665e:	0940      	lsrs	r0, r0, #5
   b6660:	bd08      	pop	{r3, pc}

000b6662 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6662:	4770      	bx	lr

000b6664 <_ZN9IPAddressD0Ev>:
   b6664:	b510      	push	{r4, lr}
   b6666:	2118      	movs	r1, #24
   b6668:	4604      	mov	r4, r0
   b666a:	f7fd fd16 	bl	b409a <_ZdlPvj>
   b666e:	4620      	mov	r0, r4
   b6670:	bd10      	pop	{r4, pc}

000b6672 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6672:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6674:	7d03      	ldrb	r3, [r0, #20]
   b6676:	2b06      	cmp	r3, #6
{
   b6678:	b08d      	sub	sp, #52	; 0x34
   b667a:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b667c:	f100 0704 	add.w	r7, r0, #4
   b6680:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6684:	d012      	beq.n	b66ac <_ZNK9IPAddress7printToER5Print+0x3a>
   b6686:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b668a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b668e:	220a      	movs	r2, #10
   b6690:	4630      	mov	r0, r6
   b6692:	f000 f94c 	bl	b692e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6696:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6698:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b669a:	d019      	beq.n	b66d0 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b669c:	2c00      	cmp	r4, #0
   b669e:	d0f4      	beq.n	b668a <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b66a0:	212e      	movs	r1, #46	; 0x2e
   b66a2:	4630      	mov	r0, r6
   b66a4:	f000 f92a 	bl	b68fc <_ZN5Print5printEc>
   b66a8:	4404      	add	r4, r0
   b66aa:	e7ee      	b.n	b668a <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b66ac:	232f      	movs	r3, #47	; 0x2f
   b66ae:	466a      	mov	r2, sp
   b66b0:	4639      	mov	r1, r7
   b66b2:	200a      	movs	r0, #10
		buf[0] = 0;
   b66b4:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b66b8:	f7ff fc02 	bl	b5ec0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b66bc:	4668      	mov	r0, sp
   b66be:	f001 fc1f 	bl	b7f00 <strlen>
   b66c2:	6833      	ldr	r3, [r6, #0]
   b66c4:	4602      	mov	r2, r0
   b66c6:	68db      	ldr	r3, [r3, #12]
   b66c8:	4669      	mov	r1, sp
   b66ca:	4630      	mov	r0, r6
   b66cc:	4798      	blx	r3
   b66ce:	4604      	mov	r4, r0
    }
    return n;
}
   b66d0:	4620      	mov	r0, r4
   b66d2:	b00d      	add	sp, #52	; 0x34
   b66d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b66d8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b66d8:	b510      	push	{r4, lr}
   b66da:	4b05      	ldr	r3, [pc, #20]	; (b66f0 <_ZN9IPAddressC1Ev+0x18>)
   b66dc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b66de:	2211      	movs	r2, #17
   b66e0:	f840 3b04 	str.w	r3, [r0], #4
   b66e4:	2100      	movs	r1, #0
   b66e6:	f001 fbd5 	bl	b7e94 <memset>
}
   b66ea:	4620      	mov	r0, r4
   b66ec:	bd10      	pop	{r4, pc}
   b66ee:	bf00      	nop
   b66f0:	000b8238 	.word	0x000b8238

000b66f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b66f4:	4603      	mov	r3, r0
   b66f6:	4a07      	ldr	r2, [pc, #28]	; (b6714 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b66f8:	b510      	push	{r4, lr}
   b66fa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b66fe:	f101 0210 	add.w	r2, r1, #16
   b6702:	f851 4b04 	ldr.w	r4, [r1], #4
   b6706:	f843 4b04 	str.w	r4, [r3], #4
   b670a:	4291      	cmp	r1, r2
   b670c:	d1f9      	bne.n	b6702 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b670e:	780a      	ldrb	r2, [r1, #0]
   b6710:	701a      	strb	r2, [r3, #0]
}
   b6712:	bd10      	pop	{r4, pc}
   b6714:	000b8238 	.word	0x000b8238

000b6718 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6718:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b671a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b671e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6722:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6726:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b672a:	2304      	movs	r3, #4
   b672c:	6041      	str	r1, [r0, #4]
   b672e:	7503      	strb	r3, [r0, #20]
}
   b6730:	bd10      	pop	{r4, pc}
	...

000b6734 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6734:	b507      	push	{r0, r1, r2, lr}
   b6736:	4b06      	ldr	r3, [pc, #24]	; (b6750 <_ZN9IPAddressC1EPKh+0x1c>)
   b6738:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b673a:	78cb      	ldrb	r3, [r1, #3]
   b673c:	9300      	str	r3, [sp, #0]
   b673e:	788b      	ldrb	r3, [r1, #2]
   b6740:	784a      	ldrb	r2, [r1, #1]
   b6742:	7809      	ldrb	r1, [r1, #0]
   b6744:	f7ff ffe8 	bl	b6718 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6748:	b003      	add	sp, #12
   b674a:	f85d fb04 	ldr.w	pc, [sp], #4
   b674e:	bf00      	nop
   b6750:	000b8238 	.word	0x000b8238

000b6754 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6754:	4b01      	ldr	r3, [pc, #4]	; (b675c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6756:	4a02      	ldr	r2, [pc, #8]	; (b6760 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6758:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b675a:	4770      	bx	lr
   b675c:	2003e6c0 	.word	0x2003e6c0
   b6760:	000b8244 	.word	0x000b8244

000b6764 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6764:	2300      	movs	r3, #0
   b6766:	6840      	ldr	r0, [r0, #4]
   b6768:	461a      	mov	r2, r3
   b676a:	f7ff bd01 	b.w	b6170 <network_connect>

000b676e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b676e:	6840      	ldr	r0, [r0, #4]
   b6770:	2200      	movs	r2, #0
   b6772:	2102      	movs	r1, #2
   b6774:	f7ff bd0c 	b.w	b6190 <network_disconnect>

000b6778 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6778:	2200      	movs	r2, #0
   b677a:	6840      	ldr	r0, [r0, #4]
   b677c:	4611      	mov	r1, r2
   b677e:	f7ff bcff 	b.w	b6180 <network_connecting>

000b6782 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6782:	2200      	movs	r2, #0
   b6784:	6840      	ldr	r0, [r0, #4]
   b6786:	4611      	mov	r1, r2
   b6788:	f7ff bd0a 	b.w	b61a0 <network_ready>

000b678c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b678c:	2300      	movs	r3, #0
   b678e:	6840      	ldr	r0, [r0, #4]
   b6790:	461a      	mov	r2, r3
   b6792:	4619      	mov	r1, r3
   b6794:	f7ff bd0c 	b.w	b61b0 <network_on>

000b6798 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6798:	2300      	movs	r3, #0
   b679a:	6840      	ldr	r0, [r0, #4]
   b679c:	461a      	mov	r2, r3
   b679e:	4619      	mov	r1, r3
   b67a0:	f7ff bd0e 	b.w	b61c0 <network_off>

000b67a4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b67a4:	6840      	ldr	r0, [r0, #4]
   b67a6:	2100      	movs	r1, #0
   b67a8:	f7ff bd32 	b.w	b6210 <network_is_on>

000b67ac <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b67ac:	6840      	ldr	r0, [r0, #4]
   b67ae:	2100      	movs	r1, #0
   b67b0:	f7ff bd36 	b.w	b6220 <network_is_off>

000b67b4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b67b4:	6840      	ldr	r0, [r0, #4]
   b67b6:	2200      	movs	r2, #0
   b67b8:	f081 0101 	eor.w	r1, r1, #1
   b67bc:	f7ff bd08 	b.w	b61d0 <network_listen>

000b67c0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b67c0:	6840      	ldr	r0, [r0, #4]
   b67c2:	2200      	movs	r2, #0
   b67c4:	f7ff bd14 	b.w	b61f0 <network_set_listen_timeout>

000b67c8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b67c8:	2200      	movs	r2, #0
   b67ca:	6840      	ldr	r0, [r0, #4]
   b67cc:	4611      	mov	r1, r2
   b67ce:	f7ff bd17 	b.w	b6200 <network_get_listen_timeout>

000b67d2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b67d2:	2200      	movs	r2, #0
   b67d4:	6840      	ldr	r0, [r0, #4]
   b67d6:	4611      	mov	r1, r2
   b67d8:	f7ff bd02 	b.w	b61e0 <network_listening>

000b67dc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b67dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b67e0:	b095      	sub	sp, #84	; 0x54
   b67e2:	4614      	mov	r4, r2
   b67e4:	460d      	mov	r5, r1
   b67e6:	4607      	mov	r7, r0
    IPAddress addr;
   b67e8:	f7ff ff76 	bl	b66d8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b67ec:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b67ee:	221c      	movs	r2, #28
   b67f0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b67f2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b67f4:	f001 fb4e 	bl	b7e94 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b67f8:	2340      	movs	r3, #64	; 0x40
   b67fa:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b67fc:	4620      	mov	r0, r4
   b67fe:	466b      	mov	r3, sp
   b6800:	aa0c      	add	r2, sp, #48	; 0x30
   b6802:	2100      	movs	r1, #0
   b6804:	f7ff fb6c 	bl	b5ee0 <netdb_getaddrinfo>
    if (!r) {
   b6808:	4604      	mov	r4, r0
   b680a:	2800      	cmp	r0, #0
   b680c:	d14b      	bne.n	b68a6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b680e:	4602      	mov	r2, r0
   b6810:	2101      	movs	r1, #1
   b6812:	6868      	ldr	r0, [r5, #4]
   b6814:	f7ff fcc4 	bl	b61a0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6818:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b681a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b681c:	4622      	mov	r2, r4
   b681e:	6868      	ldr	r0, [r5, #4]
   b6820:	f7ff fcbe 	bl	b61a0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6824:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6826:	4681      	mov	r9, r0
        bool ok = false;
   b6828:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b682a:	2e00      	cmp	r6, #0
   b682c:	d03b      	beq.n	b68a6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b682e:	2900      	cmp	r1, #0
   b6830:	d139      	bne.n	b68a6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6832:	6873      	ldr	r3, [r6, #4]
   b6834:	2b02      	cmp	r3, #2
   b6836:	d003      	beq.n	b6840 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6838:	2b0a      	cmp	r3, #10
   b683a:	d011      	beq.n	b6860 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b683c:	69f6      	ldr	r6, [r6, #28]
   b683e:	e7f4      	b.n	b682a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6840:	f1b8 0f00 	cmp.w	r8, #0
   b6844:	d0fa      	beq.n	b683c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6846:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6848:	a806      	add	r0, sp, #24
   b684a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b684c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b684e:	f7ff ff71 	bl	b6734 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6852:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6854:	1d3c      	adds	r4, r7, #4
   b6856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6858:	682b      	ldr	r3, [r5, #0]
   b685a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b685c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b685e:	e7ed      	b.n	b683c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6860:	f1b9 0f00 	cmp.w	r9, #0
   b6864:	d0ea      	beq.n	b683c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6866:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6868:	2210      	movs	r2, #16
   b686a:	a801      	add	r0, sp, #4
   b686c:	f001 fb12 	bl	b7e94 <memset>
                    a.v = 6;
   b6870:	2306      	movs	r3, #6
   b6872:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6876:	ad01      	add	r5, sp, #4
   b6878:	f104 0308 	add.w	r3, r4, #8
   b687c:	3418      	adds	r4, #24
   b687e:	6818      	ldr	r0, [r3, #0]
   b6880:	6859      	ldr	r1, [r3, #4]
   b6882:	462a      	mov	r2, r5
   b6884:	c203      	stmia	r2!, {r0, r1}
   b6886:	3308      	adds	r3, #8
   b6888:	42a3      	cmp	r3, r4
   b688a:	4615      	mov	r5, r2
   b688c:	d1f7      	bne.n	b687e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b688e:	a901      	add	r1, sp, #4
   b6890:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6892:	ad07      	add	r5, sp, #28
   b6894:	f7ff ff2e 	bl	b66f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b689a:	1d3c      	adds	r4, r7, #4
   b689c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b689e:	682b      	ldr	r3, [r5, #0]
   b68a0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b68a2:	4649      	mov	r1, r9
   b68a4:	e7ca      	b.n	b683c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b68a6:	9800      	ldr	r0, [sp, #0]
   b68a8:	f7ff fb12 	bl	b5ed0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b68ac:	4638      	mov	r0, r7
   b68ae:	b015      	add	sp, #84	; 0x54
   b68b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b68b4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b68b4:	4b02      	ldr	r3, [pc, #8]	; (b68c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b68b6:	4a03      	ldr	r2, [pc, #12]	; (b68c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b68b8:	601a      	str	r2, [r3, #0]
   b68ba:	2200      	movs	r2, #0
   b68bc:	605a      	str	r2, [r3, #4]

} // spark
   b68be:	4770      	bx	lr
   b68c0:	2003e6c4 	.word	0x2003e6c4
   b68c4:	000b8250 	.word	0x000b8250

000b68c8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b68c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b68ca:	4606      	mov	r6, r0
   b68cc:	460d      	mov	r5, r1
  size_t n = 0;
   b68ce:	188f      	adds	r7, r1, r2
   b68d0:	2400      	movs	r4, #0
  while (size--) {
   b68d2:	42bd      	cmp	r5, r7
   b68d4:	d00c      	beq.n	b68f0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b68d6:	6833      	ldr	r3, [r6, #0]
   b68d8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b68dc:	689b      	ldr	r3, [r3, #8]
   b68de:	4630      	mov	r0, r6
   b68e0:	4798      	blx	r3
     if (chunk>=0)
   b68e2:	1e03      	subs	r3, r0, #0
   b68e4:	db01      	blt.n	b68ea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b68e6:	441c      	add	r4, r3
  while (size--) {
   b68e8:	e7f3      	b.n	b68d2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b68ea:	2c00      	cmp	r4, #0
   b68ec:	bf08      	it	eq
   b68ee:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b68f0:	4620      	mov	r0, r4
   b68f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b68f4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b68f4:	b508      	push	{r3, lr}
  return write(str);
   b68f6:	f7fe fda3 	bl	b5440 <_ZN5Print5writeEPKc>
}
   b68fa:	bd08      	pop	{r3, pc}

000b68fc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b68fc:	6803      	ldr	r3, [r0, #0]
   b68fe:	689b      	ldr	r3, [r3, #8]
   b6900:	4718      	bx	r3

000b6902 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6902:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6904:	210d      	movs	r1, #13
{
   b6906:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6908:	f7ff fff8 	bl	b68fc <_ZN5Print5printEc>
  n += print('\n');
   b690c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b690e:	4604      	mov	r4, r0
  n += print('\n');
   b6910:	4628      	mov	r0, r5
   b6912:	f7ff fff3 	bl	b68fc <_ZN5Print5printEc>
  return n;
}
   b6916:	4420      	add	r0, r4
   b6918:	bd38      	pop	{r3, r4, r5, pc}

000b691a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b691a:	b538      	push	{r3, r4, r5, lr}
   b691c:	4605      	mov	r5, r0
  return write(str);
   b691e:	f7fe fd8f 	bl	b5440 <_ZN5Print5writeEPKc>
   b6922:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6924:	4628      	mov	r0, r5
   b6926:	f7ff ffec 	bl	b6902 <_ZN5Print7printlnEv>
  return n;
}
   b692a:	4420      	add	r0, r4
   b692c:	bd38      	pop	{r3, r4, r5, pc}

000b692e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b692e:	b530      	push	{r4, r5, lr}
   b6930:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6932:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6934:	2a01      	cmp	r2, #1
  *str = '\0';
   b6936:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b693a:	bf98      	it	ls
   b693c:	220a      	movls	r2, #10
   b693e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6940:	460d      	mov	r5, r1
   b6942:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6946:	fb01 5312 	mls	r3, r1, r2, r5
   b694a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b694e:	2b09      	cmp	r3, #9
   b6950:	bf94      	ite	ls
   b6952:	3330      	addls	r3, #48	; 0x30
   b6954:	3337      	addhi	r3, #55	; 0x37
   b6956:	b2db      	uxtb	r3, r3
  } while(n);
   b6958:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b695a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b695e:	d9ef      	bls.n	b6940 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6960:	4621      	mov	r1, r4
   b6962:	f7fe fd6d 	bl	b5440 <_ZN5Print5writeEPKc>
}
   b6966:	b00b      	add	sp, #44	; 0x2c
   b6968:	bd30      	pop	{r4, r5, pc}
	...

000b696c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b696c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6970:	ec55 4b10 	vmov	r4, r5, d0
   b6974:	4606      	mov	r6, r0
   b6976:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b6978:	ee10 2a10 	vmov	r2, s0
   b697c:	ee10 0a10 	vmov	r0, s0
   b6980:	462b      	mov	r3, r5
   b6982:	4629      	mov	r1, r5
   b6984:	f001 f9b4 	bl	b7cf0 <__aeabi_dcmpun>
   b6988:	b140      	cbz	r0, b699c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b698a:	4953      	ldr	r1, [pc, #332]	; (b6ad8 <_ZN5Print10printFloatEdh+0x16c>)
   b698c:	4630      	mov	r0, r6
   b698e:	f7fe fd57 	bl	b5440 <_ZN5Print5writeEPKc>
   b6992:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b6994:	4650      	mov	r0, sl
   b6996:	b003      	add	sp, #12
   b6998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b699c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b69a0:	4b4e      	ldr	r3, [pc, #312]	; (b6adc <_ZN5Print10printFloatEdh+0x170>)
   b69a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b69a6:	4620      	mov	r0, r4
   b69a8:	4649      	mov	r1, r9
   b69aa:	f001 f9a1 	bl	b7cf0 <__aeabi_dcmpun>
   b69ae:	b948      	cbnz	r0, b69c4 <_ZN5Print10printFloatEdh+0x58>
   b69b0:	4b4a      	ldr	r3, [pc, #296]	; (b6adc <_ZN5Print10printFloatEdh+0x170>)
   b69b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b69b6:	4620      	mov	r0, r4
   b69b8:	4649      	mov	r1, r9
   b69ba:	f001 f97b 	bl	b7cb4 <__aeabi_dcmple>
   b69be:	b908      	cbnz	r0, b69c4 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b69c0:	4947      	ldr	r1, [pc, #284]	; (b6ae0 <_ZN5Print10printFloatEdh+0x174>)
   b69c2:	e7e3      	b.n	b698c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b69c4:	4b47      	ldr	r3, [pc, #284]	; (b6ae4 <_ZN5Print10printFloatEdh+0x178>)
   b69c6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b69ca:	4620      	mov	r0, r4
   b69cc:	4629      	mov	r1, r5
   b69ce:	f001 f985 	bl	b7cdc <__aeabi_dcmpgt>
   b69d2:	b108      	cbz	r0, b69d8 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b69d4:	4944      	ldr	r1, [pc, #272]	; (b6ae8 <_ZN5Print10printFloatEdh+0x17c>)
   b69d6:	e7d9      	b.n	b698c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b69d8:	4b44      	ldr	r3, [pc, #272]	; (b6aec <_ZN5Print10printFloatEdh+0x180>)
   b69da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b69de:	4620      	mov	r0, r4
   b69e0:	4629      	mov	r1, r5
   b69e2:	f001 f95d 	bl	b7ca0 <__aeabi_dcmplt>
   b69e6:	2800      	cmp	r0, #0
   b69e8:	d1f4      	bne.n	b69d4 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b69ea:	2200      	movs	r2, #0
   b69ec:	2300      	movs	r3, #0
   b69ee:	4620      	mov	r0, r4
   b69f0:	4629      	mov	r1, r5
   b69f2:	f001 f955 	bl	b7ca0 <__aeabi_dcmplt>
   b69f6:	b1d0      	cbz	r0, b6a2e <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b69f8:	212d      	movs	r1, #45	; 0x2d
   b69fa:	4630      	mov	r0, r6
   b69fc:	f7ff ff7e 	bl	b68fc <_ZN5Print5printEc>
     number = -number;
   b6a00:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b6a04:	4682      	mov	sl, r0
     number = -number;
   b6a06:	461d      	mov	r5, r3
  double rounding = 0.5;
   b6a08:	4939      	ldr	r1, [pc, #228]	; (b6af0 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b6a0a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b6af8 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b6a0e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b6a12:	2000      	movs	r0, #0
    rounding /= 10.0;
   b6a14:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b6a18:	fa5f f38b 	uxtb.w	r3, fp
   b6a1c:	429f      	cmp	r7, r3
   b6a1e:	d908      	bls.n	b6a32 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b6a20:	4642      	mov	r2, r8
   b6a22:	464b      	mov	r3, r9
   b6a24:	f000 fff4 	bl	b7a10 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b6a28:	f10b 0b01 	add.w	fp, fp, #1
   b6a2c:	e7f4      	b.n	b6a18 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b6a2e:	4682      	mov	sl, r0
   b6a30:	e7ea      	b.n	b6a08 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b6a32:	4622      	mov	r2, r4
   b6a34:	462b      	mov	r3, r5
   b6a36:	f000 fd0b 	bl	b7450 <__adddf3>
   b6a3a:	460d      	mov	r5, r1
   b6a3c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b6a3e:	f001 f995 	bl	b7d6c <__aeabi_d2uiz>
   b6a42:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b6a44:	f000 fe40 	bl	b76c8 <__aeabi_ui2d>
   b6a48:	4602      	mov	r2, r0
   b6a4a:	460b      	mov	r3, r1
   b6a4c:	4620      	mov	r0, r4
   b6a4e:	4629      	mov	r1, r5
   b6a50:	f000 fcfc 	bl	b744c <__aeabi_dsub>
        return printNumber(val, base) + t;
   b6a54:	220a      	movs	r2, #10
   b6a56:	4604      	mov	r4, r0
   b6a58:	460d      	mov	r5, r1
   b6a5a:	4630      	mov	r0, r6
   b6a5c:	4641      	mov	r1, r8
   b6a5e:	f7ff ff66 	bl	b692e <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b6a62:	4482      	add	sl, r0
  if (digits > 0) {
   b6a64:	2f00      	cmp	r7, #0
   b6a66:	d095      	beq.n	b6994 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b6a68:	4922      	ldr	r1, [pc, #136]	; (b6af4 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b6a6a:	f8df 908c 	ldr.w	r9, [pc, #140]	; b6af8 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b6a6e:	4630      	mov	r0, r6
   b6a70:	f7fe fce6 	bl	b5440 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b6a74:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b6a78:	4482      	add	sl, r0
  while (digits-- > 0)
   b6a7a:	2f00      	cmp	r7, #0
   b6a7c:	d08a      	beq.n	b6994 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b6a7e:	4642      	mov	r2, r8
   b6a80:	464b      	mov	r3, r9
   b6a82:	4620      	mov	r0, r4
   b6a84:	4629      	mov	r1, r5
   b6a86:	f000 fe99 	bl	b77bc <__aeabi_dmul>
   b6a8a:	4604      	mov	r4, r0
   b6a8c:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b6a8e:	f001 f945 	bl	b7d1c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b6a92:	f1b0 0b00 	subs.w	fp, r0, #0
   b6a96:	da1c      	bge.n	b6ad2 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b6a98:	212d      	movs	r1, #45	; 0x2d
   b6a9a:	4630      	mov	r0, r6
   b6a9c:	f7ff ff2e 	bl	b68fc <_ZN5Print5printEc>
            val = -n;
   b6aa0:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b6aa4:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b6aa6:	220a      	movs	r2, #10
   b6aa8:	4630      	mov	r0, r6
   b6aaa:	9301      	str	r3, [sp, #4]
   b6aac:	f7ff ff3f 	bl	b692e <_ZN5Print11printNumberEmh>
   b6ab0:	9b01      	ldr	r3, [sp, #4]
   b6ab2:	4418      	add	r0, r3
    n += print(toPrint);
   b6ab4:	4482      	add	sl, r0
    remainder -= toPrint;
   b6ab6:	4658      	mov	r0, fp
   b6ab8:	f000 fe16 	bl	b76e8 <__aeabi_i2d>
   b6abc:	4602      	mov	r2, r0
   b6abe:	460b      	mov	r3, r1
   b6ac0:	4620      	mov	r0, r4
   b6ac2:	4629      	mov	r1, r5
   b6ac4:	f000 fcc2 	bl	b744c <__aeabi_dsub>
   b6ac8:	3f01      	subs	r7, #1
   b6aca:	4604      	mov	r4, r0
   b6acc:	460d      	mov	r5, r1
   b6ace:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b6ad0:	e7d3      	b.n	b6a7a <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b6ad2:	4659      	mov	r1, fp
        size_t t = 0;
   b6ad4:	2300      	movs	r3, #0
   b6ad6:	e7e6      	b.n	b6aa6 <_ZN5Print10printFloatEdh+0x13a>
   b6ad8:	000b8284 	.word	0x000b8284
   b6adc:	7fefffff 	.word	0x7fefffff
   b6ae0:	000b8288 	.word	0x000b8288
   b6ae4:	41efffff 	.word	0x41efffff
   b6ae8:	000b828c 	.word	0x000b828c
   b6aec:	c1efffff 	.word	0xc1efffff
   b6af0:	3fe00000 	.word	0x3fe00000
   b6af4:	000b82c4 	.word	0x000b82c4
   b6af8:	40240000 	.word	0x40240000

000b6afc <_ZN5Print5printEfi>:
{
   b6afc:	b538      	push	{r3, r4, r5, lr}
   b6afe:	4604      	mov	r4, r0
   b6b00:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b6b04:	b2cd      	uxtb	r5, r1
   b6b06:	f000 fe01 	bl	b770c <__aeabi_f2d>
   b6b0a:	ec41 0b10 	vmov	d0, r0, r1
   b6b0e:	4629      	mov	r1, r5
   b6b10:	4620      	mov	r0, r4
}
   b6b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b6b16:	f7ff bf29 	b.w	b696c <_ZN5Print10printFloatEdh>

000b6b1a <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6b1e:	b086      	sub	sp, #24
   b6b20:	af00      	add	r7, sp, #0
   b6b22:	4605      	mov	r5, r0
   b6b24:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6b26:	1d38      	adds	r0, r7, #4
   b6b28:	2114      	movs	r1, #20
{
   b6b2a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6b2c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6b2e:	f7ff fb97 	bl	b6260 <vsnprintf>

    if (n<bufsize)
   b6b32:	2813      	cmp	r0, #19
   b6b34:	d80e      	bhi.n	b6b54 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6b36:	1d39      	adds	r1, r7, #4
   b6b38:	4628      	mov	r0, r5
   b6b3a:	f7fe fc81 	bl	b5440 <_ZN5Print5writeEPKc>
   b6b3e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6b40:	b11e      	cbz	r6, b6b4a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6b42:	4628      	mov	r0, r5
   b6b44:	f7ff fedd 	bl	b6902 <_ZN5Print7printlnEv>
   b6b48:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6b4a:	4620      	mov	r0, r4
   b6b4c:	3718      	adds	r7, #24
   b6b4e:	46bd      	mov	sp, r7
   b6b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6b54:	f100 0308 	add.w	r3, r0, #8
   b6b58:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6b5c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6b5e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6b62:	4622      	mov	r2, r4
   b6b64:	1c41      	adds	r1, r0, #1
   b6b66:	683b      	ldr	r3, [r7, #0]
   b6b68:	4668      	mov	r0, sp
   b6b6a:	f7ff fb79 	bl	b6260 <vsnprintf>
  return write(str);
   b6b6e:	4669      	mov	r1, sp
   b6b70:	4628      	mov	r0, r5
   b6b72:	f7fe fc65 	bl	b5440 <_ZN5Print5writeEPKc>
   b6b76:	4604      	mov	r4, r0
   b6b78:	46c5      	mov	sp, r8
   b6b7a:	e7e1      	b.n	b6b40 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6b7c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6b7c:	4b01      	ldr	r3, [pc, #4]	; (b6b84 <_GLOBAL__sub_I_RGB+0x8>)
   b6b7e:	2200      	movs	r2, #0
   b6b80:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6b82:	4770      	bx	lr
   b6b84:	2003e6cc 	.word	0x2003e6cc

000b6b88 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6b88:	2100      	movs	r1, #0
   b6b8a:	f7ff b9f9 	b.w	b5f80 <hal_spi_release>

000b6b8e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6b8e:	2100      	movs	r1, #0
   b6b90:	f7ff b9ee 	b.w	b5f70 <hal_spi_acquire>

000b6b94 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6b94:	b510      	push	{r4, lr}
   b6b96:	4604      	mov	r4, r0
   b6b98:	4608      	mov	r0, r1
{
    _spi = spi;
   b6b9a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6b9c:	f7ff f9b8 	bl	b5f10 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6ba0:	2300      	movs	r3, #0
   b6ba2:	6063      	str	r3, [r4, #4]
}
   b6ba4:	4620      	mov	r0, r4
   b6ba6:	bd10      	pop	{r4, pc}

000b6ba8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6ba8:	b513      	push	{r0, r1, r4, lr}
   b6baa:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6bac:	7800      	ldrb	r0, [r0, #0]
   b6bae:	f7ff ffee 	bl	b6b8e <_ZN8SPIClass4lockEv.isra.0>
   b6bb2:	b958      	cbnz	r0, b6bcc <_ZN8SPIClass5beginEv+0x24>
   b6bb4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6bb6:	9001      	str	r0, [sp, #4]
   b6bb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6bbc:	f7ff f998 	bl	b5ef0 <hal_spi_begin>
        unlock();
   b6bc0:	9801      	ldr	r0, [sp, #4]
    }
}
   b6bc2:	b002      	add	sp, #8
   b6bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6bc8:	f7ff bfde 	b.w	b6b88 <_ZN8SPIClass6unlockEv.isra.0>
   b6bcc:	b002      	add	sp, #8
   b6bce:	bd10      	pop	{r4, pc}

000b6bd0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b6bd0:	7800      	ldrb	r0, [r0, #0]
   b6bd2:	f7ff bfd9 	b.w	b6b88 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b6bd8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6bd8:	0840      	lsrs	r0, r0, #1
{
   b6bda:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6bdc:	6018      	str	r0, [r3, #0]
   b6bde:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6be0:	6818      	ldr	r0, [r3, #0]
   b6be2:	4288      	cmp	r0, r1
   b6be4:	b2e5      	uxtb	r5, r4
   b6be6:	d906      	bls.n	b6bf6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6be8:	3401      	adds	r4, #1
   b6bea:	2c08      	cmp	r4, #8
   b6bec:	d002      	beq.n	b6bf4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6bee:	0840      	lsrs	r0, r0, #1
   b6bf0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6bf2:	e7f5      	b.n	b6be0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6bf4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6bf6:	4b02      	ldr	r3, [pc, #8]	; (b6c00 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6bf8:	5d5b      	ldrb	r3, [r3, r5]
   b6bfa:	7013      	strb	r3, [r2, #0]
}
   b6bfc:	bd30      	pop	{r4, r5, pc}
   b6bfe:	bf00      	nop
   b6c00:	000b8290 	.word	0x000b8290

000b6c04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6c04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6c08:	4606      	mov	r6, r0
   b6c0a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6c0c:	7800      	ldrb	r0, [r0, #0]
{
   b6c0e:	460c      	mov	r4, r1
    CHECK(lock());
   b6c10:	f7ff ffbd 	bl	b6b8e <_ZN8SPIClass4lockEv.isra.0>
   b6c14:	2800      	cmp	r0, #0
   b6c16:	db1b      	blt.n	b6c50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6c18:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6c1a:	2214      	movs	r2, #20
   b6c1c:	2100      	movs	r1, #0
   b6c1e:	a809      	add	r0, sp, #36	; 0x24
   b6c20:	f001 f938 	bl	b7e94 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6c24:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6c26:	2200      	movs	r2, #0
   b6c28:	a909      	add	r1, sp, #36	; 0x24
   b6c2a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b6c2c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6c30:	f7ff f97e 	bl	b5f30 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6c34:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6c38:	b113      	cbz	r3, b6c40 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b6c3a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b6c3e:	b155      	cbz	r5, b6c56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6c40:	2700      	movs	r7, #0
   b6c42:	46b9      	mov	r9, r7
   b6c44:	46b8      	mov	r8, r7
   b6c46:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6c48:	7923      	ldrb	r3, [r4, #4]
   b6c4a:	b15d      	cbz	r5, b6c64 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b6c4c:	b1c3      	cbz	r3, b6c80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b6c4e:	2000      	movs	r0, #0
}
   b6c50:	b00f      	add	sp, #60	; 0x3c
   b6c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b6c56:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b6c5a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b6c5e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b6c62:	e7f1      	b.n	b6c48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b6c64:	2b00      	cmp	r3, #0
   b6c66:	d135      	bne.n	b6cd4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b6c68:	68a3      	ldr	r3, [r4, #8]
   b6c6a:	4543      	cmp	r3, r8
   b6c6c:	d108      	bne.n	b6c80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b6c6e:	f88d 9020 	strb.w	r9, [sp, #32]
   b6c72:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6c76:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6c7a:	89a3      	ldrh	r3, [r4, #12]
   b6c7c:	429a      	cmp	r2, r3
   b6c7e:	d0e6      	beq.n	b6c4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b6c80:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6c82:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b6c84:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6c88:	980a      	ldr	r0, [sp, #40]	; 0x28
   b6c8a:	ab04      	add	r3, sp, #16
   b6c8c:	f10d 020f 	add.w	r2, sp, #15
   b6c90:	f7ff ffa2 	bl	b6bd8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b6c94:	7921      	ldrb	r1, [r4, #4]
   b6c96:	b985      	cbnz	r5, b6cba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b6c98:	b989      	cbnz	r1, b6cbe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6c9a:	68a3      	ldr	r3, [r4, #8]
   b6c9c:	4543      	cmp	r3, r8
   b6c9e:	d30e      	bcc.n	b6cbe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b6ca0:	f88d 9020 	strb.w	r9, [sp, #32]
   b6ca4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6ca8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6cac:	89a3      	ldrh	r3, [r4, #12]
   b6cae:	429a      	cmp	r2, r3
   b6cb0:	d105      	bne.n	b6cbe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b6cb2:	9b04      	ldr	r3, [sp, #16]
   b6cb4:	4543      	cmp	r3, r8
   b6cb6:	d102      	bne.n	b6cbe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6cb8:	e7c9      	b.n	b6c4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b6cba:	2900      	cmp	r1, #0
   b6cbc:	d1f9      	bne.n	b6cb2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b6cbe:	2300      	movs	r3, #0
   b6cc0:	9301      	str	r3, [sp, #4]
   b6cc2:	7b63      	ldrb	r3, [r4, #13]
   b6cc4:	9300      	str	r3, [sp, #0]
   b6cc6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b6cca:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b6ccc:	7830      	ldrb	r0, [r6, #0]
   b6cce:	f7ff f947 	bl	b5f60 <hal_spi_set_settings>
   b6cd2:	e7bc      	b.n	b6c4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b6cd4:	e9cd 5500 	strd	r5, r5, [sp]
   b6cd8:	462b      	mov	r3, r5
   b6cda:	462a      	mov	r2, r5
   b6cdc:	2101      	movs	r1, #1
   b6cde:	e7f5      	b.n	b6ccc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b6ce0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b6ce0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6ce2:	7800      	ldrb	r0, [r0, #0]
   b6ce4:	f7ff f90c 	bl	b5f00 <hal_spi_transfer>
}
   b6ce8:	b2c0      	uxtb	r0, r0
   b6cea:	bd08      	pop	{r3, pc}

000b6cec <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b6cec:	b530      	push	{r4, r5, lr}
   b6cee:	b087      	sub	sp, #28
   b6cf0:	4604      	mov	r4, r0
   b6cf2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b6cf4:	9500      	str	r5, [sp, #0]
   b6cf6:	7800      	ldrb	r0, [r0, #0]
   b6cf8:	f7ff f922 	bl	b5f40 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b6cfc:	b93d      	cbnz	r5, b6d0e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b6cfe:	7820      	ldrb	r0, [r4, #0]
   b6d00:	a902      	add	r1, sp, #8
   b6d02:	f7ff f925 	bl	b5f50 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b6d06:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b6d0a:	07db      	lsls	r3, r3, #31
   b6d0c:	d4f7      	bmi.n	b6cfe <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b6d0e:	b007      	add	sp, #28
   b6d10:	bd30      	pop	{r4, r5, pc}

000b6d12 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   b6d12:	b510      	push	{r4, lr}
   b6d14:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b6d16:	6800      	ldr	r0, [r0, #0]
   b6d18:	b118      	cbz	r0, b6d22 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   b6d1a:	f7ff fa91 	bl	b6240 <free>
            wakeupSource_ = nullptr;
   b6d1e:	2300      	movs	r3, #0
   b6d20:	6023      	str	r3, [r4, #0]
        }
    }
   b6d22:	bd10      	pop	{r4, pc}

000b6d24 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   b6d24:	b538      	push	{r3, r4, r5, lr}
   b6d26:	460c      	mov	r4, r1
   b6d28:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b6d2a:	f7ff fff2 	bl	b6d12 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   b6d2e:	b154      	cbz	r4, b6d46 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   b6d30:	8820      	ldrh	r0, [r4, #0]
   b6d32:	f7ff fa7d 	bl	b6230 <malloc>
   b6d36:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   b6d38:	b128      	cbz	r0, b6d46 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   b6d3a:	8822      	ldrh	r2, [r4, #0]
   b6d3c:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   b6d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   b6d42:	f001 b899 	b.w	b7e78 <memcpy>
    }
   b6d46:	bd38      	pop	{r3, r4, r5, pc}

000b6d48 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b6d48:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   b6d4a:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   b6d4e:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   b6d50:	f8d1 3006 	ldr.w	r3, [r1, #6]
   b6d54:	f8c0 3006 	str.w	r3, [r0, #6]
   b6d58:	894b      	ldrh	r3, [r1, #10]
   b6d5a:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b6d5c:	460c      	mov	r4, r1
   b6d5e:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b6d60:	f7ff ffd7 	bl	b6d12 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   b6d64:	6823      	ldr	r3, [r4, #0]
   b6d66:	b113      	cbz	r3, b6d6e <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   b6d68:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   b6d6a:	2300      	movs	r3, #0
   b6d6c:	6023      	str	r3, [r4, #0]
    }
   b6d6e:	bd38      	pop	{r3, r4, r5, pc}

000b6d70 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   b6d70:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6d72:	4d2b      	ldr	r5, [pc, #172]	; (b6e20 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   b6d74:	7d0b      	ldrb	r3, [r1, #20]
   b6d76:	4604      	mov	r4, r0
   b6d78:	b08b      	sub	sp, #44	; 0x2c
   b6d7a:	4608      	mov	r0, r1
   b6d7c:	1daf      	adds	r7, r5, #6
   b6d7e:	2b00      	cmp	r3, #0
   b6d80:	d036      	beq.n	b6df0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   b6d82:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   b6d84:	791b      	ldrb	r3, [r3, #4]
   b6d86:	2b00      	cmp	r3, #0
   b6d88:	d032      	beq.n	b6df0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   b6d8a:	4b26      	ldr	r3, [pc, #152]	; (b6e24 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   b6d8c:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   b6d8e:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   b6d90:	a902      	add	r1, sp, #8
   b6d92:	3004      	adds	r0, #4
   b6d94:	e9cd 2202 	strd	r2, r2, [sp, #8]
   b6d98:	f7ff f9b6 	bl	b6108 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   b6d9c:	f8dd 300e 	ldr.w	r3, [sp, #14]
   b6da0:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   b6da4:	b200      	sxth	r0, r0
   b6da6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   b6daa:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   b6dae:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   b6db0:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   b6db2:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b6db4:	4628      	mov	r0, r5
   b6db6:	f7ff ffb5 	bl	b6d24 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   b6dba:	a802      	add	r0, sp, #8
   b6dbc:	f7ff ffa9 	bl	b6d12 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   b6dc0:	2300      	movs	r3, #0
   b6dc2:	6023      	str	r3, [r4, #0]
   b6dc4:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   b6dc6:	71a3      	strb	r3, [r4, #6]
   b6dc8:	8123      	strh	r3, [r4, #8]
   b6dca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6dce:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   b6dd0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   b6dd4:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   b6dd6:	f8d5 3006 	ldr.w	r3, [r5, #6]
   b6dda:	f8c4 3006 	str.w	r3, [r4, #6]
   b6dde:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b6de0:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   b6de2:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   b6de4:	4620      	mov	r0, r4
   b6de6:	f7ff ff9d 	bl	b6d24 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   b6dea:	4620      	mov	r0, r4
   b6dec:	b00b      	add	sp, #44	; 0x2c
   b6dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   b6df0:	2600      	movs	r6, #0
   b6df2:	2320      	movs	r3, #32
   b6df4:	e9cd 3602 	strd	r3, r6, [sp, #8]
   b6df8:	4b0b      	ldr	r3, [pc, #44]	; (b6e28 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   b6dfa:	9300      	str	r3, [sp, #0]
   b6dfc:	aa02      	add	r2, sp, #8
   b6dfe:	4633      	mov	r3, r6
   b6e00:	490a      	ldr	r1, [pc, #40]	; (b6e2c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   b6e02:	2032      	movs	r0, #50	; 0x32
   b6e04:	f7ff f93c 	bl	b6080 <log_message>
            : wakeupSource_(nullptr),
   b6e08:	4b06      	ldr	r3, [pc, #24]	; (b6e24 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   b6e0a:	4805      	ldr	r0, [pc, #20]	; (b6e20 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   b6e0c:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   b6e0e:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   b6e12:	a902      	add	r1, sp, #8
   b6e14:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b6e18:	f7ff ff96 	bl	b6d48 <_ZN17SystemSleepResultaSEOS_.isra.0>
   b6e1c:	e7cd      	b.n	b6dba <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   b6e1e:	bf00      	nop
   b6e20:	2003e6dc 	.word	0x2003e6dc
   b6e24:	ffff0000 	.word	0xffff0000
   b6e28:	000b829f 	.word	0x000b829f
   b6e2c:	000b8298 	.word	0x000b8298

000b6e30 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6e30:	4b05      	ldr	r3, [pc, #20]	; (b6e48 <_GLOBAL__sub_I_System+0x18>)
   b6e32:	2202      	movs	r2, #2
   b6e34:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b6e36:	4b05      	ldr	r3, [pc, #20]	; (b6e4c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6e38:	4a05      	ldr	r2, [pc, #20]	; (b6e50 <_GLOBAL__sub_I_System+0x20>)
   b6e3a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6e3c:	2000      	movs	r0, #0
   b6e3e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6e42:	f7ff b92d 	b.w	b60a0 <set_system_mode>
   b6e46:	bf00      	nop
   b6e48:	2003e6e8 	.word	0x2003e6e8
   b6e4c:	2003e6dc 	.word	0x2003e6dc
   b6e50:	ffff0000 	.word	0xffff0000

000b6e54 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b6e54:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b6e56:	2000      	movs	r0, #0
   b6e58:	f7ff f97a 	bl	b6150 <spark_sync_time_pending>
   b6e5c:	b128      	cbz	r0, b6e6a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6e5e:	f7ff f96f 	bl	b6140 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b6e62:	f080 0001 	eor.w	r0, r0, #1
   b6e66:	b2c0      	uxtb	r0, r0
    }
   b6e68:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b6e6a:	2001      	movs	r0, #1
   b6e6c:	e7fc      	b.n	b6e68 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b6e6e <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b6e6e:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b6e70:	2000      	movs	r0, #0
   b6e72:	f7fe ff8d 	bl	b5d90 <hal_rtc_time_is_valid>
    if (rtcstate)
   b6e76:	4604      	mov	r4, r0
   b6e78:	b9a0      	cbnz	r0, b6ea4 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b6e7a:	f7ff f909 	bl	b6090 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b6e7e:	2801      	cmp	r0, #1
   b6e80:	d110      	bne.n	b6ea4 <_ZN9TimeClass7isValidEv+0x36>
   b6e82:	4620      	mov	r0, r4
   b6e84:	f7ff f924 	bl	b60d0 <system_thread_get_state>
   b6e88:	b960      	cbnz	r0, b6ea4 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b6e8a:	f7ff ffe3 	bl	b6e54 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b6e8e:	b910      	cbnz	r0, b6e96 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b6e90:	f7ff f94e 	bl	b6130 <spark_process>
        while (_while() && !_condition()) {
   b6e94:	e7f9      	b.n	b6e8a <_ZN9TimeClass7isValidEv+0x1c>
   b6e96:	f7ff ffdd 	bl	b6e54 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b6e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b6e9e:	2000      	movs	r0, #0
   b6ea0:	f7fe bf76 	b.w	b5d90 <hal_rtc_time_is_valid>
}
   b6ea4:	4620      	mov	r0, r4
   b6ea6:	bd10      	pop	{r4, pc}

000b6ea8 <_ZN9TimeClass3nowEv>:
{
   b6ea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b6eaa:	f7ff ffe0 	bl	b6e6e <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b6eae:	2210      	movs	r2, #16
   b6eb0:	2100      	movs	r1, #0
   b6eb2:	4668      	mov	r0, sp
   b6eb4:	f000 ffee 	bl	b7e94 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b6eb8:	2100      	movs	r1, #0
   b6eba:	4668      	mov	r0, sp
   b6ebc:	f7fe ff70 	bl	b5da0 <hal_rtc_get_time>
}
   b6ec0:	9800      	ldr	r0, [sp, #0]
   b6ec2:	b005      	add	sp, #20
   b6ec4:	f85d fb04 	ldr.w	pc, [sp], #4

000b6ec8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6ec8:	4b02      	ldr	r3, [pc, #8]	; (b6ed4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6eca:	681a      	ldr	r2, [r3, #0]
   b6ecc:	4b02      	ldr	r3, [pc, #8]	; (b6ed8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6ece:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6ed0:	4770      	bx	lr
   b6ed2:	bf00      	nop
   b6ed4:	2003de14 	.word	0x2003de14
   b6ed8:	2003e6ec 	.word	0x2003e6ec

000b6edc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6edc:	4770      	bx	lr

000b6ede <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6ede:	7441      	strb	r1, [r0, #17]
}
   b6ee0:	4770      	bx	lr

000b6ee2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6ee2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6ee4:	7c00      	ldrb	r0, [r0, #16]
   b6ee6:	f7ff f883 	bl	b5ff0 <hal_usart_available_data_for_write>
}
   b6eea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6eee:	bd08      	pop	{r3, pc}

000b6ef0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6ef0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6ef2:	7c00      	ldrb	r0, [r0, #16]
   b6ef4:	f7ff f854 	bl	b5fa0 <hal_usart_available>
}
   b6ef8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6efc:	bd08      	pop	{r3, pc}

000b6efe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6efe:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6f00:	7c00      	ldrb	r0, [r0, #16]
   b6f02:	f7ff f85d 	bl	b5fc0 <hal_usart_peek>
}
   b6f06:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6f0a:	bd08      	pop	{r3, pc}

000b6f0c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6f0c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6f0e:	7c00      	ldrb	r0, [r0, #16]
   b6f10:	f7ff f84e 	bl	b5fb0 <hal_usart_read>
}
   b6f14:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6f18:	bd08      	pop	{r3, pc}

000b6f1a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6f1a:	7c00      	ldrb	r0, [r0, #16]
   b6f1c:	f7ff b858 	b.w	b5fd0 <hal_usart_flush>

000b6f20 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6f22:	7c45      	ldrb	r5, [r0, #17]
{
   b6f24:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6f26:	b12d      	cbz	r5, b6f34 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6f28:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6f2a:	b003      	add	sp, #12
   b6f2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6f30:	f7ff b82e 	b.w	b5f90 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6f34:	7c00      	ldrb	r0, [r0, #16]
   b6f36:	9101      	str	r1, [sp, #4]
   b6f38:	f7ff f85a 	bl	b5ff0 <hal_usart_available_data_for_write>
   b6f3c:	2800      	cmp	r0, #0
   b6f3e:	9901      	ldr	r1, [sp, #4]
   b6f40:	dcf2      	bgt.n	b6f28 <_ZN11USARTSerial5writeEh+0x8>
}
   b6f42:	4628      	mov	r0, r5
   b6f44:	b003      	add	sp, #12
   b6f46:	bd30      	pop	{r4, r5, pc}

000b6f48 <_ZN11USARTSerialD0Ev>:
   b6f48:	b510      	push	{r4, lr}
   b6f4a:	2114      	movs	r1, #20
   b6f4c:	4604      	mov	r4, r0
   b6f4e:	f7fd f8a4 	bl	b409a <_ZdlPvj>
   b6f52:	4620      	mov	r0, r4
   b6f54:	bd10      	pop	{r4, pc}
	...

000b6f58 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6f58:	b510      	push	{r4, lr}
   b6f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6f5e:	4604      	mov	r4, r0
   b6f60:	4608      	mov	r0, r1
   b6f62:	4611      	mov	r1, r2
   b6f64:	2200      	movs	r2, #0
   b6f66:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6f6a:	4b04      	ldr	r3, [pc, #16]	; (b6f7c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6f6c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6f6e:	2301      	movs	r3, #1
  _serial = serial;
   b6f70:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6f72:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6f74:	f7ff f844 	bl	b6000 <hal_usart_init_ex>
}
   b6f78:	4620      	mov	r0, r4
   b6f7a:	bd10      	pop	{r4, pc}
   b6f7c:	000b82ec 	.word	0x000b82ec

000b6f80 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6f80:	7441      	strb	r1, [r0, #17]
}
   b6f82:	4770      	bx	lr

000b6f84 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6f84:	4770      	bx	lr

000b6f86 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6f86:	4770      	bx	lr

000b6f88 <_ZN9USBSerial4readEv>:
{
   b6f88:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6f8a:	2100      	movs	r1, #0
   b6f8c:	7c00      	ldrb	r0, [r0, #16]
   b6f8e:	f7ff f85f 	bl	b6050 <HAL_USB_USART_Receive_Data>
}
   b6f92:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6f96:	bd08      	pop	{r3, pc}

000b6f98 <_ZN9USBSerial4peekEv>:
{
   b6f98:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6f9a:	2101      	movs	r1, #1
   b6f9c:	7c00      	ldrb	r0, [r0, #16]
   b6f9e:	f7ff f857 	bl	b6050 <HAL_USB_USART_Receive_Data>
}
   b6fa2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6fa6:	bd08      	pop	{r3, pc}

000b6fa8 <_ZN9USBSerial17availableForWriteEv>:
{
   b6fa8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6faa:	7c00      	ldrb	r0, [r0, #16]
   b6fac:	f7ff f848 	bl	b6040 <HAL_USB_USART_Available_Data_For_Write>
}
   b6fb0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6fb4:	bd08      	pop	{r3, pc}

000b6fb6 <_ZN9USBSerial9availableEv>:
{
   b6fb6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6fb8:	7c00      	ldrb	r0, [r0, #16]
   b6fba:	f7ff f839 	bl	b6030 <HAL_USB_USART_Available_Data>
}
   b6fbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6fc2:	bd08      	pop	{r3, pc}

000b6fc4 <_ZN9USBSerial5writeEh>:
{
   b6fc4:	b513      	push	{r0, r1, r4, lr}
   b6fc6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6fc8:	7c00      	ldrb	r0, [r0, #16]
{
   b6fca:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6fcc:	f7ff f838 	bl	b6040 <HAL_USB_USART_Available_Data_For_Write>
   b6fd0:	2800      	cmp	r0, #0
   b6fd2:	9901      	ldr	r1, [sp, #4]
   b6fd4:	dc01      	bgt.n	b6fda <_ZN9USBSerial5writeEh+0x16>
   b6fd6:	7c60      	ldrb	r0, [r4, #17]
   b6fd8:	b120      	cbz	r0, b6fe4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6fda:	7c20      	ldrb	r0, [r4, #16]
   b6fdc:	f7ff f840 	bl	b6060 <HAL_USB_USART_Send_Data>
   b6fe0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6fe4:	b002      	add	sp, #8
   b6fe6:	bd10      	pop	{r4, pc}

000b6fe8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6fe8:	7c00      	ldrb	r0, [r0, #16]
   b6fea:	f7ff b841 	b.w	b6070 <HAL_USB_USART_Flush_Data>

000b6fee <_ZN9USBSerialD0Ev>:
   b6fee:	b510      	push	{r4, lr}
   b6ff0:	2114      	movs	r1, #20
   b6ff2:	4604      	mov	r4, r0
   b6ff4:	f7fd f851 	bl	b409a <_ZdlPvj>
   b6ff8:	4620      	mov	r0, r4
   b6ffa:	bd10      	pop	{r4, pc}

000b6ffc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6ffc:	b510      	push	{r4, lr}
   b6ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7002:	4604      	mov	r4, r0
   b7004:	4608      	mov	r0, r1
   b7006:	2100      	movs	r1, #0
   b7008:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b700c:	4b04      	ldr	r3, [pc, #16]	; (b7020 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b700e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7010:	2301      	movs	r3, #1
  _serial = serial;
   b7012:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7014:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7016:	4611      	mov	r1, r2
   b7018:	f7fe fffa 	bl	b6010 <HAL_USB_USART_Init>
}
   b701c:	4620      	mov	r0, r4
   b701e:	bd10      	pop	{r4, pc}
   b7020:	000b831c 	.word	0x000b831c

000b7024 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7024:	7c00      	ldrb	r0, [r0, #16]
   b7026:	2200      	movs	r2, #0
   b7028:	f7fe bffa 	b.w	b6020 <HAL_USB_USART_Begin>

000b702c <_Z19acquireSerialBufferv>:
{
   b702c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b702e:	2214      	movs	r2, #20
{
   b7030:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7032:	2100      	movs	r1, #0
   b7034:	f000 ff2e 	bl	b7e94 <memset>
}
   b7038:	4620      	mov	r0, r4
   b703a:	bd10      	pop	{r4, pc}

000b703c <_Z16_fetch_usbserialv>:
{
   b703c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b703e:	4c0f      	ldr	r4, [pc, #60]	; (b707c <_Z16_fetch_usbserialv+0x40>)
{
   b7040:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7042:	a803      	add	r0, sp, #12
   b7044:	f7ff fff2 	bl	b702c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7048:	7821      	ldrb	r1, [r4, #0]
   b704a:	f3bf 8f5b 	dmb	ish
   b704e:	f011 0101 	ands.w	r1, r1, #1
   b7052:	d10f      	bne.n	b7074 <_Z16_fetch_usbserialv+0x38>
   b7054:	4620      	mov	r0, r4
   b7056:	9101      	str	r1, [sp, #4]
   b7058:	f7fd f821 	bl	b409e <__cxa_guard_acquire>
   b705c:	9901      	ldr	r1, [sp, #4]
   b705e:	b148      	cbz	r0, b7074 <_Z16_fetch_usbserialv+0x38>
   b7060:	aa03      	add	r2, sp, #12
   b7062:	4807      	ldr	r0, [pc, #28]	; (b7080 <_Z16_fetch_usbserialv+0x44>)
   b7064:	f7ff ffca 	bl	b6ffc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7068:	4620      	mov	r0, r4
   b706a:	f7fd f81d 	bl	b40a8 <__cxa_guard_release>
   b706e:	4805      	ldr	r0, [pc, #20]	; (b7084 <_Z16_fetch_usbserialv+0x48>)
   b7070:	f000 feec 	bl	b7e4c <atexit>
	return _usbserial;
}
   b7074:	4802      	ldr	r0, [pc, #8]	; (b7080 <_Z16_fetch_usbserialv+0x44>)
   b7076:	b008      	add	sp, #32
   b7078:	bd10      	pop	{r4, pc}
   b707a:	bf00      	nop
   b707c:	2003e6f0 	.word	0x2003e6f0
   b7080:	2003e6f4 	.word	0x2003e6f4
   b7084:	000b6f85 	.word	0x000b6f85

000b7088 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7088:	4b01      	ldr	r3, [pc, #4]	; (b7090 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b708a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b708c:	4770      	bx	lr
   b708e:	bf00      	nop
   b7090:	2003de18 	.word	0x2003de18

000b7094 <serialEventRun>:
{
   b7094:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7096:	4b0b      	ldr	r3, [pc, #44]	; (b70c4 <serialEventRun+0x30>)
   b7098:	b143      	cbz	r3, b70ac <serialEventRun+0x18>
   b709a:	f7ff ffcf 	bl	b703c <_Z16_fetch_usbserialv>
   b709e:	6803      	ldr	r3, [r0, #0]
   b70a0:	691b      	ldr	r3, [r3, #16]
   b70a2:	4798      	blx	r3
   b70a4:	2800      	cmp	r0, #0
   b70a6:	dd01      	ble.n	b70ac <serialEventRun+0x18>
        serialEvent();
   b70a8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b70ac:	4b06      	ldr	r3, [pc, #24]	; (b70c8 <serialEventRun+0x34>)
   b70ae:	b143      	cbz	r3, b70c2 <serialEventRun+0x2e>
   b70b0:	f000 f9a0 	bl	b73f4 <_Z22__fetch_global_Serial1v>
   b70b4:	6803      	ldr	r3, [r0, #0]
   b70b6:	691b      	ldr	r3, [r3, #16]
   b70b8:	4798      	blx	r3
   b70ba:	2800      	cmp	r0, #0
   b70bc:	dd01      	ble.n	b70c2 <serialEventRun+0x2e>
        serialEvent1();
   b70be:	f3af 8000 	nop.w
}
   b70c2:	bd08      	pop	{r3, pc}
	...

000b70cc <_post_loop>:
{
   b70cc:	b508      	push	{r3, lr}
	serialEventRun();
   b70ce:	f7ff ffe1 	bl	b7094 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b70d2:	f7fe fe55 	bl	b5d80 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b70d6:	4b01      	ldr	r3, [pc, #4]	; (b70dc <_post_loop+0x10>)
   b70d8:	6018      	str	r0, [r3, #0]
}
   b70da:	bd08      	pop	{r3, pc}
   b70dc:	2003e710 	.word	0x2003e710

000b70e0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b70e0:	4805      	ldr	r0, [pc, #20]	; (b70f8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b70e2:	4a06      	ldr	r2, [pc, #24]	; (b70fc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b70e4:	4906      	ldr	r1, [pc, #24]	; (b7100 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b70e6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b70e8:	1a12      	subs	r2, r2, r0
   b70ea:	f000 fec5 	bl	b7e78 <memcpy>
    __backup_sram_signature = signature;
   b70ee:	4b05      	ldr	r3, [pc, #20]	; (b7104 <_Z33system_initialize_user_backup_ramv+0x24>)
   b70f0:	4a05      	ldr	r2, [pc, #20]	; (b7108 <_Z33system_initialize_user_backup_ramv+0x28>)
   b70f2:	601a      	str	r2, [r3, #0]
}
   b70f4:	bd08      	pop	{r3, pc}
   b70f6:	bf00      	nop
   b70f8:	2003f400 	.word	0x2003f400
   b70fc:	2003f404 	.word	0x2003f404
   b7100:	000b8404 	.word	0x000b8404
   b7104:	2003f400 	.word	0x2003f400
   b7108:	9a271c1e 	.word	0x9a271c1e

000b710c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b710c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b710e:	2300      	movs	r3, #0
   b7110:	9300      	str	r3, [sp, #0]
   b7112:	461a      	mov	r2, r3
   b7114:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7118:	f7fe ffec 	bl	b60f4 <system_ctrl_set_result>
}
   b711c:	b003      	add	sp, #12
   b711e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7124 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7124:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7126:	8843      	ldrh	r3, [r0, #2]
   b7128:	2b0a      	cmp	r3, #10
   b712a:	d008      	beq.n	b713e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b712c:	2b50      	cmp	r3, #80	; 0x50
   b712e:	d10b      	bne.n	b7148 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7130:	4b09      	ldr	r3, [pc, #36]	; (b7158 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7132:	681b      	ldr	r3, [r3, #0]
   b7134:	b14b      	cbz	r3, b714a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7136:	b003      	add	sp, #12
   b7138:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b713c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b713e:	f7ff ffe5 	bl	b710c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7142:	b003      	add	sp, #12
   b7144:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7148:	2300      	movs	r3, #0
   b714a:	9300      	str	r3, [sp, #0]
   b714c:	461a      	mov	r2, r3
   b714e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7152:	f7fe ffcf 	bl	b60f4 <system_ctrl_set_result>
}
   b7156:	e7f4      	b.n	b7142 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7158:	2003e70c 	.word	0x2003e70c

000b715c <module_user_init_hook>:
{
   b715c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b715e:	4812      	ldr	r0, [pc, #72]	; (b71a8 <module_user_init_hook+0x4c>)
   b7160:	2100      	movs	r1, #0
   b7162:	f7ff f88d 	bl	b6280 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7166:	4b11      	ldr	r3, [pc, #68]	; (b71ac <module_user_init_hook+0x50>)
   b7168:	681a      	ldr	r2, [r3, #0]
   b716a:	4b11      	ldr	r3, [pc, #68]	; (b71b0 <module_user_init_hook+0x54>)
   b716c:	429a      	cmp	r2, r3
   b716e:	4b11      	ldr	r3, [pc, #68]	; (b71b4 <module_user_init_hook+0x58>)
   b7170:	bf0c      	ite	eq
   b7172:	2201      	moveq	r2, #1
   b7174:	2200      	movne	r2, #0
   b7176:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7178:	d001      	beq.n	b717e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b717a:	f7ff ffb1 	bl	b70e0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b717e:	f7fe fdef 	bl	b5d60 <HAL_RNG_GetRandomNumber>
   b7182:	4604      	mov	r4, r0
    srand(seed);
   b7184:	f000 fe8e 	bl	b7ea4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7188:	4b0b      	ldr	r3, [pc, #44]	; (b71b8 <module_user_init_hook+0x5c>)
   b718a:	b113      	cbz	r3, b7192 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b718c:	4620      	mov	r0, r4
   b718e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7192:	2100      	movs	r1, #0
   b7194:	4808      	ldr	r0, [pc, #32]	; (b71b8 <module_user_init_hook+0x5c>)
   b7196:	f7fe ffe3 	bl	b6160 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b719a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b719e:	4807      	ldr	r0, [pc, #28]	; (b71bc <module_user_init_hook+0x60>)
   b71a0:	2100      	movs	r1, #0
   b71a2:	f7fe bf9d 	b.w	b60e0 <system_ctrl_set_app_request_handler>
   b71a6:	bf00      	nop
   b71a8:	000b7089 	.word	0x000b7089
   b71ac:	2003f400 	.word	0x2003f400
   b71b0:	9a271c1e 	.word	0x9a271c1e
   b71b4:	2003e708 	.word	0x2003e708
   b71b8:	00000000 	.word	0x00000000
   b71bc:	000b7125 	.word	0x000b7125

000b71c0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b71c0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b71c2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b71c4:	d902      	bls.n	b71cc <pinAvailable+0xc>
    return false;
   b71c6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b71c8:	b002      	add	sp, #8
   b71ca:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b71cc:	f1a0 030b 	sub.w	r3, r0, #11
   b71d0:	2b02      	cmp	r3, #2
   b71d2:	d81a      	bhi.n	b720a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b71d4:	4c17      	ldr	r4, [pc, #92]	; (b7234 <pinAvailable+0x74>)
   b71d6:	7821      	ldrb	r1, [r4, #0]
   b71d8:	f3bf 8f5b 	dmb	ish
   b71dc:	f011 0101 	ands.w	r1, r1, #1
   b71e0:	d10b      	bne.n	b71fa <pinAvailable+0x3a>
   b71e2:	4620      	mov	r0, r4
   b71e4:	9101      	str	r1, [sp, #4]
   b71e6:	f7fc ff5a 	bl	b409e <__cxa_guard_acquire>
   b71ea:	9901      	ldr	r1, [sp, #4]
   b71ec:	b128      	cbz	r0, b71fa <pinAvailable+0x3a>
   b71ee:	4812      	ldr	r0, [pc, #72]	; (b7238 <pinAvailable+0x78>)
   b71f0:	f7ff fcd0 	bl	b6b94 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b71f4:	4620      	mov	r0, r4
   b71f6:	f7fc ff57 	bl	b40a8 <__cxa_guard_release>
   b71fa:	4b0f      	ldr	r3, [pc, #60]	; (b7238 <pinAvailable+0x78>)
   b71fc:	7818      	ldrb	r0, [r3, #0]
   b71fe:	f7fe fe8f 	bl	b5f20 <hal_spi_is_enabled>
   b7202:	2800      	cmp	r0, #0
   b7204:	d1df      	bne.n	b71c6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7206:	2001      	movs	r0, #1
   b7208:	e7de      	b.n	b71c8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b720a:	2801      	cmp	r0, #1
   b720c:	d809      	bhi.n	b7222 <pinAvailable+0x62>
   b720e:	f000 f88d 	bl	b732c <_Z19__fetch_global_Wirev>
   b7212:	2100      	movs	r1, #0
   b7214:	7c00      	ldrb	r0, [r0, #16]
   b7216:	f7fe fe2b 	bl	b5e70 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b721a:	f080 0001 	eor.w	r0, r0, #1
   b721e:	b2c0      	uxtb	r0, r0
   b7220:	e7d2      	b.n	b71c8 <pinAvailable+0x8>
   b7222:	3809      	subs	r0, #9
   b7224:	2801      	cmp	r0, #1
   b7226:	d8ee      	bhi.n	b7206 <pinAvailable+0x46>
   b7228:	f000 f8e4 	bl	b73f4 <_Z22__fetch_global_Serial1v>
   b722c:	7c00      	ldrb	r0, [r0, #16]
   b722e:	f7fe fed7 	bl	b5fe0 <hal_usart_is_enabled>
   b7232:	e7f2      	b.n	b721a <pinAvailable+0x5a>
   b7234:	2003de80 	.word	0x2003de80
   b7238:	2003de84 	.word	0x2003de84

000b723c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b723c:	2823      	cmp	r0, #35	; 0x23
{
   b723e:	b538      	push	{r3, r4, r5, lr}
   b7240:	4604      	mov	r4, r0
   b7242:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7244:	d80a      	bhi.n	b725c <pinMode+0x20>
   b7246:	29ff      	cmp	r1, #255	; 0xff
   b7248:	d008      	beq.n	b725c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b724a:	f7ff ffb9 	bl	b71c0 <pinAvailable>
   b724e:	b128      	cbz	r0, b725c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7250:	4629      	mov	r1, r5
   b7252:	4620      	mov	r0, r4
}
   b7254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7258:	f7fe bdb2 	b.w	b5dc0 <HAL_Pin_Mode>
}
   b725c:	bd38      	pop	{r3, r4, r5, pc}

000b725e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b725e:	b538      	push	{r3, r4, r5, lr}
   b7260:	4604      	mov	r4, r0
   b7262:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7264:	f7fe fdb4 	bl	b5dd0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7268:	28ff      	cmp	r0, #255	; 0xff
   b726a:	d010      	beq.n	b728e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b726c:	2806      	cmp	r0, #6
   b726e:	d804      	bhi.n	b727a <digitalWrite+0x1c>
   b7270:	234d      	movs	r3, #77	; 0x4d
   b7272:	fa23 f000 	lsr.w	r0, r3, r0
   b7276:	07c3      	lsls	r3, r0, #31
   b7278:	d409      	bmi.n	b728e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b727a:	4620      	mov	r0, r4
   b727c:	f7ff ffa0 	bl	b71c0 <pinAvailable>
   b7280:	b128      	cbz	r0, b728e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7282:	4629      	mov	r1, r5
   b7284:	4620      	mov	r0, r4
}
   b7286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b728a:	f7fe bda9 	b.w	b5de0 <HAL_GPIO_Write>
}
   b728e:	bd38      	pop	{r3, r4, r5, pc}

000b7290 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b7290:	280d      	cmp	r0, #13
{
   b7292:	b510      	push	{r4, lr}
   b7294:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b7296:	bf9c      	itt	ls
   b7298:	340e      	addls	r4, #14
   b729a:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b729c:	4620      	mov	r0, r4
   b729e:	f7ff ff8f 	bl	b71c0 <pinAvailable>
   b72a2:	b150      	cbz	r0, b72ba <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b72a4:	2103      	movs	r1, #3
   b72a6:	4620      	mov	r0, r4
   b72a8:	f7fe fd82 	bl	b5db0 <HAL_Validate_Pin_Function>
   b72ac:	2803      	cmp	r0, #3
   b72ae:	d104      	bne.n	b72ba <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b72b0:	4620      	mov	r0, r4
}
   b72b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b72b6:	f7fe bd9b 	b.w	b5df0 <hal_adc_read>
}
   b72ba:	2000      	movs	r0, #0
   b72bc:	bd10      	pop	{r4, pc}

000b72be <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b72be:	4770      	bx	lr

000b72c0 <__tcf_1>:
   b72c0:	4770      	bx	lr
	...

000b72c4 <_Z17acquireWireBufferv>:
{
   b72c4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b72c6:	4b0a      	ldr	r3, [pc, #40]	; (b72f0 <_Z17acquireWireBufferv+0x2c>)
   b72c8:	6003      	str	r3, [r0, #0]
   b72ca:	2301      	movs	r3, #1
{
   b72cc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b72ce:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b72d0:	4908      	ldr	r1, [pc, #32]	; (b72f4 <_Z17acquireWireBufferv+0x30>)
   b72d2:	2020      	movs	r0, #32
   b72d4:	f000 f8b4 	bl	b7440 <_ZnajRKSt9nothrow_t>
	};
   b72d8:	2520      	movs	r5, #32
   b72da:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b72dc:	4905      	ldr	r1, [pc, #20]	; (b72f4 <_Z17acquireWireBufferv+0x30>)
	};
   b72de:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b72e0:	4628      	mov	r0, r5
   b72e2:	f000 f8ad 	bl	b7440 <_ZnajRKSt9nothrow_t>
	};
   b72e6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b72ea:	4620      	mov	r0, r4
   b72ec:	bd38      	pop	{r3, r4, r5, pc}
   b72ee:	bf00      	nop
   b72f0:	00010018 	.word	0x00010018
   b72f4:	000b8344 	.word	0x000b8344

000b72f8 <_Z18acquireWire1Bufferv>:
{
   b72f8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b72fa:	4b0a      	ldr	r3, [pc, #40]	; (b7324 <_Z18acquireWire1Bufferv+0x2c>)
   b72fc:	6003      	str	r3, [r0, #0]
   b72fe:	2301      	movs	r3, #1
{
   b7300:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7302:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7304:	4908      	ldr	r1, [pc, #32]	; (b7328 <_Z18acquireWire1Bufferv+0x30>)
   b7306:	2020      	movs	r0, #32
   b7308:	f000 f89a 	bl	b7440 <_ZnajRKSt9nothrow_t>
	};
   b730c:	2520      	movs	r5, #32
   b730e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7310:	4905      	ldr	r1, [pc, #20]	; (b7328 <_Z18acquireWire1Bufferv+0x30>)
	};
   b7312:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7314:	4628      	mov	r0, r5
   b7316:	f000 f893 	bl	b7440 <_ZnajRKSt9nothrow_t>
	};
   b731a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b731e:	4620      	mov	r0, r4
   b7320:	bd38      	pop	{r3, r4, r5, pc}
   b7322:	bf00      	nop
   b7324:	00010018 	.word	0x00010018
   b7328:	000b8344 	.word	0x000b8344

000b732c <_Z19__fetch_global_Wirev>:
{
   b732c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b732e:	4d0e      	ldr	r5, [pc, #56]	; (b7368 <_Z19__fetch_global_Wirev+0x3c>)
   b7330:	7829      	ldrb	r1, [r5, #0]
   b7332:	f3bf 8f5b 	dmb	ish
   b7336:	f011 0401 	ands.w	r4, r1, #1
{
   b733a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b733c:	d111      	bne.n	b7362 <_Z19__fetch_global_Wirev+0x36>
   b733e:	4628      	mov	r0, r5
   b7340:	f7fc fead 	bl	b409e <__cxa_guard_acquire>
   b7344:	b168      	cbz	r0, b7362 <_Z19__fetch_global_Wirev+0x36>
   b7346:	4668      	mov	r0, sp
   b7348:	f7ff ffbc 	bl	b72c4 <_Z17acquireWireBufferv>
   b734c:	466a      	mov	r2, sp
   b734e:	4621      	mov	r1, r4
   b7350:	4806      	ldr	r0, [pc, #24]	; (b736c <_Z19__fetch_global_Wirev+0x40>)
   b7352:	f7ff f923 	bl	b659c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7356:	4628      	mov	r0, r5
   b7358:	f7fc fea6 	bl	b40a8 <__cxa_guard_release>
   b735c:	4804      	ldr	r0, [pc, #16]	; (b7370 <_Z19__fetch_global_Wirev+0x44>)
   b735e:	f000 fd75 	bl	b7e4c <atexit>
	return wire;
}
   b7362:	4802      	ldr	r0, [pc, #8]	; (b736c <_Z19__fetch_global_Wirev+0x40>)
   b7364:	b007      	add	sp, #28
   b7366:	bd30      	pop	{r4, r5, pc}
   b7368:	2003e714 	.word	0x2003e714
   b736c:	2003e71c 	.word	0x2003e71c
   b7370:	000b72bf 	.word	0x000b72bf

000b7374 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   b7374:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b7376:	4c0e      	ldr	r4, [pc, #56]	; (b73b0 <_Z20__fetch_global_Wire1v+0x3c>)
   b7378:	7823      	ldrb	r3, [r4, #0]
   b737a:	f3bf 8f5b 	dmb	ish
   b737e:	07db      	lsls	r3, r3, #31
{
   b7380:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b7382:	d411      	bmi.n	b73a8 <_Z20__fetch_global_Wire1v+0x34>
   b7384:	4620      	mov	r0, r4
   b7386:	f7fc fe8a 	bl	b409e <__cxa_guard_acquire>
   b738a:	b168      	cbz	r0, b73a8 <_Z20__fetch_global_Wire1v+0x34>
   b738c:	4668      	mov	r0, sp
   b738e:	f7ff ffb3 	bl	b72f8 <_Z18acquireWire1Bufferv>
   b7392:	466a      	mov	r2, sp
   b7394:	2101      	movs	r1, #1
   b7396:	4807      	ldr	r0, [pc, #28]	; (b73b4 <_Z20__fetch_global_Wire1v+0x40>)
   b7398:	f7ff f900 	bl	b659c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b739c:	4620      	mov	r0, r4
   b739e:	f7fc fe83 	bl	b40a8 <__cxa_guard_release>
   b73a2:	4805      	ldr	r0, [pc, #20]	; (b73b8 <_Z20__fetch_global_Wire1v+0x44>)
   b73a4:	f000 fd52 	bl	b7e4c <atexit>
	return wire;
}
   b73a8:	4802      	ldr	r0, [pc, #8]	; (b73b4 <_Z20__fetch_global_Wire1v+0x40>)
   b73aa:	b006      	add	sp, #24
   b73ac:	bd10      	pop	{r4, pc}
   b73ae:	bf00      	nop
   b73b0:	2003e718 	.word	0x2003e718
   b73b4:	2003e730 	.word	0x2003e730
   b73b8:	000b72c1 	.word	0x000b72c1

000b73bc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b73bc:	4770      	bx	lr
	...

000b73c0 <_Z20acquireSerial1Bufferv>:
{
   b73c0:	b538      	push	{r3, r4, r5, lr}
   b73c2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b73c4:	2514      	movs	r5, #20
   b73c6:	462a      	mov	r2, r5
   b73c8:	2100      	movs	r1, #0
   b73ca:	f000 fd63 	bl	b7e94 <memset>
   b73ce:	8025      	strh	r5, [r4, #0]
   b73d0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b73d2:	4907      	ldr	r1, [pc, #28]	; (b73f0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b73d4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b73d6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b73d8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b73da:	f000 f831 	bl	b7440 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b73de:	4904      	ldr	r1, [pc, #16]	; (b73f0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b73e0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b73e2:	4628      	mov	r0, r5
   b73e4:	f000 f82c 	bl	b7440 <_ZnajRKSt9nothrow_t>
    };
   b73e8:	60e0      	str	r0, [r4, #12]
}
   b73ea:	4620      	mov	r0, r4
   b73ec:	bd38      	pop	{r3, r4, r5, pc}
   b73ee:	bf00      	nop
   b73f0:	000b8344 	.word	0x000b8344

000b73f4 <_Z22__fetch_global_Serial1v>:
{
   b73f4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b73f6:	4d0e      	ldr	r5, [pc, #56]	; (b7430 <_Z22__fetch_global_Serial1v+0x3c>)
   b73f8:	7829      	ldrb	r1, [r5, #0]
   b73fa:	f3bf 8f5b 	dmb	ish
   b73fe:	f011 0401 	ands.w	r4, r1, #1
{
   b7402:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7404:	d111      	bne.n	b742a <_Z22__fetch_global_Serial1v+0x36>
   b7406:	4628      	mov	r0, r5
   b7408:	f7fc fe49 	bl	b409e <__cxa_guard_acquire>
   b740c:	b168      	cbz	r0, b742a <_Z22__fetch_global_Serial1v+0x36>
   b740e:	a801      	add	r0, sp, #4
   b7410:	f7ff ffd6 	bl	b73c0 <_Z20acquireSerial1Bufferv>
   b7414:	aa01      	add	r2, sp, #4
   b7416:	4621      	mov	r1, r4
   b7418:	4806      	ldr	r0, [pc, #24]	; (b7434 <_Z22__fetch_global_Serial1v+0x40>)
   b741a:	f7ff fd9d 	bl	b6f58 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b741e:	4628      	mov	r0, r5
   b7420:	f7fc fe42 	bl	b40a8 <__cxa_guard_release>
   b7424:	4804      	ldr	r0, [pc, #16]	; (b7438 <_Z22__fetch_global_Serial1v+0x44>)
   b7426:	f000 fd11 	bl	b7e4c <atexit>
    return serial1;
}
   b742a:	4802      	ldr	r0, [pc, #8]	; (b7434 <_Z22__fetch_global_Serial1v+0x40>)
   b742c:	b007      	add	sp, #28
   b742e:	bd30      	pop	{r4, r5, pc}
   b7430:	2003e744 	.word	0x2003e744
   b7434:	2003e748 	.word	0x2003e748
   b7438:	000b73bd 	.word	0x000b73bd

000b743c <_ZnwjRKSt9nothrow_t>:
   b743c:	f7fc be29 	b.w	b4092 <_Znwj>

000b7440 <_ZnajRKSt9nothrow_t>:
   b7440:	f7fc be29 	b.w	b4096 <_Znaj>

000b7444 <__aeabi_drsub>:
   b7444:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b7448:	e002      	b.n	b7450 <__adddf3>
   b744a:	bf00      	nop

000b744c <__aeabi_dsub>:
   b744c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7450 <__adddf3>:
   b7450:	b530      	push	{r4, r5, lr}
   b7452:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b7456:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b745a:	ea94 0f05 	teq	r4, r5
   b745e:	bf08      	it	eq
   b7460:	ea90 0f02 	teqeq	r0, r2
   b7464:	bf1f      	itttt	ne
   b7466:	ea54 0c00 	orrsne.w	ip, r4, r0
   b746a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b746e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7472:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7476:	f000 80e2 	beq.w	b763e <__adddf3+0x1ee>
   b747a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b747e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b7482:	bfb8      	it	lt
   b7484:	426d      	neglt	r5, r5
   b7486:	dd0c      	ble.n	b74a2 <__adddf3+0x52>
   b7488:	442c      	add	r4, r5
   b748a:	ea80 0202 	eor.w	r2, r0, r2
   b748e:	ea81 0303 	eor.w	r3, r1, r3
   b7492:	ea82 0000 	eor.w	r0, r2, r0
   b7496:	ea83 0101 	eor.w	r1, r3, r1
   b749a:	ea80 0202 	eor.w	r2, r0, r2
   b749e:	ea81 0303 	eor.w	r3, r1, r3
   b74a2:	2d36      	cmp	r5, #54	; 0x36
   b74a4:	bf88      	it	hi
   b74a6:	bd30      	pophi	{r4, r5, pc}
   b74a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b74ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b74b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b74b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b74b8:	d002      	beq.n	b74c0 <__adddf3+0x70>
   b74ba:	4240      	negs	r0, r0
   b74bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b74c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b74c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b74c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b74cc:	d002      	beq.n	b74d4 <__adddf3+0x84>
   b74ce:	4252      	negs	r2, r2
   b74d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b74d4:	ea94 0f05 	teq	r4, r5
   b74d8:	f000 80a7 	beq.w	b762a <__adddf3+0x1da>
   b74dc:	f1a4 0401 	sub.w	r4, r4, #1
   b74e0:	f1d5 0e20 	rsbs	lr, r5, #32
   b74e4:	db0d      	blt.n	b7502 <__adddf3+0xb2>
   b74e6:	fa02 fc0e 	lsl.w	ip, r2, lr
   b74ea:	fa22 f205 	lsr.w	r2, r2, r5
   b74ee:	1880      	adds	r0, r0, r2
   b74f0:	f141 0100 	adc.w	r1, r1, #0
   b74f4:	fa03 f20e 	lsl.w	r2, r3, lr
   b74f8:	1880      	adds	r0, r0, r2
   b74fa:	fa43 f305 	asr.w	r3, r3, r5
   b74fe:	4159      	adcs	r1, r3
   b7500:	e00e      	b.n	b7520 <__adddf3+0xd0>
   b7502:	f1a5 0520 	sub.w	r5, r5, #32
   b7506:	f10e 0e20 	add.w	lr, lr, #32
   b750a:	2a01      	cmp	r2, #1
   b750c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7510:	bf28      	it	cs
   b7512:	f04c 0c02 	orrcs.w	ip, ip, #2
   b7516:	fa43 f305 	asr.w	r3, r3, r5
   b751a:	18c0      	adds	r0, r0, r3
   b751c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7524:	d507      	bpl.n	b7536 <__adddf3+0xe6>
   b7526:	f04f 0e00 	mov.w	lr, #0
   b752a:	f1dc 0c00 	rsbs	ip, ip, #0
   b752e:	eb7e 0000 	sbcs.w	r0, lr, r0
   b7532:	eb6e 0101 	sbc.w	r1, lr, r1
   b7536:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b753a:	d31b      	bcc.n	b7574 <__adddf3+0x124>
   b753c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b7540:	d30c      	bcc.n	b755c <__adddf3+0x10c>
   b7542:	0849      	lsrs	r1, r1, #1
   b7544:	ea5f 0030 	movs.w	r0, r0, rrx
   b7548:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b754c:	f104 0401 	add.w	r4, r4, #1
   b7550:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b7554:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7558:	f080 809a 	bcs.w	b7690 <__adddf3+0x240>
   b755c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7560:	bf08      	it	eq
   b7562:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7566:	f150 0000 	adcs.w	r0, r0, #0
   b756a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b756e:	ea41 0105 	orr.w	r1, r1, r5
   b7572:	bd30      	pop	{r4, r5, pc}
   b7574:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7578:	4140      	adcs	r0, r0
   b757a:	eb41 0101 	adc.w	r1, r1, r1
   b757e:	3c01      	subs	r4, #1
   b7580:	bf28      	it	cs
   b7582:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b7586:	d2e9      	bcs.n	b755c <__adddf3+0x10c>
   b7588:	f091 0f00 	teq	r1, #0
   b758c:	bf04      	itt	eq
   b758e:	4601      	moveq	r1, r0
   b7590:	2000      	moveq	r0, #0
   b7592:	fab1 f381 	clz	r3, r1
   b7596:	bf08      	it	eq
   b7598:	3320      	addeq	r3, #32
   b759a:	f1a3 030b 	sub.w	r3, r3, #11
   b759e:	f1b3 0220 	subs.w	r2, r3, #32
   b75a2:	da0c      	bge.n	b75be <__adddf3+0x16e>
   b75a4:	320c      	adds	r2, #12
   b75a6:	dd08      	ble.n	b75ba <__adddf3+0x16a>
   b75a8:	f102 0c14 	add.w	ip, r2, #20
   b75ac:	f1c2 020c 	rsb	r2, r2, #12
   b75b0:	fa01 f00c 	lsl.w	r0, r1, ip
   b75b4:	fa21 f102 	lsr.w	r1, r1, r2
   b75b8:	e00c      	b.n	b75d4 <__adddf3+0x184>
   b75ba:	f102 0214 	add.w	r2, r2, #20
   b75be:	bfd8      	it	le
   b75c0:	f1c2 0c20 	rsble	ip, r2, #32
   b75c4:	fa01 f102 	lsl.w	r1, r1, r2
   b75c8:	fa20 fc0c 	lsr.w	ip, r0, ip
   b75cc:	bfdc      	itt	le
   b75ce:	ea41 010c 	orrle.w	r1, r1, ip
   b75d2:	4090      	lslle	r0, r2
   b75d4:	1ae4      	subs	r4, r4, r3
   b75d6:	bfa2      	ittt	ge
   b75d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b75dc:	4329      	orrge	r1, r5
   b75de:	bd30      	popge	{r4, r5, pc}
   b75e0:	ea6f 0404 	mvn.w	r4, r4
   b75e4:	3c1f      	subs	r4, #31
   b75e6:	da1c      	bge.n	b7622 <__adddf3+0x1d2>
   b75e8:	340c      	adds	r4, #12
   b75ea:	dc0e      	bgt.n	b760a <__adddf3+0x1ba>
   b75ec:	f104 0414 	add.w	r4, r4, #20
   b75f0:	f1c4 0220 	rsb	r2, r4, #32
   b75f4:	fa20 f004 	lsr.w	r0, r0, r4
   b75f8:	fa01 f302 	lsl.w	r3, r1, r2
   b75fc:	ea40 0003 	orr.w	r0, r0, r3
   b7600:	fa21 f304 	lsr.w	r3, r1, r4
   b7604:	ea45 0103 	orr.w	r1, r5, r3
   b7608:	bd30      	pop	{r4, r5, pc}
   b760a:	f1c4 040c 	rsb	r4, r4, #12
   b760e:	f1c4 0220 	rsb	r2, r4, #32
   b7612:	fa20 f002 	lsr.w	r0, r0, r2
   b7616:	fa01 f304 	lsl.w	r3, r1, r4
   b761a:	ea40 0003 	orr.w	r0, r0, r3
   b761e:	4629      	mov	r1, r5
   b7620:	bd30      	pop	{r4, r5, pc}
   b7622:	fa21 f004 	lsr.w	r0, r1, r4
   b7626:	4629      	mov	r1, r5
   b7628:	bd30      	pop	{r4, r5, pc}
   b762a:	f094 0f00 	teq	r4, #0
   b762e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b7632:	bf06      	itte	eq
   b7634:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7638:	3401      	addeq	r4, #1
   b763a:	3d01      	subne	r5, #1
   b763c:	e74e      	b.n	b74dc <__adddf3+0x8c>
   b763e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7642:	bf18      	it	ne
   b7644:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7648:	d029      	beq.n	b769e <__adddf3+0x24e>
   b764a:	ea94 0f05 	teq	r4, r5
   b764e:	bf08      	it	eq
   b7650:	ea90 0f02 	teqeq	r0, r2
   b7654:	d005      	beq.n	b7662 <__adddf3+0x212>
   b7656:	ea54 0c00 	orrs.w	ip, r4, r0
   b765a:	bf04      	itt	eq
   b765c:	4619      	moveq	r1, r3
   b765e:	4610      	moveq	r0, r2
   b7660:	bd30      	pop	{r4, r5, pc}
   b7662:	ea91 0f03 	teq	r1, r3
   b7666:	bf1e      	ittt	ne
   b7668:	2100      	movne	r1, #0
   b766a:	2000      	movne	r0, #0
   b766c:	bd30      	popne	{r4, r5, pc}
   b766e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b7672:	d105      	bne.n	b7680 <__adddf3+0x230>
   b7674:	0040      	lsls	r0, r0, #1
   b7676:	4149      	adcs	r1, r1
   b7678:	bf28      	it	cs
   b767a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b767e:	bd30      	pop	{r4, r5, pc}
   b7680:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7684:	bf3c      	itt	cc
   b7686:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b768a:	bd30      	popcc	{r4, r5, pc}
   b768c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7690:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7694:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7698:	f04f 0000 	mov.w	r0, #0
   b769c:	bd30      	pop	{r4, r5, pc}
   b769e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b76a2:	bf1a      	itte	ne
   b76a4:	4619      	movne	r1, r3
   b76a6:	4610      	movne	r0, r2
   b76a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b76ac:	bf1c      	itt	ne
   b76ae:	460b      	movne	r3, r1
   b76b0:	4602      	movne	r2, r0
   b76b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b76b6:	bf06      	itte	eq
   b76b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b76bc:	ea91 0f03 	teqeq	r1, r3
   b76c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b76c4:	bd30      	pop	{r4, r5, pc}
   b76c6:	bf00      	nop

000b76c8 <__aeabi_ui2d>:
   b76c8:	f090 0f00 	teq	r0, #0
   b76cc:	bf04      	itt	eq
   b76ce:	2100      	moveq	r1, #0
   b76d0:	4770      	bxeq	lr
   b76d2:	b530      	push	{r4, r5, lr}
   b76d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b76d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b76dc:	f04f 0500 	mov.w	r5, #0
   b76e0:	f04f 0100 	mov.w	r1, #0
   b76e4:	e750      	b.n	b7588 <__adddf3+0x138>
   b76e6:	bf00      	nop

000b76e8 <__aeabi_i2d>:
   b76e8:	f090 0f00 	teq	r0, #0
   b76ec:	bf04      	itt	eq
   b76ee:	2100      	moveq	r1, #0
   b76f0:	4770      	bxeq	lr
   b76f2:	b530      	push	{r4, r5, lr}
   b76f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b76f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b76fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7700:	bf48      	it	mi
   b7702:	4240      	negmi	r0, r0
   b7704:	f04f 0100 	mov.w	r1, #0
   b7708:	e73e      	b.n	b7588 <__adddf3+0x138>
   b770a:	bf00      	nop

000b770c <__aeabi_f2d>:
   b770c:	0042      	lsls	r2, r0, #1
   b770e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b7712:	ea4f 0131 	mov.w	r1, r1, rrx
   b7716:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b771a:	bf1f      	itttt	ne
   b771c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7720:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b7724:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7728:	4770      	bxne	lr
   b772a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b772e:	bf08      	it	eq
   b7730:	4770      	bxeq	lr
   b7732:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b7736:	bf04      	itt	eq
   b7738:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b773c:	4770      	bxeq	lr
   b773e:	b530      	push	{r4, r5, lr}
   b7740:	f44f 7460 	mov.w	r4, #896	; 0x380
   b7744:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b774c:	e71c      	b.n	b7588 <__adddf3+0x138>
   b774e:	bf00      	nop

000b7750 <__aeabi_ul2d>:
   b7750:	ea50 0201 	orrs.w	r2, r0, r1
   b7754:	bf08      	it	eq
   b7756:	4770      	bxeq	lr
   b7758:	b530      	push	{r4, r5, lr}
   b775a:	f04f 0500 	mov.w	r5, #0
   b775e:	e00a      	b.n	b7776 <__aeabi_l2d+0x16>

000b7760 <__aeabi_l2d>:
   b7760:	ea50 0201 	orrs.w	r2, r0, r1
   b7764:	bf08      	it	eq
   b7766:	4770      	bxeq	lr
   b7768:	b530      	push	{r4, r5, lr}
   b776a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b776e:	d502      	bpl.n	b7776 <__aeabi_l2d+0x16>
   b7770:	4240      	negs	r0, r0
   b7772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7776:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b777a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b777e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b7782:	f43f aed8 	beq.w	b7536 <__adddf3+0xe6>
   b7786:	f04f 0203 	mov.w	r2, #3
   b778a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b778e:	bf18      	it	ne
   b7790:	3203      	addne	r2, #3
   b7792:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7796:	bf18      	it	ne
   b7798:	3203      	addne	r2, #3
   b779a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b779e:	f1c2 0320 	rsb	r3, r2, #32
   b77a2:	fa00 fc03 	lsl.w	ip, r0, r3
   b77a6:	fa20 f002 	lsr.w	r0, r0, r2
   b77aa:	fa01 fe03 	lsl.w	lr, r1, r3
   b77ae:	ea40 000e 	orr.w	r0, r0, lr
   b77b2:	fa21 f102 	lsr.w	r1, r1, r2
   b77b6:	4414      	add	r4, r2
   b77b8:	e6bd      	b.n	b7536 <__adddf3+0xe6>
   b77ba:	bf00      	nop

000b77bc <__aeabi_dmul>:
   b77bc:	b570      	push	{r4, r5, r6, lr}
   b77be:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b77c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b77c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b77ca:	bf1d      	ittte	ne
   b77cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b77d0:	ea94 0f0c 	teqne	r4, ip
   b77d4:	ea95 0f0c 	teqne	r5, ip
   b77d8:	f000 f8de 	bleq	b7998 <__aeabi_dmul+0x1dc>
   b77dc:	442c      	add	r4, r5
   b77de:	ea81 0603 	eor.w	r6, r1, r3
   b77e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b77e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b77ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b77ee:	bf18      	it	ne
   b77f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b77f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b77f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b77fc:	d038      	beq.n	b7870 <__aeabi_dmul+0xb4>
   b77fe:	fba0 ce02 	umull	ip, lr, r0, r2
   b7802:	f04f 0500 	mov.w	r5, #0
   b7806:	fbe1 e502 	umlal	lr, r5, r1, r2
   b780a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b780e:	fbe0 e503 	umlal	lr, r5, r0, r3
   b7812:	f04f 0600 	mov.w	r6, #0
   b7816:	fbe1 5603 	umlal	r5, r6, r1, r3
   b781a:	f09c 0f00 	teq	ip, #0
   b781e:	bf18      	it	ne
   b7820:	f04e 0e01 	orrne.w	lr, lr, #1
   b7824:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7828:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b782c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b7830:	d204      	bcs.n	b783c <__aeabi_dmul+0x80>
   b7832:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b7836:	416d      	adcs	r5, r5
   b7838:	eb46 0606 	adc.w	r6, r6, r6
   b783c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b7840:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b7844:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b7848:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b784c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b7850:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7854:	bf88      	it	hi
   b7856:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b785a:	d81e      	bhi.n	b789a <__aeabi_dmul+0xde>
   b785c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7860:	bf08      	it	eq
   b7862:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b7866:	f150 0000 	adcs.w	r0, r0, #0
   b786a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b786e:	bd70      	pop	{r4, r5, r6, pc}
   b7870:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b7874:	ea46 0101 	orr.w	r1, r6, r1
   b7878:	ea40 0002 	orr.w	r0, r0, r2
   b787c:	ea81 0103 	eor.w	r1, r1, r3
   b7880:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b7884:	bfc2      	ittt	gt
   b7886:	ebd4 050c 	rsbsgt	r5, r4, ip
   b788a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b788e:	bd70      	popgt	{r4, r5, r6, pc}
   b7890:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7894:	f04f 0e00 	mov.w	lr, #0
   b7898:	3c01      	subs	r4, #1
   b789a:	f300 80ab 	bgt.w	b79f4 <__aeabi_dmul+0x238>
   b789e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b78a2:	bfde      	ittt	le
   b78a4:	2000      	movle	r0, #0
   b78a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b78aa:	bd70      	pople	{r4, r5, r6, pc}
   b78ac:	f1c4 0400 	rsb	r4, r4, #0
   b78b0:	3c20      	subs	r4, #32
   b78b2:	da35      	bge.n	b7920 <__aeabi_dmul+0x164>
   b78b4:	340c      	adds	r4, #12
   b78b6:	dc1b      	bgt.n	b78f0 <__aeabi_dmul+0x134>
   b78b8:	f104 0414 	add.w	r4, r4, #20
   b78bc:	f1c4 0520 	rsb	r5, r4, #32
   b78c0:	fa00 f305 	lsl.w	r3, r0, r5
   b78c4:	fa20 f004 	lsr.w	r0, r0, r4
   b78c8:	fa01 f205 	lsl.w	r2, r1, r5
   b78cc:	ea40 0002 	orr.w	r0, r0, r2
   b78d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b78d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b78d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b78dc:	fa21 f604 	lsr.w	r6, r1, r4
   b78e0:	eb42 0106 	adc.w	r1, r2, r6
   b78e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b78e8:	bf08      	it	eq
   b78ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b78ee:	bd70      	pop	{r4, r5, r6, pc}
   b78f0:	f1c4 040c 	rsb	r4, r4, #12
   b78f4:	f1c4 0520 	rsb	r5, r4, #32
   b78f8:	fa00 f304 	lsl.w	r3, r0, r4
   b78fc:	fa20 f005 	lsr.w	r0, r0, r5
   b7900:	fa01 f204 	lsl.w	r2, r1, r4
   b7904:	ea40 0002 	orr.w	r0, r0, r2
   b7908:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b790c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7910:	f141 0100 	adc.w	r1, r1, #0
   b7914:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7918:	bf08      	it	eq
   b791a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b791e:	bd70      	pop	{r4, r5, r6, pc}
   b7920:	f1c4 0520 	rsb	r5, r4, #32
   b7924:	fa00 f205 	lsl.w	r2, r0, r5
   b7928:	ea4e 0e02 	orr.w	lr, lr, r2
   b792c:	fa20 f304 	lsr.w	r3, r0, r4
   b7930:	fa01 f205 	lsl.w	r2, r1, r5
   b7934:	ea43 0302 	orr.w	r3, r3, r2
   b7938:	fa21 f004 	lsr.w	r0, r1, r4
   b793c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7940:	fa21 f204 	lsr.w	r2, r1, r4
   b7944:	ea20 0002 	bic.w	r0, r0, r2
   b7948:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b794c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7950:	bf08      	it	eq
   b7952:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7956:	bd70      	pop	{r4, r5, r6, pc}
   b7958:	f094 0f00 	teq	r4, #0
   b795c:	d10f      	bne.n	b797e <__aeabi_dmul+0x1c2>
   b795e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b7962:	0040      	lsls	r0, r0, #1
   b7964:	eb41 0101 	adc.w	r1, r1, r1
   b7968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b796c:	bf08      	it	eq
   b796e:	3c01      	subeq	r4, #1
   b7970:	d0f7      	beq.n	b7962 <__aeabi_dmul+0x1a6>
   b7972:	ea41 0106 	orr.w	r1, r1, r6
   b7976:	f095 0f00 	teq	r5, #0
   b797a:	bf18      	it	ne
   b797c:	4770      	bxne	lr
   b797e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b7982:	0052      	lsls	r2, r2, #1
   b7984:	eb43 0303 	adc.w	r3, r3, r3
   b7988:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b798c:	bf08      	it	eq
   b798e:	3d01      	subeq	r5, #1
   b7990:	d0f7      	beq.n	b7982 <__aeabi_dmul+0x1c6>
   b7992:	ea43 0306 	orr.w	r3, r3, r6
   b7996:	4770      	bx	lr
   b7998:	ea94 0f0c 	teq	r4, ip
   b799c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b79a0:	bf18      	it	ne
   b79a2:	ea95 0f0c 	teqne	r5, ip
   b79a6:	d00c      	beq.n	b79c2 <__aeabi_dmul+0x206>
   b79a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b79ac:	bf18      	it	ne
   b79ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b79b2:	d1d1      	bne.n	b7958 <__aeabi_dmul+0x19c>
   b79b4:	ea81 0103 	eor.w	r1, r1, r3
   b79b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b79bc:	f04f 0000 	mov.w	r0, #0
   b79c0:	bd70      	pop	{r4, r5, r6, pc}
   b79c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b79c6:	bf06      	itte	eq
   b79c8:	4610      	moveq	r0, r2
   b79ca:	4619      	moveq	r1, r3
   b79cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b79d0:	d019      	beq.n	b7a06 <__aeabi_dmul+0x24a>
   b79d2:	ea94 0f0c 	teq	r4, ip
   b79d6:	d102      	bne.n	b79de <__aeabi_dmul+0x222>
   b79d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b79dc:	d113      	bne.n	b7a06 <__aeabi_dmul+0x24a>
   b79de:	ea95 0f0c 	teq	r5, ip
   b79e2:	d105      	bne.n	b79f0 <__aeabi_dmul+0x234>
   b79e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b79e8:	bf1c      	itt	ne
   b79ea:	4610      	movne	r0, r2
   b79ec:	4619      	movne	r1, r3
   b79ee:	d10a      	bne.n	b7a06 <__aeabi_dmul+0x24a>
   b79f0:	ea81 0103 	eor.w	r1, r1, r3
   b79f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b79f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b79fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7a00:	f04f 0000 	mov.w	r0, #0
   b7a04:	bd70      	pop	{r4, r5, r6, pc}
   b7a06:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7a0a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b7a0e:	bd70      	pop	{r4, r5, r6, pc}

000b7a10 <__aeabi_ddiv>:
   b7a10:	b570      	push	{r4, r5, r6, lr}
   b7a12:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7a16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7a1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7a1e:	bf1d      	ittte	ne
   b7a20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7a24:	ea94 0f0c 	teqne	r4, ip
   b7a28:	ea95 0f0c 	teqne	r5, ip
   b7a2c:	f000 f8a7 	bleq	b7b7e <__aeabi_ddiv+0x16e>
   b7a30:	eba4 0405 	sub.w	r4, r4, r5
   b7a34:	ea81 0e03 	eor.w	lr, r1, r3
   b7a38:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7a3c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7a40:	f000 8088 	beq.w	b7b54 <__aeabi_ddiv+0x144>
   b7a44:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7a48:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b7a4c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b7a50:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b7a54:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7a58:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b7a5c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b7a60:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b7a64:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7a68:	429d      	cmp	r5, r3
   b7a6a:	bf08      	it	eq
   b7a6c:	4296      	cmpeq	r6, r2
   b7a6e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b7a72:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b7a76:	d202      	bcs.n	b7a7e <__aeabi_ddiv+0x6e>
   b7a78:	085b      	lsrs	r3, r3, #1
   b7a7a:	ea4f 0232 	mov.w	r2, r2, rrx
   b7a7e:	1ab6      	subs	r6, r6, r2
   b7a80:	eb65 0503 	sbc.w	r5, r5, r3
   b7a84:	085b      	lsrs	r3, r3, #1
   b7a86:	ea4f 0232 	mov.w	r2, r2, rrx
   b7a8a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b7a8e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b7a92:	ebb6 0e02 	subs.w	lr, r6, r2
   b7a96:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7a9a:	bf22      	ittt	cs
   b7a9c:	1ab6      	subcs	r6, r6, r2
   b7a9e:	4675      	movcs	r5, lr
   b7aa0:	ea40 000c 	orrcs.w	r0, r0, ip
   b7aa4:	085b      	lsrs	r3, r3, #1
   b7aa6:	ea4f 0232 	mov.w	r2, r2, rrx
   b7aaa:	ebb6 0e02 	subs.w	lr, r6, r2
   b7aae:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7ab2:	bf22      	ittt	cs
   b7ab4:	1ab6      	subcs	r6, r6, r2
   b7ab6:	4675      	movcs	r5, lr
   b7ab8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b7abc:	085b      	lsrs	r3, r3, #1
   b7abe:	ea4f 0232 	mov.w	r2, r2, rrx
   b7ac2:	ebb6 0e02 	subs.w	lr, r6, r2
   b7ac6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7aca:	bf22      	ittt	cs
   b7acc:	1ab6      	subcs	r6, r6, r2
   b7ace:	4675      	movcs	r5, lr
   b7ad0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b7ad4:	085b      	lsrs	r3, r3, #1
   b7ad6:	ea4f 0232 	mov.w	r2, r2, rrx
   b7ada:	ebb6 0e02 	subs.w	lr, r6, r2
   b7ade:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7ae2:	bf22      	ittt	cs
   b7ae4:	1ab6      	subcs	r6, r6, r2
   b7ae6:	4675      	movcs	r5, lr
   b7ae8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b7aec:	ea55 0e06 	orrs.w	lr, r5, r6
   b7af0:	d018      	beq.n	b7b24 <__aeabi_ddiv+0x114>
   b7af2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b7af6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b7afa:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b7afe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b7b02:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b7b06:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b7b0a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b7b0e:	d1c0      	bne.n	b7a92 <__aeabi_ddiv+0x82>
   b7b10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7b14:	d10b      	bne.n	b7b2e <__aeabi_ddiv+0x11e>
   b7b16:	ea41 0100 	orr.w	r1, r1, r0
   b7b1a:	f04f 0000 	mov.w	r0, #0
   b7b1e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b7b22:	e7b6      	b.n	b7a92 <__aeabi_ddiv+0x82>
   b7b24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7b28:	bf04      	itt	eq
   b7b2a:	4301      	orreq	r1, r0
   b7b2c:	2000      	moveq	r0, #0
   b7b2e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7b32:	bf88      	it	hi
   b7b34:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7b38:	f63f aeaf 	bhi.w	b789a <__aeabi_dmul+0xde>
   b7b3c:	ebb5 0c03 	subs.w	ip, r5, r3
   b7b40:	bf04      	itt	eq
   b7b42:	ebb6 0c02 	subseq.w	ip, r6, r2
   b7b46:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7b4a:	f150 0000 	adcs.w	r0, r0, #0
   b7b4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7b52:	bd70      	pop	{r4, r5, r6, pc}
   b7b54:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7b58:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7b5c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b7b60:	bfc2      	ittt	gt
   b7b62:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7b66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7b6a:	bd70      	popgt	{r4, r5, r6, pc}
   b7b6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7b70:	f04f 0e00 	mov.w	lr, #0
   b7b74:	3c01      	subs	r4, #1
   b7b76:	e690      	b.n	b789a <__aeabi_dmul+0xde>
   b7b78:	ea45 0e06 	orr.w	lr, r5, r6
   b7b7c:	e68d      	b.n	b789a <__aeabi_dmul+0xde>
   b7b7e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7b82:	ea94 0f0c 	teq	r4, ip
   b7b86:	bf08      	it	eq
   b7b88:	ea95 0f0c 	teqeq	r5, ip
   b7b8c:	f43f af3b 	beq.w	b7a06 <__aeabi_dmul+0x24a>
   b7b90:	ea94 0f0c 	teq	r4, ip
   b7b94:	d10a      	bne.n	b7bac <__aeabi_ddiv+0x19c>
   b7b96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7b9a:	f47f af34 	bne.w	b7a06 <__aeabi_dmul+0x24a>
   b7b9e:	ea95 0f0c 	teq	r5, ip
   b7ba2:	f47f af25 	bne.w	b79f0 <__aeabi_dmul+0x234>
   b7ba6:	4610      	mov	r0, r2
   b7ba8:	4619      	mov	r1, r3
   b7baa:	e72c      	b.n	b7a06 <__aeabi_dmul+0x24a>
   b7bac:	ea95 0f0c 	teq	r5, ip
   b7bb0:	d106      	bne.n	b7bc0 <__aeabi_ddiv+0x1b0>
   b7bb2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7bb6:	f43f aefd 	beq.w	b79b4 <__aeabi_dmul+0x1f8>
   b7bba:	4610      	mov	r0, r2
   b7bbc:	4619      	mov	r1, r3
   b7bbe:	e722      	b.n	b7a06 <__aeabi_dmul+0x24a>
   b7bc0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7bc4:	bf18      	it	ne
   b7bc6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7bca:	f47f aec5 	bne.w	b7958 <__aeabi_dmul+0x19c>
   b7bce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b7bd2:	f47f af0d 	bne.w	b79f0 <__aeabi_dmul+0x234>
   b7bd6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b7bda:	f47f aeeb 	bne.w	b79b4 <__aeabi_dmul+0x1f8>
   b7bde:	e712      	b.n	b7a06 <__aeabi_dmul+0x24a>

000b7be0 <__gedf2>:
   b7be0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b7be4:	e006      	b.n	b7bf4 <__cmpdf2+0x4>
   b7be6:	bf00      	nop

000b7be8 <__ledf2>:
   b7be8:	f04f 0c01 	mov.w	ip, #1
   b7bec:	e002      	b.n	b7bf4 <__cmpdf2+0x4>
   b7bee:	bf00      	nop

000b7bf0 <__cmpdf2>:
   b7bf0:	f04f 0c01 	mov.w	ip, #1
   b7bf4:	f84d cd04 	str.w	ip, [sp, #-4]!
   b7bf8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7bfc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7c00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7c04:	bf18      	it	ne
   b7c06:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b7c0a:	d01b      	beq.n	b7c44 <__cmpdf2+0x54>
   b7c0c:	b001      	add	sp, #4
   b7c0e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b7c12:	bf0c      	ite	eq
   b7c14:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b7c18:	ea91 0f03 	teqne	r1, r3
   b7c1c:	bf02      	ittt	eq
   b7c1e:	ea90 0f02 	teqeq	r0, r2
   b7c22:	2000      	moveq	r0, #0
   b7c24:	4770      	bxeq	lr
   b7c26:	f110 0f00 	cmn.w	r0, #0
   b7c2a:	ea91 0f03 	teq	r1, r3
   b7c2e:	bf58      	it	pl
   b7c30:	4299      	cmppl	r1, r3
   b7c32:	bf08      	it	eq
   b7c34:	4290      	cmpeq	r0, r2
   b7c36:	bf2c      	ite	cs
   b7c38:	17d8      	asrcs	r0, r3, #31
   b7c3a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b7c3e:	f040 0001 	orr.w	r0, r0, #1
   b7c42:	4770      	bx	lr
   b7c44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7c48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7c4c:	d102      	bne.n	b7c54 <__cmpdf2+0x64>
   b7c4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b7c52:	d107      	bne.n	b7c64 <__cmpdf2+0x74>
   b7c54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7c58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7c5c:	d1d6      	bne.n	b7c0c <__cmpdf2+0x1c>
   b7c5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b7c62:	d0d3      	beq.n	b7c0c <__cmpdf2+0x1c>
   b7c64:	f85d 0b04 	ldr.w	r0, [sp], #4
   b7c68:	4770      	bx	lr
   b7c6a:	bf00      	nop

000b7c6c <__aeabi_cdrcmple>:
   b7c6c:	4684      	mov	ip, r0
   b7c6e:	4610      	mov	r0, r2
   b7c70:	4662      	mov	r2, ip
   b7c72:	468c      	mov	ip, r1
   b7c74:	4619      	mov	r1, r3
   b7c76:	4663      	mov	r3, ip
   b7c78:	e000      	b.n	b7c7c <__aeabi_cdcmpeq>
   b7c7a:	bf00      	nop

000b7c7c <__aeabi_cdcmpeq>:
   b7c7c:	b501      	push	{r0, lr}
   b7c7e:	f7ff ffb7 	bl	b7bf0 <__cmpdf2>
   b7c82:	2800      	cmp	r0, #0
   b7c84:	bf48      	it	mi
   b7c86:	f110 0f00 	cmnmi.w	r0, #0
   b7c8a:	bd01      	pop	{r0, pc}

000b7c8c <__aeabi_dcmpeq>:
   b7c8c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7c90:	f7ff fff4 	bl	b7c7c <__aeabi_cdcmpeq>
   b7c94:	bf0c      	ite	eq
   b7c96:	2001      	moveq	r0, #1
   b7c98:	2000      	movne	r0, #0
   b7c9a:	f85d fb08 	ldr.w	pc, [sp], #8
   b7c9e:	bf00      	nop

000b7ca0 <__aeabi_dcmplt>:
   b7ca0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7ca4:	f7ff ffea 	bl	b7c7c <__aeabi_cdcmpeq>
   b7ca8:	bf34      	ite	cc
   b7caa:	2001      	movcc	r0, #1
   b7cac:	2000      	movcs	r0, #0
   b7cae:	f85d fb08 	ldr.w	pc, [sp], #8
   b7cb2:	bf00      	nop

000b7cb4 <__aeabi_dcmple>:
   b7cb4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7cb8:	f7ff ffe0 	bl	b7c7c <__aeabi_cdcmpeq>
   b7cbc:	bf94      	ite	ls
   b7cbe:	2001      	movls	r0, #1
   b7cc0:	2000      	movhi	r0, #0
   b7cc2:	f85d fb08 	ldr.w	pc, [sp], #8
   b7cc6:	bf00      	nop

000b7cc8 <__aeabi_dcmpge>:
   b7cc8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7ccc:	f7ff ffce 	bl	b7c6c <__aeabi_cdrcmple>
   b7cd0:	bf94      	ite	ls
   b7cd2:	2001      	movls	r0, #1
   b7cd4:	2000      	movhi	r0, #0
   b7cd6:	f85d fb08 	ldr.w	pc, [sp], #8
   b7cda:	bf00      	nop

000b7cdc <__aeabi_dcmpgt>:
   b7cdc:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7ce0:	f7ff ffc4 	bl	b7c6c <__aeabi_cdrcmple>
   b7ce4:	bf34      	ite	cc
   b7ce6:	2001      	movcc	r0, #1
   b7ce8:	2000      	movcs	r0, #0
   b7cea:	f85d fb08 	ldr.w	pc, [sp], #8
   b7cee:	bf00      	nop

000b7cf0 <__aeabi_dcmpun>:
   b7cf0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7cf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7cf8:	d102      	bne.n	b7d00 <__aeabi_dcmpun+0x10>
   b7cfa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b7cfe:	d10a      	bne.n	b7d16 <__aeabi_dcmpun+0x26>
   b7d00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7d04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7d08:	d102      	bne.n	b7d10 <__aeabi_dcmpun+0x20>
   b7d0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b7d0e:	d102      	bne.n	b7d16 <__aeabi_dcmpun+0x26>
   b7d10:	f04f 0000 	mov.w	r0, #0
   b7d14:	4770      	bx	lr
   b7d16:	f04f 0001 	mov.w	r0, #1
   b7d1a:	4770      	bx	lr

000b7d1c <__aeabi_d2iz>:
   b7d1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7d20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b7d24:	d215      	bcs.n	b7d52 <__aeabi_d2iz+0x36>
   b7d26:	d511      	bpl.n	b7d4c <__aeabi_d2iz+0x30>
   b7d28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b7d2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b7d30:	d912      	bls.n	b7d58 <__aeabi_d2iz+0x3c>
   b7d32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7d36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b7d3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b7d3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7d42:	fa23 f002 	lsr.w	r0, r3, r2
   b7d46:	bf18      	it	ne
   b7d48:	4240      	negne	r0, r0
   b7d4a:	4770      	bx	lr
   b7d4c:	f04f 0000 	mov.w	r0, #0
   b7d50:	4770      	bx	lr
   b7d52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b7d56:	d105      	bne.n	b7d64 <__aeabi_d2iz+0x48>
   b7d58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b7d5c:	bf08      	it	eq
   b7d5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b7d62:	4770      	bx	lr
   b7d64:	f04f 0000 	mov.w	r0, #0
   b7d68:	4770      	bx	lr
   b7d6a:	bf00      	nop

000b7d6c <__aeabi_d2uiz>:
   b7d6c:	004a      	lsls	r2, r1, #1
   b7d6e:	d211      	bcs.n	b7d94 <__aeabi_d2uiz+0x28>
   b7d70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b7d74:	d211      	bcs.n	b7d9a <__aeabi_d2uiz+0x2e>
   b7d76:	d50d      	bpl.n	b7d94 <__aeabi_d2uiz+0x28>
   b7d78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b7d7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b7d80:	d40e      	bmi.n	b7da0 <__aeabi_d2uiz+0x34>
   b7d82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7d86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b7d8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b7d8e:	fa23 f002 	lsr.w	r0, r3, r2
   b7d92:	4770      	bx	lr
   b7d94:	f04f 0000 	mov.w	r0, #0
   b7d98:	4770      	bx	lr
   b7d9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b7d9e:	d102      	bne.n	b7da6 <__aeabi_d2uiz+0x3a>
   b7da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7da4:	4770      	bx	lr
   b7da6:	f04f 0000 	mov.w	r0, #0
   b7daa:	4770      	bx	lr

000b7dac <__aeabi_d2f>:
   b7dac:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7db0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b7db4:	bf24      	itt	cs
   b7db6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b7dba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b7dbe:	d90d      	bls.n	b7ddc <__aeabi_d2f+0x30>
   b7dc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b7dc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b7dc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b7dcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b7dd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b7dd4:	bf08      	it	eq
   b7dd6:	f020 0001 	biceq.w	r0, r0, #1
   b7dda:	4770      	bx	lr
   b7ddc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b7de0:	d121      	bne.n	b7e26 <__aeabi_d2f+0x7a>
   b7de2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b7de6:	bfbc      	itt	lt
   b7de8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b7dec:	4770      	bxlt	lr
   b7dee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7df2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b7df6:	f1c2 0218 	rsb	r2, r2, #24
   b7dfa:	f1c2 0c20 	rsb	ip, r2, #32
   b7dfe:	fa10 f30c 	lsls.w	r3, r0, ip
   b7e02:	fa20 f002 	lsr.w	r0, r0, r2
   b7e06:	bf18      	it	ne
   b7e08:	f040 0001 	orrne.w	r0, r0, #1
   b7e0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7e10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b7e14:	fa03 fc0c 	lsl.w	ip, r3, ip
   b7e18:	ea40 000c 	orr.w	r0, r0, ip
   b7e1c:	fa23 f302 	lsr.w	r3, r3, r2
   b7e20:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7e24:	e7cc      	b.n	b7dc0 <__aeabi_d2f+0x14>
   b7e26:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b7e2a:	d107      	bne.n	b7e3c <__aeabi_d2f+0x90>
   b7e2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b7e30:	bf1e      	ittt	ne
   b7e32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b7e36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b7e3a:	4770      	bxne	lr
   b7e3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b7e40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7e48:	4770      	bx	lr
   b7e4a:	bf00      	nop

000b7e4c <atexit>:
   b7e4c:	2300      	movs	r3, #0
   b7e4e:	4601      	mov	r1, r0
   b7e50:	461a      	mov	r2, r3
   b7e52:	4618      	mov	r0, r3
   b7e54:	f000 b85c 	b.w	b7f10 <__register_exitproc>

000b7e58 <memcmp>:
   b7e58:	b510      	push	{r4, lr}
   b7e5a:	3901      	subs	r1, #1
   b7e5c:	4402      	add	r2, r0
   b7e5e:	4290      	cmp	r0, r2
   b7e60:	d101      	bne.n	b7e66 <memcmp+0xe>
   b7e62:	2000      	movs	r0, #0
   b7e64:	e005      	b.n	b7e72 <memcmp+0x1a>
   b7e66:	7803      	ldrb	r3, [r0, #0]
   b7e68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b7e6c:	42a3      	cmp	r3, r4
   b7e6e:	d001      	beq.n	b7e74 <memcmp+0x1c>
   b7e70:	1b18      	subs	r0, r3, r4
   b7e72:	bd10      	pop	{r4, pc}
   b7e74:	3001      	adds	r0, #1
   b7e76:	e7f2      	b.n	b7e5e <memcmp+0x6>

000b7e78 <memcpy>:
   b7e78:	440a      	add	r2, r1
   b7e7a:	4291      	cmp	r1, r2
   b7e7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7e80:	d100      	bne.n	b7e84 <memcpy+0xc>
   b7e82:	4770      	bx	lr
   b7e84:	b510      	push	{r4, lr}
   b7e86:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7e8a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7e8e:	4291      	cmp	r1, r2
   b7e90:	d1f9      	bne.n	b7e86 <memcpy+0xe>
   b7e92:	bd10      	pop	{r4, pc}

000b7e94 <memset>:
   b7e94:	4402      	add	r2, r0
   b7e96:	4603      	mov	r3, r0
   b7e98:	4293      	cmp	r3, r2
   b7e9a:	d100      	bne.n	b7e9e <memset+0xa>
   b7e9c:	4770      	bx	lr
   b7e9e:	f803 1b01 	strb.w	r1, [r3], #1
   b7ea2:	e7f9      	b.n	b7e98 <memset+0x4>

000b7ea4 <srand>:
   b7ea4:	b538      	push	{r3, r4, r5, lr}
   b7ea6:	4b10      	ldr	r3, [pc, #64]	; (b7ee8 <srand+0x44>)
   b7ea8:	681d      	ldr	r5, [r3, #0]
   b7eaa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7eac:	4604      	mov	r4, r0
   b7eae:	b9b3      	cbnz	r3, b7ede <srand+0x3a>
   b7eb0:	2018      	movs	r0, #24
   b7eb2:	f7fe f9bd 	bl	b6230 <malloc>
   b7eb6:	4602      	mov	r2, r0
   b7eb8:	63a8      	str	r0, [r5, #56]	; 0x38
   b7eba:	b920      	cbnz	r0, b7ec6 <srand+0x22>
   b7ebc:	4b0b      	ldr	r3, [pc, #44]	; (b7eec <srand+0x48>)
   b7ebe:	480c      	ldr	r0, [pc, #48]	; (b7ef0 <srand+0x4c>)
   b7ec0:	2142      	movs	r1, #66	; 0x42
   b7ec2:	f7fe f9d5 	bl	b6270 <__assert_func>
   b7ec6:	490b      	ldr	r1, [pc, #44]	; (b7ef4 <srand+0x50>)
   b7ec8:	4b0b      	ldr	r3, [pc, #44]	; (b7ef8 <srand+0x54>)
   b7eca:	e9c0 1300 	strd	r1, r3, [r0]
   b7ece:	4b0b      	ldr	r3, [pc, #44]	; (b7efc <srand+0x58>)
   b7ed0:	6083      	str	r3, [r0, #8]
   b7ed2:	230b      	movs	r3, #11
   b7ed4:	8183      	strh	r3, [r0, #12]
   b7ed6:	2100      	movs	r1, #0
   b7ed8:	2001      	movs	r0, #1
   b7eda:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7ede:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7ee0:	2200      	movs	r2, #0
   b7ee2:	611c      	str	r4, [r3, #16]
   b7ee4:	615a      	str	r2, [r3, #20]
   b7ee6:	bd38      	pop	{r3, r4, r5, pc}
   b7ee8:	2003de18 	.word	0x2003de18
   b7eec:	000b8345 	.word	0x000b8345
   b7ef0:	000b835c 	.word	0x000b835c
   b7ef4:	abcd330e 	.word	0xabcd330e
   b7ef8:	e66d1234 	.word	0xe66d1234
   b7efc:	0005deec 	.word	0x0005deec

000b7f00 <strlen>:
   b7f00:	4603      	mov	r3, r0
   b7f02:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7f06:	2a00      	cmp	r2, #0
   b7f08:	d1fb      	bne.n	b7f02 <strlen+0x2>
   b7f0a:	1a18      	subs	r0, r3, r0
   b7f0c:	3801      	subs	r0, #1
   b7f0e:	4770      	bx	lr

000b7f10 <__register_exitproc>:
   b7f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7f14:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7fd0 <__register_exitproc+0xc0>
   b7f18:	4606      	mov	r6, r0
   b7f1a:	f8d8 0000 	ldr.w	r0, [r8]
   b7f1e:	461f      	mov	r7, r3
   b7f20:	460d      	mov	r5, r1
   b7f22:	4691      	mov	r9, r2
   b7f24:	f000 f856 	bl	b7fd4 <__retarget_lock_acquire_recursive>
   b7f28:	4b25      	ldr	r3, [pc, #148]	; (b7fc0 <__register_exitproc+0xb0>)
   b7f2a:	681c      	ldr	r4, [r3, #0]
   b7f2c:	b934      	cbnz	r4, b7f3c <__register_exitproc+0x2c>
   b7f2e:	4c25      	ldr	r4, [pc, #148]	; (b7fc4 <__register_exitproc+0xb4>)
   b7f30:	601c      	str	r4, [r3, #0]
   b7f32:	4b25      	ldr	r3, [pc, #148]	; (b7fc8 <__register_exitproc+0xb8>)
   b7f34:	b113      	cbz	r3, b7f3c <__register_exitproc+0x2c>
   b7f36:	681b      	ldr	r3, [r3, #0]
   b7f38:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7f3c:	6863      	ldr	r3, [r4, #4]
   b7f3e:	2b1f      	cmp	r3, #31
   b7f40:	dd07      	ble.n	b7f52 <__register_exitproc+0x42>
   b7f42:	f8d8 0000 	ldr.w	r0, [r8]
   b7f46:	f000 f847 	bl	b7fd8 <__retarget_lock_release_recursive>
   b7f4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7f52:	b34e      	cbz	r6, b7fa8 <__register_exitproc+0x98>
   b7f54:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7f58:	b988      	cbnz	r0, b7f7e <__register_exitproc+0x6e>
   b7f5a:	4b1c      	ldr	r3, [pc, #112]	; (b7fcc <__register_exitproc+0xbc>)
   b7f5c:	b923      	cbnz	r3, b7f68 <__register_exitproc+0x58>
   b7f5e:	f8d8 0000 	ldr.w	r0, [r8]
   b7f62:	f000 f838 	bl	b7fd6 <__retarget_lock_release>
   b7f66:	e7f0      	b.n	b7f4a <__register_exitproc+0x3a>
   b7f68:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7f6c:	f7fe f960 	bl	b6230 <malloc>
   b7f70:	2800      	cmp	r0, #0
   b7f72:	d0f4      	beq.n	b7f5e <__register_exitproc+0x4e>
   b7f74:	2300      	movs	r3, #0
   b7f76:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7f7a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7f7e:	6863      	ldr	r3, [r4, #4]
   b7f80:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7f84:	2201      	movs	r2, #1
   b7f86:	409a      	lsls	r2, r3
   b7f88:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7f8c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7f90:	4313      	orrs	r3, r2
   b7f92:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7f96:	2e02      	cmp	r6, #2
   b7f98:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7f9c:	bf02      	ittt	eq
   b7f9e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7fa2:	4313      	orreq	r3, r2
   b7fa4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7fa8:	6863      	ldr	r3, [r4, #4]
   b7faa:	f8d8 0000 	ldr.w	r0, [r8]
   b7fae:	1c5a      	adds	r2, r3, #1
   b7fb0:	3302      	adds	r3, #2
   b7fb2:	6062      	str	r2, [r4, #4]
   b7fb4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7fb8:	f000 f80e 	bl	b7fd8 <__retarget_lock_release_recursive>
   b7fbc:	2000      	movs	r0, #0
   b7fbe:	e7c6      	b.n	b7f4e <__register_exitproc+0x3e>
   b7fc0:	2003e7e8 	.word	0x2003e7e8
   b7fc4:	2003e75c 	.word	0x2003e75c
   b7fc8:	00000000 	.word	0x00000000
   b7fcc:	000b6231 	.word	0x000b6231
   b7fd0:	2003de7c 	.word	0x2003de7c

000b7fd4 <__retarget_lock_acquire_recursive>:
   b7fd4:	4770      	bx	lr

000b7fd6 <__retarget_lock_release>:
   b7fd6:	4770      	bx	lr

000b7fd8 <__retarget_lock_release_recursive>:
   b7fd8:	4770      	bx	lr

000b7fda <link_code_end>:
	...

000b7fdc <dynalib_user>:
   b7fdc:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b7fec:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   b7ffc:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   b800c:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   b801c:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   b802c:	4f4d 4544 7525 003e 614d 6278 746f 7869     MODE%u>.Maxbotix
   b803c:	5420 7365 0074 6c53 6565 6970 676e 6620      Test.Sleeping f
   b804c:	726f 0020 6954 656d 203a 2c00 4420 7369     or .Time: ., Dis
   b805c:	6174 636e 2865 6d63 3a29 0020 6166 6c69     tance(cm): .fail
   b806c:	6465 7420 206f 706f 6e65 6320 7261 0064     ed to open card.
   b807c:	6964 7473 6e61 6563 742e 7478 6f00 6570     distance.txt.ope
   b808c:	696e 676e 7420 7365 2e74 7874 2074 6f66     ning test.txt fo
   b809c:	2072 7277 7469 2065 6166 6c69 6465 2c00     r write failed.,
   b80ac:	2500 696c 252c 352e 2c66 2e25 3230 2c66     .%li,%.5f,%.02f,
   b80bc:	2e25 3230 0066 7570 6c62 7369 6968 676e     %.02f.publishing
   b80cc:	6420 7461 0061 616d 2078 6974 656d 6620      data.max time f
   b80dc:	726f 7020 6275 696c 6873 6e69 2067 6572     or publishing re
   b80ec:	6361 6568 2064 6977 6874 756f 2074 7573     ached without su
   b80fc:	6363 7365 3b73 6720 206f 6f74 7320 656c     ccess; go to sle
   b810c:	7065 4e00 746f 6d20 7861 7420 6d69 2c65     ep.Not max time,
   b811c:	7420 7972 6120 6167 6e69 7420 206f 7570      try again to pu
   b812c:	6c62 7369 0068 6f67 6e69 2067 6f74 7320     blish.going to s
   b813c:	656c 7065 4600 6565 696c 676e 7220 7365     leep.Feeling res
   b814c:	6c74 7365 0073 0000                         tless...

000b8154 <_ZTVN8particle11SPISettingsE>:
	...
   b815c:	4185 000b 40af 000b 4117 000b               .A...@...A..

000b8168 <_ZTV4File>:
	...
   b8170:	40cb 000b 4125 000b 40ff 000b 40f9 000b     .@..%A...@...@..
   b8180:	40b1 000b 40d9 000b 40d3 000b 40cd 000b     .@...@...@...@..

000b8190 <_ZTVN5spark13CellularClassE>:
	...
   b8198:	6307 000b 62fd 000b 62f3 000b 62a9 000b     .c...b...b...b..
   b81a8:	62e7 000b 62db 000b 67a5 000b 67ad 000b     .b...b...g...g..
   b81b8:	62cf 000b 62c7 000b 62bd 000b 62b3 000b     .b...b...b...b..
   b81c8:	67dd 000b                                   .g..

000b81cc <_ZTVN5spark13EthernetClassE>:
	...
   b81d4:	639f 000b 6395 000b 638b 000b 6381 000b     .c...c...c...c..
   b81e4:	6375 000b 6369 000b 67a5 000b 67ad 000b     uc..ic...g...g..
   b81f4:	635d 000b 6355 000b 634b 000b 6341 000b     ]c..Uc..Kc..Ac..
   b8204:	67dd 000b                                   .g..

000b8208 <_ZTV7TwoWire>:
	...
   b8210:	6545 000b 658f 000b 6567 000b 6547 000b     Ee...e..ge..Ge..
   b8220:	656f 000b 6577 000b 657f 000b 6587 000b     oe..we...e...e..

000b8230 <_ZTV9IPAddress>:
	...
   b8238:	6673 000b 6663 000b 6665 000b 7061 0070     sf..cf..ef..app.

000b8248 <_ZTVN5spark12NetworkClassE>:
	...
   b8250:	6765 000b 676f 000b 6779 000b 6783 000b     eg..og..yg...g..
   b8260:	678d 000b 6799 000b 67a5 000b 67ad 000b     .g...g...g...g..
   b8270:	67b5 000b 67c1 000b 67c9 000b 67d3 000b     .g...g...g...g..
   b8280:	67dd 000b 616e 006e 6e69 0066 766f 0066     .g..nan.inf.ovf.

000b8290 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b8290:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   b82a0:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   b82b0:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   b82c0:	6c61 6469 002e 5925 252d 2d6d 6425 2554     alid..%Y-%m-%dT%
   b82d0:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   b82e0:	0065 0000                                   e...

000b82e4 <_ZTV11USARTSerial>:
	...
   b82ec:	6edd 000b 6f49 000b 6f21 000b 68c9 000b     .n..Io..!o...h..
   b82fc:	6ef1 000b 6f0d 000b 6eff 000b 6f1b 000b     .n...o...n...o..
   b830c:	6edf 000b 6ee3 000b                         .n...n..

000b8314 <_ZTV9USBSerial>:
	...
   b831c:	6f87 000b 6fef 000b 6fc5 000b 68c9 000b     .o...o...o...h..
   b832c:	6fb7 000b 6f89 000b 6f99 000b 6fe9 000b     .o...o...o...o..
   b833c:	6fa9 000b 6f81 000b                         .o...o..

000b8344 <_ZSt7nothrow>:
   b8344:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b8354:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b8364:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b8374:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b8384:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b8394:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b83a4:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b83b5 <link_const_variable_data_end>:
   b83b5:	00          	.byte	0x00
	...

000b83b8 <link_constructors_location>:
   b83b8:	000b46b5 	.word	0x000b46b5
   b83bc:	000b6299 	.word	0x000b6299
   b83c0:	000b6311 	.word	0x000b6311
   b83c4:	000b63a9 	.word	0x000b63a9
   b83c8:	000b6755 	.word	0x000b6755
   b83cc:	000b68b5 	.word	0x000b68b5
   b83d0:	000b6b7d 	.word	0x000b6b7d
   b83d4:	000b6e31 	.word	0x000b6e31
   b83d8:	000b6ec9 	.word	0x000b6ec9

000b83dc <link_constructors_end>:
   b83dc:	00000000 	.word	0x00000000
